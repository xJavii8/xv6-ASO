!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/dsevilla/prog/aso-grad/2022-2023/practicas/xv6/xv6/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	/p5.9.20220828.0/
%	user/Makefile	/^%: %.c$/;"	t
%	user/Makefile	/^%: %.o libc.a$/;"	t
.bss	kernel.ld	/^	.bss : {$/;"	S
.data	kernel.ld	/^	.data : {$/;"	S
.gdbinit	Makefile	/^.gdbinit: .gdbinit.tmpl$/;"	t
.rodata	kernel.ld	/^	.rodata : {$/;"	S
.text	kernel.ld	/^	.text : AT(0x100000) {$/;"	S
ALT	kbd.h	/^#define ALT /;"	d
AR	user/Makefile	/^AR = $(TOOLPREFIX)ar$/;"	m
AS	Makefile	/^AS = $(TOOLPREFIX)gas$/;"	m
AS	user/Makefile	/^AS = $(TOOLPREFIX)gas$/;"	m
ASFLAGS	Makefile	/^ASFLAGS = -m32 -gdwarf-2 -Wa,-divide$/;"	m
ASFLAGS	user/Makefile	/^ASFLAGS = -m32 -gdwarf-2 -Wa,-divide$/;"	m
ASSERT	lapic.c	/^  #define ASSERT /;"	d	file:
Align	user/umalloc.c	/^typedef long Align;$/;"	t	typeref:typename:long	file:
BACK	user/sh.c	/^#define BACK /;"	d	file:
BACKSPACE	console.c	/^#define BACKSPACE /;"	d	file:
BBLOCK	fs.h	/^#define BBLOCK(/;"	d
BCAST	lapic.c	/^  #define BCAST /;"	d	file:
BIG	user/usertests.asm	/^#define BIG /;"	d	file:
BIG	user/usertests.c	/^#define BIG /;"	d	file:
BPB	fs.h	/^#define BPB /;"	d
BSIZE	fs.h	/^#define BSIZE /;"	d
BUSY	lapic.c	/^  #define BUSY /;"	d	file:
B_DIRTY	buf.h	/^#define B_DIRTY /;"	d
B_VALID	buf.h	/^#define B_VALID /;"	d
C	console.c	/^#define C(/;"	d	file:
C	kbd.h	/^#define C(/;"	d
CAPSLOCK	kbd.h	/^#define CAPSLOCK /;"	d
CC	Makefile	/^CC = $(TOOLPREFIX)gcc$/;"	m
CC	user/Makefile	/^CC = $(TOOLPREFIX)gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS = -fno-pic -static -fno-builtin -fno-strict-aliasing -Og -Wall -MD -ggdb -march=i386 -m32/;"	m
CFLAGS	user/Makefile	/^CFLAGS = -fno-pic -static -fno-builtin -fno-strict-aliasing -Og -Wall -MD -ggdb -march=i386 -m32/;"	m
CMOS_PORT	lapic.c	/^#define CMOS_PORT /;"	d	file:
CMOS_RETURN	lapic.c	/^#define CMOS_RETURN /;"	d	file:
CMOS_STATA	lapic.c	/^#define CMOS_STATA /;"	d	file:
CMOS_STATB	lapic.c	/^#define CMOS_STATB /;"	d	file:
CMOS_UIP	lapic.c	/^#define CMOS_UIP /;"	d	file:
COM1	uart.c	/^#define COM1 /;"	d	file:
CONSOLE	file.h	/^#define CONSOLE /;"	d
CONV	kernel.asm	/^#define    CONV(/;"	d	file:
CONV	lapic.c	/^#define    CONV(/;"	d	file:
CPPFLAGS	user/Makefile	/^CPPFLAGS = -I. -I..$/;"	m
CPUS	Makefile	/^CPUS := 2$/;"	m
CR0_PE	mmu.h	/^#define CR0_PE /;"	d
CR0_PG	mmu.h	/^#define CR0_PG /;"	d
CR0_WP	mmu.h	/^#define CR0_WP /;"	d
CR4_PSE	mmu.h	/^#define CR4_PSE /;"	d
CRTPORT	console.c	/^#define CRTPORT /;"	d	file:
CTL	kbd.h	/^#define CTL /;"	d
DAY	lapic.c	/^#define DAY /;"	d	file:
DEASSERT	lapic.c	/^  #define DEASSERT /;"	d	file:
DELIVS	lapic.c	/^  #define DELIVS /;"	d	file:
DEVSPACE	memlayout.h	/^#define DEVSPACE /;"	d
DIRSIZ	fs.h	/^#define DIRSIZ /;"	d
DPL_USER	mmu.h	/^#define DPL_USER /;"	d
Desensamblado	bootblock.asm	/^Desensamblado de la sección .text:$/;"	d
Desensamblado	entryother.asm	/^Desensamblado de la sección .text:$/;"	d
Desensamblado	initcode.asm	/^Desensamblado de la sección .text:$/;"	d
Desensamblado	kernel.asm	/^Desensamblado de la sección .text:$/;"	d
Desensamblado	user/cat.asm	/^Desensamblado de la sección .text:$/;"	d
Desensamblado	user/echo.asm	/^Desensamblado de la sección .text:$/;"	d
Desensamblado	user/forktest.asm	/^Desensamblado de la sección .text:$/;"	d
Desensamblado	user/grep.asm	/^Desensamblado de la sección .text:$/;"	d
Desensamblado	user/init.asm	/^Desensamblado de la sección .text:$/;"	d
Desensamblado	user/kill.asm	/^Desensamblado de la sección .text:$/;"	d
Desensamblado	user/ln.asm	/^Desensamblado de la sección .text:$/;"	d
Desensamblado	user/ls.asm	/^Desensamblado de la sección .text:$/;"	d
Desensamblado	user/mkdir.asm	/^Desensamblado de la sección .text:$/;"	d
Desensamblado	user/rm.asm	/^Desensamblado de la sección .text:$/;"	d
Desensamblado	user/sh.asm	/^Desensamblado de la sección .text:$/;"	d
Desensamblado	user/stressfs.asm	/^Desensamblado de la sección .text:$/;"	d
Desensamblado	user/usertests.asm	/^Desensamblado de la sección .text:$/;"	d
Desensamblado	user/wc.asm	/^Desensamblado de la sección .text:$/;"	d
Desensamblado	user/zombie.asm	/^Desensamblado de la sección .text:$/;"	d
E0ESC	kbd.h	/^#define E0ESC /;"	d
ELF_MAGIC	elf.h	/^#define ELF_MAGIC /;"	d
ELF_PROG_FLAG_EXEC	elf.h	/^#define ELF_PROG_FLAG_EXEC /;"	d
ELF_PROG_FLAG_READ	elf.h	/^#define ELF_PROG_FLAG_READ /;"	d
ELF_PROG_FLAG_WRITE	elf.h	/^#define ELF_PROG_FLAG_WRITE /;"	d
ELF_PROG_LOAD	elf.h	/^#define ELF_PROG_LOAD /;"	d
EMBRYO	proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
ENABLE	lapic.c	/^  #define ENABLE /;"	d	file:
EOI	lapic.c	/^#define EOI /;"	d	file:
ERROR	lapic.c	/^#define ERROR /;"	d	file:
ESR	lapic.c	/^#define ESR /;"	d	file:
EXEC	user/sh.c	/^#define EXEC /;"	d	file:
EXTMEM	memlayout.h	/^#define EXTMEM /;"	d
EXTRA	Makefile	/^EXTRA=\\$/;"	m
FD_INODE	file.h	/^  enum { FD_NONE, FD_PIPE, FD_INODE } type;$/;"	e	enum:file::__anonfd762ebb0103
FD_NONE	file.h	/^  enum { FD_NONE, FD_PIPE, FD_INODE } type;$/;"	e	enum:file::__anonfd762ebb0103
FD_PIPE	file.h	/^  enum { FD_NONE, FD_PIPE, FD_INODE } type;$/;"	e	enum:file::__anonfd762ebb0103
FILES	Makefile	/^FILES = $(shell grep -v '^#' runoff.list)$/;"	m
FIXED	lapic.c	/^  #define FIXED /;"	d	file:
FL_IF	mmu.h	/^#define FL_IF /;"	d
FSSIZE	param.h	/^#define FSSIZE /;"	d
GDBPORT	Makefile	/^GDBPORT = $(shell expr `id -u` % 5000 + 25000)$/;"	m
HOURS	lapic.c	/^#define HOURS /;"	d	file:
Header	user/umalloc.c	/^typedef union header Header;$/;"	t	typeref:union:header	file:
IBLOCK	fs.h	/^#define IBLOCK(/;"	d
ICRHI	lapic.c	/^#define ICRHI /;"	d	file:
ICRLO	lapic.c	/^#define ICRLO /;"	d	file:
ID	lapic.c	/^#define ID /;"	d	file:
IDE_BSY	ide.c	/^#define IDE_BSY /;"	d	file:
IDE_CMD_RDMUL	ide.c	/^#define IDE_CMD_RDMUL /;"	d	file:
IDE_CMD_READ	ide.c	/^#define IDE_CMD_READ /;"	d	file:
IDE_CMD_WRITE	ide.c	/^#define IDE_CMD_WRITE /;"	d	file:
IDE_CMD_WRMUL	ide.c	/^#define IDE_CMD_WRMUL /;"	d	file:
IDE_DF	ide.c	/^#define IDE_DF /;"	d	file:
IDE_DRDY	ide.c	/^#define IDE_DRDY /;"	d	file:
IDE_ERR	ide.c	/^#define IDE_ERR /;"	d	file:
INIT	lapic.c	/^  #define INIT /;"	d	file:
INPUT_BUF	console.c	/^#define INPUT_BUF /;"	d	file:
INT_ACTIVELOW	ioapic.c	/^#define INT_ACTIVELOW /;"	d	file:
INT_DISABLED	ioapic.c	/^#define INT_DISABLED /;"	d	file:
INT_LEVEL	ioapic.c	/^#define INT_LEVEL /;"	d	file:
INT_LOGICAL	ioapic.c	/^#define INT_LOGICAL /;"	d	file:
IOAPIC	ioapic.c	/^#define IOAPIC /;"	d	file:
IO_PIC1	picirq.c	/^#define IO_PIC1 /;"	d	file:
IO_PIC2	picirq.c	/^#define IO_PIC2 /;"	d	file:
IPB	fs.h	/^#define IPB /;"	d
IRQ_COM1	traps.h	/^#define IRQ_COM1 /;"	d
IRQ_ERROR	traps.h	/^#define IRQ_ERROR /;"	d
IRQ_IDE	traps.h	/^#define IRQ_IDE /;"	d
IRQ_KBD	traps.h	/^#define IRQ_KBD /;"	d
IRQ_SPURIOUS	traps.h	/^#define IRQ_SPURIOUS /;"	d
IRQ_TIMER	traps.h	/^#define IRQ_TIMER /;"	d
KBDATAP	kbd.h	/^#define KBDATAP /;"	d
KBSTATP	kbd.h	/^#define KBSTATP /;"	d
KBS_DIB	kbd.h	/^#define KBS_DIB /;"	d
KERNBASE	memlayout.h	/^#define KERNBASE /;"	d
KERNLINK	memlayout.h	/^#define KERNLINK /;"	d
KEY_DEL	kbd.h	/^#define KEY_DEL /;"	d
KEY_DN	kbd.h	/^#define KEY_DN /;"	d
KEY_END	kbd.h	/^#define KEY_END /;"	d
KEY_HOME	kbd.h	/^#define KEY_HOME /;"	d
KEY_INS	kbd.h	/^#define KEY_INS /;"	d
KEY_LF	kbd.h	/^#define KEY_LF /;"	d
KEY_PGDN	kbd.h	/^#define KEY_PGDN /;"	d
KEY_PGUP	kbd.h	/^#define KEY_PGUP /;"	d
KEY_RT	kbd.h	/^#define KEY_RT /;"	d
KEY_UP	kbd.h	/^#define KEY_UP /;"	d
KSTACKSIZE	param.h	/^#define KSTACKSIZE /;"	d
LD	Makefile	/^LD = $(TOOLPREFIX)ld$/;"	m
LD	user/Makefile	/^LD = $(TOOLPREFIX)ld$/;"	m
LEVEL	lapic.c	/^  #define LEVEL /;"	d	file:
LINT0	lapic.c	/^#define LINT0 /;"	d	file:
LINT1	lapic.c	/^#define LINT1 /;"	d	file:
LIST	user/sh.c	/^#define LIST /;"	d	file:
LOGSIZE	param.h	/^#define LOGSIZE /;"	d
MASKED	lapic.c	/^  #define MASKED /;"	d	file:
MAXARG	param.h	/^#define MAXARG /;"	d
MAXARGS	user/sh.c	/^#define MAXARGS /;"	d	file:
MAXFILE	fs.h	/^#define MAXFILE /;"	d
MAXOPBLOCKS	param.h	/^#define MAXOPBLOCKS /;"	d
MEMFSOBJS	Makefile	/^MEMFSOBJS = $(filter-out ide.o,$(OBJS)) memide.o$/;"	m
MINS	lapic.c	/^#define MINS /;"	d	file:
MONTH	lapic.c	/^#define MONTH /;"	d	file:
MPBOOT	mp.h	/^    #define MPBOOT /;"	d
MPBUS	mp.h	/^#define MPBUS /;"	d
MPIOAPIC	mp.h	/^#define MPIOAPIC /;"	d
MPIOINTR	mp.h	/^#define MPIOINTR /;"	d
MPLINTR	mp.h	/^#define MPLINTR /;"	d
MPPROC	mp.h	/^#define MPPROC /;"	d
N	user/forktest.asm	/^#define N /;"	d	file:
N	user/forktest.c	/^#define N /;"	d	file:
N	user/usertests.c	/^  enum { N = 20 };$/;"	e	enum:createdelete::__anon2469bfd60103	file:
NBUF	param.h	/^#define NBUF /;"	d
NCPU	param.h	/^#define NCPU /;"	d
NDEV	param.h	/^#define NDEV /;"	d
NDIRECT	fs.h	/^#define NDIRECT /;"	d
NELEM	defs.h	/^#define NELEM(/;"	d
NFILE	param.h	/^#define NFILE /;"	d
NINDIRECT	fs.h	/^#define NINDIRECT /;"	d
NINODE	param.h	/^#define NINODE /;"	d
NINODES	mkfs.c	/^#define NINODES /;"	d	file:
NO	kbd.h	/^#define NO /;"	d
NOFILE	param.h	/^#define NOFILE /;"	d
NPDENTRIES	mmu.h	/^#define NPDENTRIES /;"	d
NPROC	param.h	/^#define NPROC /;"	d
NPTENTRIES	mmu.h	/^#define NPTENTRIES /;"	d
NSEGS	mmu.h	/^#define NSEGS /;"	d
NULL	types.h	/^#define NULL /;"	d
NULL	user/user.h	/^#define NULL /;"	d
NUMLOCK	kbd.h	/^#define NUMLOCK /;"	d
OBJCOPY	Makefile	/^OBJCOPY = $(TOOLPREFIX)objcopy$/;"	m
OBJCOPY	user/Makefile	/^OBJCOPY = $(TOOLPREFIX)objcopy$/;"	m
OBJDUMP	Makefile	/^OBJDUMP = $(TOOLPREFIX)objdump$/;"	m
OBJDUMP	user/Makefile	/^OBJDUMP = $(TOOLPREFIX)objdump$/;"	m
OBJS	Makefile	/^OBJS = \\$/;"	m
O_CREATE	fcntl.h	/^#define O_CREATE /;"	d
O_RDONLY	fcntl.h	/^#define O_RDONLY /;"	d
O_RDWR	fcntl.h	/^#define O_RDWR /;"	d
O_WRONLY	fcntl.h	/^#define O_WRONLY /;"	d
P2V	memlayout.h	/^#define P2V(/;"	d
P2V_WO	memlayout.h	/^#define P2V_WO(/;"	d
PCINT	lapic.c	/^#define PCINT /;"	d	file:
PDX	mmu.h	/^#define PDX(/;"	d
PDXSHIFT	mmu.h	/^#define PDXSHIFT /;"	d
PERIODIC	lapic.c	/^  #define PERIODIC /;"	d	file:
PGADDR	mmu.h	/^#define PGADDR(/;"	d
PGROUNDDOWN	mmu.h	/^#define PGROUNDDOWN(/;"	d
PGROUNDUP	mmu.h	/^#define PGROUNDUP(/;"	d
PGSIZE	mmu.h	/^#define PGSIZE /;"	d
PHYSTOP	memlayout.h	/^#define PHYSTOP /;"	d
PIPE	user/sh.c	/^#define PIPE /;"	d	file:
PIPESIZE	pipe.c	/^#define PIPESIZE /;"	d	file:
PRINT	Makefile	/^PRINT = runoff.list runoff.spec README toc.hdr toc.ftr $(FILES)$/;"	m
PTE_ADDR	mmu.h	/^#define PTE_ADDR(/;"	d
PTE_FLAGS	mmu.h	/^#define PTE_FLAGS(/;"	d
PTE_P	mmu.h	/^#define PTE_P /;"	d
PTE_PS	mmu.h	/^#define PTE_PS /;"	d
PTE_U	mmu.h	/^#define PTE_U /;"	d
PTE_W	mmu.h	/^#define PTE_W /;"	d
PTX	mmu.h	/^#define PTX(/;"	d
PTXSHIFT	mmu.h	/^#define PTXSHIFT /;"	d
QEMU	Makefile	/^QEMU = $(shell if which qemu > \/dev\/null; \\$/;"	m
QEMUGDB	Makefile	/^QEMUGDB = $(shell if $(QEMU) -help | grep -q '^-gdb'; \\$/;"	m
QEMUOPTS	Makefile	/^QEMUOPTS = -drive file=fs.img,index=1,media=disk,format=raw -drive file=xv6.img,index=0,media=di/;"	m
REDIR	user/sh.c	/^#define REDIR /;"	d	file:
REG_ID	ioapic.c	/^#define REG_ID /;"	d	file:
REG_TABLE	ioapic.c	/^#define REG_TABLE /;"	d	file:
REG_VER	ioapic.c	/^#define REG_VER /;"	d	file:
ROOTDEV	param.h	/^#define ROOTDEV /;"	d
ROOTINO	fs.h	/^#define ROOTINO /;"	d
RTC_ADDR	user/usertests.c	/^  #define RTC_ADDR /;"	d	file:
RTC_DATA	user/usertests.c	/^  #define RTC_DATA /;"	d	file:
RUNNABLE	proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
RUNNING	proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
SCROLLLOCK	kbd.h	/^#define SCROLLLOCK /;"	d
SECS	lapic.c	/^#define SECS /;"	d	file:
SECTOR_SIZE	ide.c	/^#define SECTOR_SIZE /;"	d	file:
SECTSIZE	bootmain.c	/^#define SECTSIZE /;"	d	file:
SEG	mmu.h	/^#define SEG(/;"	d
SEG16	mmu.h	/^#define SEG16(/;"	d
SEG_ASM	asm.h	/^#define SEG_ASM(/;"	d
SEG_KCODE	mmu.h	/^#define SEG_KCODE /;"	d
SEG_KDATA	mmu.h	/^#define SEG_KDATA /;"	d
SEG_NULLASM	asm.h	/^#define SEG_NULLASM /;"	d
SEG_TSS	mmu.h	/^#define SEG_TSS /;"	d
SEG_UCODE	mmu.h	/^#define SEG_UCODE /;"	d
SEG_UDATA	mmu.h	/^#define SEG_UDATA /;"	d
SETGATE	mmu.h	/^#define SETGATE(/;"	d
SHIFT	kbd.h	/^#define SHIFT /;"	d
SLEEPING	proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
STARTUP	lapic.c	/^  #define STARTUP /;"	d	file:
STA_R	asm.h	/^#define STA_R /;"	d
STA_R	mmu.h	/^#define STA_R /;"	d
STA_W	asm.h	/^#define STA_W /;"	d
STA_W	mmu.h	/^#define STA_W /;"	d
STA_X	asm.h	/^#define STA_X /;"	d
STA_X	mmu.h	/^#define STA_X /;"	d
STRIP	Makefile	/^STRIP = $(TOOLPREFIX)strip$/;"	m
STRIP	user/Makefile	/^STRIP = $(TOOLPREFIX)strip$/;"	m
STS_IG32	mmu.h	/^#define STS_IG32 /;"	d
STS_T32A	mmu.h	/^#define STS_T32A /;"	d
STS_TG32	mmu.h	/^#define STS_TG32 /;"	d
SVR	lapic.c	/^#define SVR /;"	d	file:
SYSCALL	user/usys.S	/^#define SYSCALL(/;"	d	file:
SYS_chdir	syscall.h	/^#define SYS_chdir /;"	d
SYS_close	syscall.h	/^#define SYS_close /;"	d
SYS_dup	syscall.h	/^#define SYS_dup /;"	d
SYS_exec	syscall.h	/^#define SYS_exec /;"	d
SYS_exit	syscall.h	/^#define SYS_exit /;"	d
SYS_fork	syscall.h	/^#define SYS_fork /;"	d
SYS_fstat	syscall.h	/^#define SYS_fstat /;"	d
SYS_getpid	syscall.h	/^#define SYS_getpid /;"	d
SYS_kill	syscall.h	/^#define SYS_kill /;"	d
SYS_link	syscall.h	/^#define SYS_link /;"	d
SYS_mkdir	syscall.h	/^#define SYS_mkdir /;"	d
SYS_mknod	syscall.h	/^#define SYS_mknod /;"	d
SYS_open	syscall.h	/^#define SYS_open /;"	d
SYS_pipe	syscall.h	/^#define SYS_pipe /;"	d
SYS_read	syscall.h	/^#define SYS_read /;"	d
SYS_sbrk	syscall.h	/^#define SYS_sbrk /;"	d
SYS_sleep	syscall.h	/^#define SYS_sleep /;"	d
SYS_unlink	syscall.h	/^#define SYS_unlink /;"	d
SYS_uptime	syscall.h	/^#define SYS_uptime /;"	d
SYS_wait	syscall.h	/^#define SYS_wait /;"	d
SYS_write	syscall.h	/^#define SYS_write /;"	d
TCCR	lapic.c	/^#define TCCR /;"	d	file:
TDCR	lapic.c	/^#define TDCR /;"	d	file:
TICR	lapic.c	/^#define TICR /;"	d	file:
TIMER	lapic.c	/^#define TIMER /;"	d	file:
TOOLPREFIX	Makefile	/^TOOLPREFIX := $(shell if i386-jos-elf-objdump -i 2>&1 | grep '^elf32-i386$$' >\/dev\/null 2>&1; /;"	m
TOOLPREFIX	user/Makefile	/^TOOLPREFIX := $(shell if i386-jos-elf-objdump -i 2>&1 | grep '^elf32-i386$$' >\/dev\/null 2>&1; /;"	m
TPR	lapic.c	/^#define TPR /;"	d	file:
T_ALIGN	traps.h	/^#define T_ALIGN /;"	d
T_BOUND	traps.h	/^#define T_BOUND /;"	d
T_BRKPT	traps.h	/^#define T_BRKPT /;"	d
T_DBLFLT	traps.h	/^#define T_DBLFLT /;"	d
T_DEBUG	traps.h	/^#define T_DEBUG /;"	d
T_DEFAULT	traps.h	/^#define T_DEFAULT /;"	d
T_DEV	stat.h	/^#define T_DEV /;"	d
T_DEVICE	traps.h	/^#define T_DEVICE /;"	d
T_DIR	stat.h	/^#define T_DIR /;"	d
T_DIVIDE	traps.h	/^#define T_DIVIDE /;"	d
T_FILE	stat.h	/^#define T_FILE /;"	d
T_FPERR	traps.h	/^#define T_FPERR /;"	d
T_GPFLT	traps.h	/^#define T_GPFLT /;"	d
T_ILLOP	traps.h	/^#define T_ILLOP /;"	d
T_IRQ0	traps.h	/^#define T_IRQ0 /;"	d
T_MCHK	traps.h	/^#define T_MCHK /;"	d
T_NMI	traps.h	/^#define T_NMI /;"	d
T_OFLOW	traps.h	/^#define T_OFLOW /;"	d
T_PGFLT	traps.h	/^#define T_PGFLT /;"	d
T_SEGNP	traps.h	/^#define T_SEGNP /;"	d
T_SIMDERR	traps.h	/^#define T_SIMDERR /;"	d
T_STACK	traps.h	/^#define T_STACK /;"	d
T_SYSCALL	traps.h	/^#define T_SYSCALL /;"	d
T_TSS	traps.h	/^#define T_TSS /;"	d
ULIB	user/Makefile	/^ULIB = ulib.o usys.o printf.o umalloc.o$/;"	m
UNUSED	proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
UPROGS	Makefile	/^UPROGS=$(patsubst %,user\/%,$(shell $(MAKE) -s -C user print-uprogs))$/;"	m
UPROGS	user/Makefile	/^UPROGS=\\$/;"	m
V2P	memlayout.h	/^#define V2P(/;"	d
V2P_WO	memlayout.h	/^#define V2P_WO(/;"	d
VER	lapic.c	/^#define VER /;"	d	file:
X1	lapic.c	/^  #define X1 /;"	d	file:
XV6_TYPES_H	types.h	/^#define XV6_TYPES_H$/;"	d
YEAR	lapic.c	/^#define YEAR /;"	d	file:
ZOMBIE	proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
__anon0f27d3d00108	bio.c	/^struct {$/;"	s	file:
__anon156e3e2a0108	proc.c	/^struct {$/;"	s	file:
__anon2469bfd60103	user/usertests.c	/^  enum { N = 20 };$/;"	g	function:createdelete	file:
__anon2469bfd60208	user/usertests.c	/^  struct {$/;"	s	function:concreate	file:
__anon3d351ad10108	user/umalloc.c	/^  struct {$/;"	s	union:header	file:
__anon69d64d0c0108	kalloc.c	/^struct {$/;"	s	file:
__anon7c96edaf0108	fs.c	/^struct {$/;"	s	file:
__anon96a473a90108	console.c	/^static struct {$/;"	s	file:
__anon96a473a90208	console.c	/^struct {$/;"	s	file:
__anonfd762eb60108	file.c	/^struct {$/;"	s	file:
__anonfd762ebb0103	file.h	/^  enum { FD_NONE, FD_PIPE, FD_INODE } type;$/;"	g	struct:file
_start	entry.S	/^_start = V2P_WO(entry)$/;"	d
a	initcode.asm	/^   a:	6a 00                	push   $0x0$/;"	l
a	kernel.asm	/^      a = PGADDR(PDX(a) + 1, 0, 0) - PGSIZE;$/;"	d
a	kernel.asm	/^  a = (char*)PGROUNDDOWN((uint)va);$/;"	d
a	kernel.asm	/^  a = PGROUNDUP(newsz);$/;"	d
a	kernel.asm	/^  a = PGROUNDUP(oldsz);$/;"	d
a	user/echo.asm	/^   a:	55                   	push   %ebp$/;"	l
a	user/forktest.asm	/^   a:	53                   	push   %ebx$/;"	l
a	user/init.asm	/^   a:	55                   	push   %ebp$/;"	l
a	user/kill.asm	/^   a:	55                   	push   %ebp$/;"	l
a	user/ln.asm	/^   a:	55                   	push   %ebp$/;"	l
a	user/mkdir.asm	/^   a:	55                   	push   %ebp$/;"	l
a	user/rm.asm	/^   a:	55                   	push   %ebp$/;"	l
a	user/stressfs.asm	/^   a:	55                   	push   %ebp$/;"	l
a	user/usertests.asm	/^    a = b + 1;$/;"	d
a	user/usertests.asm	/^  a = sbrk(0);$/;"	d
a	user/zombie.asm	/^   a:	55                   	push   %ebp$/;"	l
a0	user/echo.asm	/^  a0:	c3                   	ret$/;"	l
a0	user/forktest.asm	/^  a0:	e8 ca 01 00 00       	call   26f <wait>$/;"	l
a0	user/grep.asm	/^  a0:	eb 19                	jmp    bb <matchhere+0x76>$/;"	l
a0	user/init.asm	/^  a0:	6a 01                	push   $0x1$/;"	l
a0	user/kill.asm	/^  a0:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
a0	user/mkdir.asm	/^  a0:	c3                   	ret$/;"	l
a0	user/rm.asm	/^  a0:	c3                   	ret$/;"	l
a0	user/sh.asm	/^  a0:	e8 7c 0a 00 00       	call   b21 <exit>$/;"	l
a0	user/stressfs.asm	/^  a0:	56                   	push   %esi$/;"	l
a00	user/sh.asm	/^ a00:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
a02	user/usertests.asm	/^     a02:	e8 85 2c 00 00       	call   368c <exit>$/;"	l
a03	user/sh.asm	/^ a03:	fc                   	cld$/;"	l
a04	user/sh.asm	/^ a04:	f3 aa                	rep stos %al,%es:(%edi)$/;"	l
a06	user/sh.asm	/^ a06:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
a07	user/usertests.asm	/^     a07:	83 ec 08             	sub    $0x8,%esp$/;"	l
a09	user/sh.asm	/^ a09:	8b 7d fc             	mov    -0x4(%ebp),%edi$/;"	l
a0a	user/usertests.asm	/^     a0a:	68 e9 3d 00 00       	push   $0x3de9$/;"	l
a0c	user/sh.asm	/^ a0c:	c9                   	leave$/;"	l
a0d	user/sh.asm	/^ a0d:	c3                   	ret$/;"	l
a0e	user/sh.asm	/^ a0e:	55                   	push   %ebp$/;"	l
a0f	user/sh.asm	/^ a0f:	89 e5                	mov    %esp,%ebp$/;"	l
a0f	user/usertests.asm	/^     a0f:	6a 01                	push   $0x1$/;"	l
a1	user/cat.asm	/^  a1:	e8 5a 00 00 00       	call   100 <exit>$/;"	l
a1	user/echo.asm	/^  a1:	b8 11 00 00 00       	mov    $0x11,%eax$/;"	l
a1	user/ln.asm	/^  a1:	cd 40                	int    $0x40$/;"	l
a1	user/mkdir.asm	/^  a1:	b8 15 00 00 00       	mov    $0x15,%eax$/;"	l
a1	user/rm.asm	/^  a1:	b8 15 00 00 00       	mov    $0x15,%eax$/;"	l
a1	user/stressfs.asm	/^  a1:	e8 0e 02 00 00       	call   2b4 <write>$/;"	l
a11	user/sh.asm	/^ a11:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
a11	user/usertests.asm	/^     a11:	e8 a9 2d 00 00       	call   37bf <printf>$/;"	l
a14	user/sh.asm	/^ a14:	8a 4d 0c             	mov    0xc(%ebp),%cl$/;"	l
a16	user/usertests.asm	/^     a16:	e8 71 2c 00 00       	call   368c <exit>$/;"	l
a17	user/sh.asm	/^ a17:	eb 01                	jmp    a1a <strchr+0xc>$/;"	l
a19	user/sh.asm	/^ a19:	40                   	inc    %eax$/;"	l
a1a	user/sh.asm	/^ a1a:	8a 10                	mov    (%eax),%dl$/;"	l
a1b	user/usertests.asm	/^     a1b:	55                   	push   %ebp$/;"	l
a1c	user/sh.asm	/^ a1c:	84 d2                	test   %dl,%dl$/;"	l
a1c	user/usertests.asm	/^     a1c:	89 e5                	mov    %esp,%ebp$/;"	l
a1e	user/sh.asm	/^ a1e:	74 06                	je     a26 <strchr+0x18>$/;"	l
a1e	user/usertests.asm	/^     a1e:	57                   	push   %edi$/;"	l
a1f	user/usertests.asm	/^     a1f:	56                   	push   %esi$/;"	l
a2	user/grep.asm	/^  a2:	83 ec 08             	sub    $0x8,%esp$/;"	l
a2	user/init.asm	/^  a2:	e8 71 01 00 00       	call   218 <printf>$/;"	l
a2	user/ls.asm	/^  a2:	83 c4 10             	add    $0x10,%esp$/;"	l
a2	user/wc.asm	/^  a2:	6a 01                	push   $0x1$/;"	l
a20	user/sh.asm	/^ a20:	38 ca                	cmp    %cl,%dl$/;"	l
a20	user/usertests.asm	/^     a20:	53                   	push   %ebx$/;"	l
a21	user/usertests.asm	/^     a21:	83 ec 24             	sub    $0x24,%esp$/;"	l
a22	user/sh.asm	/^ a22:	75 f5                	jne    a19 <strchr+0xb>$/;"	l
a24	user/sh.asm	/^ a24:	eb 05                	jmp    a2b <strchr+0x1d>$/;"	l
a24	user/usertests.asm	/^     a24:	68 f8 3d 00 00       	push   $0x3df8$/;"	l
a26	user/sh.asm	/^ a26:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
a29	user/usertests.asm	/^     a29:	6a 01                	push   $0x1$/;"	l
a2b	user/sh.asm	/^ a2b:	5d                   	pop    %ebp$/;"	l
a2b	user/usertests.asm	/^     a2b:	e8 8f 2d 00 00       	call   37bf <printf>$/;"	l
a2c	user/sh.asm	/^ a2c:	c3                   	ret$/;"	l
a2d	user/sh.asm	/^ a2d:	55                   	push   %ebp$/;"	l
a2e	user/sh.asm	/^ a2e:	89 e5                	mov    %esp,%ebp$/;"	l
a3	user/ln.asm	/^  a3:	c3                   	ret$/;"	l
a3	user/usertests.asm	/^      a3:	e8 17 37 00 00       	call   37bf <printf>$/;"	l
a3	user/zombie.asm	/^  a3:	cd 40                	int    $0x40$/;"	l
a30	user/sh.asm	/^ a30:	57                   	push   %edi$/;"	l
a30	user/usertests.asm	/^     a30:	e8 4f 2c 00 00       	call   3684 <fork>$/;"	l
a31	user/sh.asm	/^ a31:	56                   	push   %esi$/;"	l
a32	user/sh.asm	/^ a32:	53                   	push   %ebx$/;"	l
a33	user/sh.asm	/^ a33:	83 ec 1c             	sub    $0x1c,%esp$/;"	l
a35	user/usertests.asm	/^     a35:	83 c4 10             	add    $0x10,%esp$/;"	l
a36	user/sh.asm	/^ a36:	8b 7d 08             	mov    0x8(%ebp),%edi$/;"	l
a38	user/usertests.asm	/^     a38:	85 c0                	test   %eax,%eax$/;"	l
a39	user/sh.asm	/^ a39:	bb 00 00 00 00       	mov    $0x0,%ebx$/;"	l
a3a	user/usertests.asm	/^     a3a:	75 02                	jne    a3e <preempt+0x23>$/;"	l
a3c	user/usertests.asm	/^     a3c:	eb fe                	jmp    a3c <preempt+0x21>$/;"	l
a3e	user/sh.asm	/^ a3e:	89 de                	mov    %ebx,%esi$/;"	l
a3e	user/usertests.asm	/^     a3e:	89 c3                	mov    %eax,%ebx$/;"	l
a4	user/ln.asm	/^  a4:	b8 0f 00 00 00       	mov    $0xf,%eax$/;"	l
a4	user/wc.asm	/^  a4:	e8 67 03 00 00       	call   410 <printf>$/;"	l
a40	user/sh.asm	/^ a40:	43                   	inc    %ebx$/;"	l
a40	user/usertests.asm	/^     a40:	e8 3f 2c 00 00       	call   3684 <fork>$/;"	l
a41	user/sh.asm	/^ a41:	3b 5d 0c             	cmp    0xc(%ebp),%ebx$/;"	l
a44	user/sh.asm	/^ a44:	7d 2b                	jge    a71 <gets+0x44>$/;"	l
a45	user/usertests.asm	/^     a45:	89 c6                	mov    %eax,%esi$/;"	l
a46	user/sh.asm	/^ a46:	83 ec 04             	sub    $0x4,%esp$/;"	l
a47	user/usertests.asm	/^     a47:	85 c0                	test   %eax,%eax$/;"	l
a49	user/sh.asm	/^ a49:	6a 01                	push   $0x1$/;"	l
a49	user/usertests.asm	/^     a49:	75 02                	jne    a4d <preempt+0x32>$/;"	l
a4b	user/sh.asm	/^ a4b:	8d 45 e7             	lea    -0x19(%ebp),%eax$/;"	l
a4b	user/usertests.asm	/^     a4b:	eb fe                	jmp    a4b <preempt+0x30>$/;"	l
a4d	user/usertests.asm	/^     a4d:	83 ec 0c             	sub    $0xc,%esp$/;"	l
a4e	user/sh.asm	/^ a4e:	50                   	push   %eax$/;"	l
a4f	user/sh.asm	/^ a4f:	6a 00                	push   $0x0$/;"	l
a5	user/forktest.asm	/^  a5:	83 f8 ff             	cmp    $0xffffffff,%eax$/;"	l
a5	user/grep.asm	/^  a5:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
a5	user/kill.asm	/^  a5:	eb 01                	jmp    a8 <strlen+0xe>$/;"	l
a5	user/ls.asm	/^  a5:	85 c0                	test   %eax,%eax$/;"	l
a5	user/sh.asm	/^  a5:	83 ec 0c             	sub    $0xc,%esp$/;"	l
a5	user/zombie.asm	/^  a5:	c3                   	ret$/;"	l
a50	user/usertests.asm	/^     a50:	8d 45 e0             	lea    -0x20(%ebp),%eax$/;"	l
a51	user/sh.asm	/^ a51:	e8 e3 00 00 00       	call   b39 <read>$/;"	l
a53	user/usertests.asm	/^     a53:	50                   	push   %eax$/;"	l
a54	user/usertests.asm	/^     a54:	e8 43 2c 00 00       	call   369c <pipe>$/;"	l
a56	user/sh.asm	/^ a56:	83 c4 10             	add    $0x10,%esp$/;"	l
a59	user/sh.asm	/^ a59:	85 c0                	test   %eax,%eax$/;"	l
a59	user/usertests.asm	/^     a59:	e8 26 2c 00 00       	call   3684 <fork>$/;"	l
a5b	user/sh.asm	/^ a5b:	7e 14                	jle    a71 <gets+0x44>$/;"	l
a5d	user/sh.asm	/^ a5d:	8a 45 e7             	mov    -0x19(%ebp),%al$/;"	l
a5e	user/usertests.asm	/^     a5e:	89 c7                	mov    %eax,%edi$/;"	l
a6	user/cat.asm	/^  a6:	83 ec 0c             	sub    $0xc,%esp$/;"	l
a6	user/echo.asm	/^  a6:	cd 40                	int    $0x40$/;"	l
a6	user/mkdir.asm	/^  a6:	cd 40                	int    $0x40$/;"	l
a6	user/rm.asm	/^  a6:	cd 40                	int    $0x40$/;"	l
a6	user/stressfs.asm	/^  a6:	43                   	inc    %ebx$/;"	l
a6	user/zombie.asm	/^  a6:	b8 09 00 00 00       	mov    $0x9,%eax$/;"	l
a60	user/sh.asm	/^ a60:	88 04 37             	mov    %al,(%edi,%esi,1)$/;"	l
a60	user/usertests.asm	/^     a60:	83 c4 10             	add    $0x10,%esp$/;"	l
a63	user/sh.asm	/^ a63:	3c 0a                	cmp    $0xa,%al$/;"	l
a63	user/usertests.asm	/^     a63:	85 c0                	test   %eax,%eax$/;"	l
a65	user/sh.asm	/^ a65:	74 08                	je     a6f <gets+0x42>$/;"	l
a65	user/usertests.asm	/^     a65:	75 49                	jne    ab0 <preempt+0x95>$/;"	l
a67	user/sh.asm	/^ a67:	3c 0d                	cmp    $0xd,%al$/;"	l
a67	user/usertests.asm	/^     a67:	83 ec 0c             	sub    $0xc,%esp$/;"	l
a69	user/sh.asm	/^ a69:	75 d3                	jne    a3e <gets+0x11>$/;"	l
a6a	user/usertests.asm	/^     a6a:	ff 75 e0             	push   -0x20(%ebp)$/;"	l
a6b	user/sh.asm	/^ a6b:	89 de                	mov    %ebx,%esi$/;"	l
a6d	user/sh.asm	/^ a6d:	eb 02                	jmp    a71 <gets+0x44>$/;"	l
a6d	user/usertests.asm	/^     a6d:	e8 42 2c 00 00       	call   36b4 <close>$/;"	l
a6f	user/sh.asm	/^ a6f:	89 de                	mov    %ebx,%esi$/;"	l
a7	user/init.asm	/^  a7:	e8 31 00 00 00       	call   dd <fork>$/;"	l
a7	user/kill.asm	/^  a7:	40                   	inc    %eax$/;"	l
a7	user/ls.asm	/^  a7:	0f 88 8b 00 00 00    	js     138 <ls+0xad>$/;"	l
a7	user/stressfs.asm	/^  a7:	83 c4 10             	add    $0x10,%esp$/;"	l
a71	user/sh.asm	/^ a71:	c6 04 37 00          	movb   $0x0,(%edi,%esi,1)$/;"	l
a72	user/usertests.asm	/^     a72:	83 c4 0c             	add    $0xc,%esp$/;"	l
a75	user/sh.asm	/^ a75:	89 f8                	mov    %edi,%eax$/;"	l
a75	user/usertests.asm	/^     a75:	6a 01                	push   $0x1$/;"	l
a77	user/sh.asm	/^ a77:	8d 65 f4             	lea    -0xc(%ebp),%esp$/;"	l
a77	user/usertests.asm	/^     a77:	68 bd 43 00 00       	push   $0x43bd$/;"	l
a7a	user/sh.asm	/^ a7a:	5b                   	pop    %ebx$/;"	l
a7b	user/sh.asm	/^ a7b:	5e                   	pop    %esi$/;"	l
a7c	user/sh.asm	/^ a7c:	5f                   	pop    %edi$/;"	l
a7c	user/usertests.asm	/^     a7c:	ff 75 e4             	push   -0x1c(%ebp)$/;"	l
a7d	user/sh.asm	/^ a7d:	5d                   	pop    %ebp$/;"	l
a7e	user/sh.asm	/^ a7e:	c3                   	ret$/;"	l
a7f	user/sh.asm	/^ a7f:	55                   	push   %ebp$/;"	l
a7f	user/usertests.asm	/^     a7f:	e8 28 2c 00 00       	call   36ac <write>$/;"	l
a8	user/echo.asm	/^  a8:	c3                   	ret$/;"	l
a8	user/forktest.asm	/^  a8:	75 17                	jne    c1 <forktest+0x9c>$/;"	l
a8	user/grep.asm	/^  a8:	40                   	inc    %eax$/;"	l
a8	user/kill.asm	/^  a8:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)$/;"	l
a8	user/mkdir.asm	/^  a8:	c3                   	ret$/;"	l
a8	user/rm.asm	/^  a8:	c3                   	ret$/;"	l
a8	user/sh.asm	/^  a8:	68 04 0f 00 00       	push   $0xf04$/;"	l
a8	user/usertests.asm	/^      a8:	e8 df 35 00 00       	call   368c <exit>$/;"	l
a80	user/sh.asm	/^ a80:	89 e5                	mov    %esp,%ebp$/;"	l
a82	user/sh.asm	/^ a82:	56                   	push   %esi$/;"	l
a83	user/sh.asm	/^ a83:	53                   	push   %ebx$/;"	l
a84	user/sh.asm	/^ a84:	83 ec 08             	sub    $0x8,%esp$/;"	l
a84	user/usertests.asm	/^     a84:	83 c4 10             	add    $0x10,%esp$/;"	l
a87	user/sh.asm	/^ a87:	6a 00                	push   $0x0$/;"	l
a87	user/usertests.asm	/^     a87:	83 f8 01             	cmp    $0x1,%eax$/;"	l
a89	user/sh.asm	/^ a89:	ff 75 08             	push   0x8(%ebp)$/;"	l
a8a	user/usertests.asm	/^     a8a:	75 10                	jne    a9c <preempt+0x81>$/;"	l
a8c	user/sh.asm	/^ a8c:	e8 d0 00 00 00       	call   b61 <open>$/;"	l
a8c	user/usertests.asm	/^     a8c:	83 ec 0c             	sub    $0xc,%esp$/;"	l
a8f	user/usertests.asm	/^     a8f:	ff 75 e4             	push   -0x1c(%ebp)$/;"	l
a9	user/cat.asm	/^  a9:	50                   	push   %eax$/;"	l
a9	user/echo.asm	/^  a9:	b8 12 00 00 00       	mov    $0x12,%eax$/;"	l
a9	user/grep.asm	/^  a9:	50                   	push   %eax$/;"	l
a9	user/ln.asm	/^  a9:	cd 40                	int    $0x40$/;"	l
a9	user/mkdir.asm	/^  a9:	b8 06 00 00 00       	mov    $0x6,%eax$/;"	l
a9	user/rm.asm	/^  a9:	b8 06 00 00 00       	mov    $0x6,%eax$/;"	l
a9	user/wc.asm	/^  a9:	83 c4 20             	add    $0x20,%esp$/;"	l
a91	user/sh.asm	/^ a91:	83 c4 10             	add    $0x10,%esp$/;"	l
a92	user/usertests.asm	/^     a92:	e8 1d 2c 00 00       	call   36b4 <close>$/;"	l
a94	user/sh.asm	/^ a94:	85 c0                	test   %eax,%eax$/;"	l
a96	user/sh.asm	/^ a96:	78 24                	js     abc <stat+0x3d>$/;"	l
a97	user/usertests.asm	/^     a97:	83 c4 10             	add    $0x10,%esp$/;"	l
a98	user/sh.asm	/^ a98:	89 c3                	mov    %eax,%ebx$/;"	l
a9a	user/sh.asm	/^ a9a:	83 ec 08             	sub    $0x8,%esp$/;"	l
a9a	user/usertests.asm	/^     a9a:	eb fe                	jmp    a9a <preempt+0x7f>$/;"	l
a9c	user/usertests.asm	/^     a9c:	83 ec 08             	sub    $0x8,%esp$/;"	l
a9d	user/sh.asm	/^ a9d:	ff 75 0c             	push   0xc(%ebp)$/;"	l
a9f	user/usertests.asm	/^     a9f:	68 02 3e 00 00       	push   $0x3e02$/;"	l
aa	user/cat.asm	/^  aa:	e8 51 ff ff ff       	call   0 <cat>$/;"	l
aa	user/forktest.asm	/^  aa:	83 ec 08             	sub    $0x8,%esp$/;"	l
aa	user/grep.asm	/^  aa:	42                   	inc    %edx$/;"	l
aa	user/stressfs.asm	/^  aa:	83 fb 13             	cmp    $0x13,%ebx$/;"	l
aa0	user/sh.asm	/^ aa0:	50                   	push   %eax$/;"	l
aa1	user/sh.asm	/^ aa1:	e8 d3 00 00 00       	call   b79 <fstat>$/;"	l
aa4	user/usertests.asm	/^     aa4:	6a 01                	push   $0x1$/;"	l
aa6	user/sh.asm	/^ aa6:	89 c6                	mov    %eax,%esi$/;"	l
aa6	user/usertests.asm	/^     aa6:	e8 14 2d 00 00       	call   37bf <printf>$/;"	l
aa8	user/sh.asm	/^ aa8:	89 1c 24             	mov    %ebx,(%esp)$/;"	l
aab	user/sh.asm	/^ aab:	e8 99 00 00 00       	call   b49 <close>$/;"	l
aab	user/usertests.asm	/^     aab:	83 c4 10             	add    $0x10,%esp$/;"	l
aae	user/usertests.asm	/^     aae:	eb dc                	jmp    a8c <preempt+0x71>$/;"	l
ab	user/grep.asm	/^  ab:	52                   	push   %edx$/;"	l
ab	user/ln.asm	/^  ab:	c3                   	ret$/;"	l
ab	user/zombie.asm	/^  ab:	cd 40                	int    $0x40$/;"	l
ab0	user/sh.asm	/^ ab0:	83 c4 10             	add    $0x10,%esp$/;"	l
ab0	user/usertests.asm	/^     ab0:	83 ec 0c             	sub    $0xc,%esp$/;"	l
ab3	user/sh.asm	/^ ab3:	89 f0                	mov    %esi,%eax$/;"	l
ab3	user/usertests.asm	/^     ab3:	ff 75 e4             	push   -0x1c(%ebp)$/;"	l
ab5	user/sh.asm	/^ ab5:	8d 65 f8             	lea    -0x8(%ebp),%esp$/;"	l
ab6	user/usertests.asm	/^     ab6:	e8 f9 2b 00 00       	call   36b4 <close>$/;"	l
ab8	user/sh.asm	/^ ab8:	5b                   	pop    %ebx$/;"	l
ab9	user/sh.asm	/^ ab9:	5e                   	pop    %esi$/;"	l
aba	user/sh.asm	/^ aba:	5d                   	pop    %ebp$/;"	l
abb	user/sh.asm	/^ abb:	c3                   	ret$/;"	l
abb	user/usertests.asm	/^     abb:	83 c4 0c             	add    $0xc,%esp$/;"	l
abc	user/sh.asm	/^ abc:	be ff ff ff ff       	mov    $0xffffffff,%esi$/;"	l
abe	user/usertests.asm	/^     abe:	68 00 20 00 00       	push   $0x2000$/;"	l
ac	user/grep.asm	/^  ac:	e8 94 ff ff ff       	call   45 <matchhere>$/;"	l
ac	user/init.asm	/^  ac:	89 c3                	mov    %eax,%ebx$/;"	l
ac	user/kill.asm	/^  ac:	75 f9                	jne    a7 <strlen+0xd>$/;"	l
ac	user/ln.asm	/^  ac:	b8 11 00 00 00       	mov    $0x11,%eax$/;"	l
ac	user/wc.asm	/^  ac:	8d 65 f4             	lea    -0xc(%ebp),%esp$/;"	l
ac1	user/sh.asm	/^ ac1:	eb f0                	jmp    ab3 <stat+0x34>$/;"	l
ac3	user/sh.asm	/^ ac3:	55                   	push   %ebp$/;"	l
ac3	user/usertests.asm	/^     ac3:	68 60 82 00 00       	push   $0x8260$/;"	l
ac4	user/sh.asm	/^ ac4:	89 e5                	mov    %esp,%ebp$/;"	l
ac6	user/sh.asm	/^ ac6:	53                   	push   %ebx$/;"	l
ac7	user/sh.asm	/^ ac7:	8b 4d 08             	mov    0x8(%ebp),%ecx$/;"	l
ac8	user/usertests.asm	/^     ac8:	ff 75 e0             	push   -0x20(%ebp)$/;"	l
aca	user/sh.asm	/^ aca:	ba 00 00 00 00       	mov    $0x0,%edx$/;"	l
acb	user/usertests.asm	/^     acb:	e8 d4 2b 00 00       	call   36a4 <read>$/;"	l
acf	user/sh.asm	/^ acf:	eb 0e                	jmp    adf <atoi+0x1c>$/;"	l
acquire	spinlock.c	/^acquire(struct spinlock *lk)$/;"	f	typeref:typename:void
acquiresleep	sleeplock.c	/^acquiresleep(struct sleeplock *lk)$/;"	f	typeref:typename:void
ad	user/forktest.asm	/^  ad:	68 3a 03 00 00       	push   $0x33a$/;"	l
ad	user/ls.asm	/^  ad:	89 c7                	mov    %eax,%edi$/;"	l
ad	user/sh.asm	/^  ad:	e8 99 ff ff ff       	call   4b <panic>$/;"	l
ad	user/stressfs.asm	/^  ad:	7e e2                	jle    91 <main+0x91>$/;"	l
ad	user/usertests.asm	/^      ad:	83 ec 08             	sub    $0x8,%esp$/;"	l
ad	user/zombie.asm	/^  ad:	c3                   	ret$/;"	l
ad0	user/usertests.asm	/^     ad0:	83 c4 10             	add    $0x10,%esp$/;"	l
ad1	user/sh.asm	/^ ad1:	8d 14 92             	lea    (%edx,%edx,4),%edx$/;"	l
ad3	user/usertests.asm	/^     ad3:	83 f8 01             	cmp    $0x1,%eax$/;"	l
ad4	user/sh.asm	/^ ad4:	8d 1c 12             	lea    (%edx,%edx,1),%ebx$/;"	l
ad6	user/usertests.asm	/^     ad6:	74 1a                	je     af2 <preempt+0xd7>$/;"	l
ad7	user/sh.asm	/^ ad7:	41                   	inc    %ecx$/;"	l
ad8	user/sh.asm	/^ ad8:	0f be c0             	movsbl %al,%eax$/;"	l
ad8	user/usertests.asm	/^     ad8:	83 ec 08             	sub    $0x8,%esp$/;"	l
adb	user/sh.asm	/^ adb:	8d 54 18 d0          	lea    -0x30(%eax,%ebx,1),%edx$/;"	l
adb	user/usertests.asm	/^     adb:	68 16 3e 00 00       	push   $0x3e16$/;"	l
addr	kernel.asm	/^  addr = P2V(a);$/;"	d
addr	kernel.asm	/^  addr = myproc()->sz;$/;"	d
addr	mp.h	/^  uint *addr;                  \/\/ I\/O APIC address$/;"	m	struct:mpioapic	typeref:typename:uint *
addrs	file.h	/^  uint addrs[NDIRECT+1];$/;"	m	struct:inode	typeref:typename:uint[]
addrs	fs.h	/^  uint addrs[NDIRECT+1];   \/\/ Data block addresses$/;"	m	struct:dinode	typeref:typename:uint[]
adf	user/sh.asm	/^ adf:	8a 01                	mov    (%ecx),%al$/;"	l
ae	user/echo.asm	/^  ae:	cd 40                	int    $0x40$/;"	l
ae	user/init.asm	/^  ae:	83 c4 10             	add    $0x10,%esp$/;"	l
ae	user/kill.asm	/^  ae:	5d                   	pop    %ebp$/;"	l
ae	user/mkdir.asm	/^  ae:	cd 40                	int    $0x40$/;"	l
ae	user/rm.asm	/^  ae:	cd 40                	int    $0x40$/;"	l
ae	user/zombie.asm	/^  ae:	b8 0a 00 00 00       	mov    $0xa,%eax$/;"	l
ae0	user/usertests.asm	/^     ae0:	6a 01                	push   $0x1$/;"	l
ae1	user/sh.asm	/^ ae1:	8d 58 d0             	lea    -0x30(%eax),%ebx$/;"	l
ae2	user/usertests.asm	/^     ae2:	e8 d8 2c 00 00       	call   37bf <printf>$/;"	l
ae4	user/sh.asm	/^ ae4:	80 fb 09             	cmp    $0x9,%bl$/;"	l
ae7	user/sh.asm	/^ ae7:	76 e8                	jbe    ad1 <atoi+0xe>$/;"	l
ae7	user/usertests.asm	/^     ae7:	83 c4 10             	add    $0x10,%esp$/;"	l
ae9	user/sh.asm	/^ ae9:	89 d0                	mov    %edx,%eax$/;"	l
aea	user/usertests.asm	/^     aea:	8d 65 f4             	lea    -0xc(%ebp),%esp$/;"	l
aeb	user/sh.asm	/^ aeb:	8b 5d fc             	mov    -0x4(%ebp),%ebx$/;"	l
aed	user/usertests.asm	/^     aed:	5b                   	pop    %ebx$/;"	l
aee	user/sh.asm	/^ aee:	c9                   	leave$/;"	l
aee	user/usertests.asm	/^     aee:	5e                   	pop    %esi$/;"	l
aef	user/sh.asm	/^ aef:	c3                   	ret$/;"	l
aef	user/usertests.asm	/^     aef:	5f                   	pop    %edi$/;"	l
af	user/cat.asm	/^  af:	89 1c 24             	mov    %ebx,(%esp)$/;"	l
af	user/kill.asm	/^  af:	c3                   	ret$/;"	l
af	user/ls.asm	/^  af:	83 ec 08             	sub    $0x8,%esp$/;"	l
af	user/stressfs.asm	/^  af:	83 ec 0c             	sub    $0xc,%esp$/;"	l
af	user/wc.asm	/^  af:	5b                   	pop    %ebx$/;"	l
af0	user/sh.asm	/^ af0:	55                   	push   %ebp$/;"	l
af0	user/usertests.asm	/^     af0:	5d                   	pop    %ebp$/;"	l
af1	user/sh.asm	/^ af1:	89 e5                	mov    %esp,%ebp$/;"	l
af1	user/usertests.asm	/^     af1:	c3                   	ret$/;"	l
af2	user/usertests.asm	/^     af2:	83 ec 0c             	sub    $0xc,%esp$/;"	l
af3	user/sh.asm	/^ af3:	56                   	push   %esi$/;"	l
af4	user/sh.asm	/^ af4:	53                   	push   %ebx$/;"	l
af5	user/sh.asm	/^ af5:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
af5	user/usertests.asm	/^     af5:	ff 75 e0             	push   -0x20(%ebp)$/;"	l
af8	user/sh.asm	/^ af8:	8b 5d 0c             	mov    0xc(%ebp),%ebx$/;"	l
af8	user/usertests.asm	/^     af8:	e8 b7 2b 00 00       	call   36b4 <close>$/;"	l
afb	user/sh.asm	/^ afb:	8b 55 10             	mov    0x10(%ebp),%edx$/;"	l
afd	user/usertests.asm	/^     afd:	83 c4 08             	add    $0x8,%esp$/;"	l
afe	user/sh.asm	/^ afe:	89 c1                	mov    %eax,%ecx$/;"	l
align	elf.h	/^  uint align;$/;"	m	struct:proghdr	typeref:typename:uint
all	user/Makefile	/^all: $(UPROGS)$/;"	t
allocproc	proc.c	/^allocproc(void)$/;"	f	typeref:struct:proc *	file:
allocuvm	vm.c	/^allocuvm(pde_t *pgdir, uint oldsz, uint newsz)$/;"	f	typeref:typename:int
alltraps	kernel.asm	/^alltraps:$/;"	l
alltraps	trapasm.S	/^alltraps:$/;"	l
amt	user/usertests.asm	/^  amt = (BIG) - (uint)a;$/;"	d
ap	user/cat.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	user/echo.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	user/grep.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	user/init.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	user/kill.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	user/ln.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	user/ls.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	user/mkdir.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	user/rm.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	user/sh.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	user/stressfs.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	user/usertests.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	user/wc.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
apicid	kernel.asm	/^  apicid = lapicid();$/;"	d
apicid	mp.h	/^  uchar apicid;                 \/\/ local APIC id$/;"	m	struct:mpproc	typeref:typename:uchar
apicid	proc.h	/^  uchar apicid;                \/\/ Local APIC ID$/;"	m	struct:cpu	typeref:typename:uchar
apicno	mp.h	/^  uchar apicno;                 \/\/ I\/O APIC id$/;"	m	struct:mpioapic	typeref:typename:uchar
argc	user/sh.asm	/^  argc = 0;$/;"	d
argfd	sysfile.c	/^argfd(int n, int *pfd, struct file **pf)$/;"	f	typeref:typename:int	file:
argint	syscall.c	/^argint(int n, int *ip)$/;"	f	typeref:typename:int
argp	kernel.asm	/^  argp = (uint*)(void*)(&fmt + 1);$/;"	d
argptest	user/usertests.c	/^void argptest()$/;"	f	typeref:typename:void
argptr	syscall.c	/^argptr(int n, void **pp, int size)$/;"	f	typeref:typename:int
args	mmu.h	/^  uint args : 5;        \/\/ # args, 0 for interrupt\/trap gates$/;"	m	struct:gatedesc	typeref:typename:uint:5
argstr	syscall.c	/^argstr(int n, char **pp)$/;"	f	typeref:typename:int
argv	initcode.S	/^argv:$/;"	l
argv	user/init.c	/^char *argv[] = { "sh", 0 };$/;"	v	typeref:typename:char * []
argv	user/sh.c	/^  char *argv[MAXARGS];$/;"	m	struct:execcmd	typeref:typename:char * []	file:
atoi	user/ulib.c	/^atoi(const char *s)$/;"	f	typeref:typename:int
avl	mmu.h	/^  uint avl : 1;        \/\/ Unused (available for software use)$/;"	m	struct:segdesc	typeref:typename:uint:1
b	kernel.asm	/^  b = bget(dev, blockno);$/;"	d
b	user/cat.asm	/^   b:	68 00 02 00 00       	push   $0x200$/;"	l
b	user/echo.asm	/^   b:	89 e5                	mov    %esp,%ebp$/;"	l
b	user/forktest.asm	/^   b:	e8 16 01 00 00       	call   126 <strlen>$/;"	l
b	user/init.asm	/^   b:	89 e5                	mov    %esp,%ebp$/;"	l
b	user/kill.asm	/^   b:	89 e5                	mov    %esp,%ebp$/;"	l
b	user/ln.asm	/^   b:	89 e5                	mov    %esp,%ebp$/;"	l
b	user/ls.asm	/^   b:	53                   	push   %ebx$/;"	l
b	user/mkdir.asm	/^   b:	89 e5                	mov    %esp,%ebp$/;"	l
b	user/rm.asm	/^   b:	89 e5                	mov    %esp,%ebp$/;"	l
b	user/sh.asm	/^   b:	83 ec 08             	sub    $0x8,%esp$/;"	l
b	user/stressfs.asm	/^   b:	89 e5                	mov    %esp,%ebp$/;"	l
b	user/usertests.asm	/^       b:	ff 35 0c 5b 00 00    	push   0x5b0c$/;"	l
b	user/usertests.asm	/^    b = sbrk(1);$/;"	d
b	user/zombie.asm	/^   b:	89 e5                	mov    %esp,%ebp$/;"	l
b0	user/echo.asm	/^  b0:	c3                   	ret$/;"	l
b0	user/kill.asm	/^  b0:	55                   	push   %ebp$/;"	l
b0	user/mkdir.asm	/^  b0:	c3                   	ret$/;"	l
b0	user/rm.asm	/^  b0:	c3                   	ret$/;"	l
b0	user/usertests.asm	/^      b0:	68 93 3a 00 00       	push   $0x3a93$/;"	l
b0	user/wc.asm	/^  b0:	5e                   	pop    %esi$/;"	l
b00	user/sh.asm	/^ b00:	eb 0c                	jmp    b0e <memmove+0x1e>$/;"	l
b00	user/usertests.asm	/^     b00:	68 29 3e 00 00       	push   $0x3e29$/;"	l
b02	user/sh.asm	/^ b02:	8a 13                	mov    (%ebx),%dl$/;"	l
b04	user/sh.asm	/^ b04:	88 11                	mov    %dl,(%ecx)$/;"	l
b05	user/usertests.asm	/^     b05:	6a 01                	push   $0x1$/;"	l
b06	user/sh.asm	/^ b06:	8d 5b 01             	lea    0x1(%ebx),%ebx$/;"	l
b07	user/usertests.asm	/^     b07:	e8 b3 2c 00 00       	call   37bf <printf>$/;"	l
b09	user/sh.asm	/^ b09:	8d 49 01             	lea    0x1(%ecx),%ecx$/;"	l
b0c	user/sh.asm	/^ b0c:	89 f2                	mov    %esi,%edx$/;"	l
b0c	user/usertests.asm	/^     b0c:	89 1c 24             	mov    %ebx,(%esp)$/;"	l
b0e	user/sh.asm	/^ b0e:	8d 72 ff             	lea    -0x1(%edx),%esi$/;"	l
b0f	user/usertests.asm	/^     b0f:	e8 a8 2b 00 00       	call   36bc <kill>$/;"	l
b1	user/echo.asm	/^  b1:	b8 08 00 00 00       	mov    $0x8,%eax$/;"	l
b1	user/grep.asm	/^  b1:	83 c4 10             	add    $0x10,%esp$/;"	l
b1	user/init.asm	/^  b1:	85 c0                	test   %eax,%eax$/;"	l
b1	user/kill.asm	/^  b1:	89 e5                	mov    %esp,%ebp$/;"	l
b1	user/ln.asm	/^  b1:	cd 40                	int    $0x40$/;"	l
b1	user/mkdir.asm	/^  b1:	b8 07 00 00 00       	mov    $0x7,%eax$/;"	l
b1	user/rm.asm	/^  b1:	b8 07 00 00 00       	mov    $0x7,%eax$/;"	l
b1	user/wc.asm	/^  b1:	5f                   	pop    %edi$/;"	l
b11	user/sh.asm	/^ b11:	85 d2                	test   %edx,%edx$/;"	l
b13	user/sh.asm	/^ b13:	7f ed                	jg     b02 <memmove+0x12>$/;"	l
b14	user/usertests.asm	/^     b14:	89 34 24             	mov    %esi,(%esp)$/;"	l
b15	user/sh.asm	/^ b15:	5b                   	pop    %ebx$/;"	l
b16	user/sh.asm	/^ b16:	5e                   	pop    %esi$/;"	l
b17	user/sh.asm	/^ b17:	5d                   	pop    %ebp$/;"	l
b17	user/usertests.asm	/^     b17:	e8 a0 2b 00 00       	call   36bc <kill>$/;"	l
b18	user/sh.asm	/^ b18:	c3                   	ret$/;"	l
b19	user/sh.asm	/^ b19:	b8 01 00 00 00       	mov    $0x1,%eax$/;"	l
b1c	user/usertests.asm	/^     b1c:	89 3c 24             	mov    %edi,(%esp)$/;"	l
b1e	user/sh.asm	/^ b1e:	cd 40                	int    $0x40$/;"	l
b1f	user/usertests.asm	/^     b1f:	e8 98 2b 00 00       	call   36bc <kill>$/;"	l
b2	user/cat.asm	/^  b2:	e8 71 00 00 00       	call   128 <close>$/;"	l
b2	user/forktest.asm	/^  b2:	6a 01                	push   $0x1$/;"	l
b2	user/ls.asm	/^  b2:	8d 85 c4 fd ff ff    	lea    -0x23c(%ebp),%eax$/;"	l
b2	user/sh.asm	/^  b2:	8b 43 04             	mov    0x4(%ebx),%eax$/;"	l
b2	user/stressfs.asm	/^  b2:	56                   	push   %esi$/;"	l
b2	user/wc.asm	/^  b2:	5d                   	pop    %ebp$/;"	l
b20	user/sh.asm	/^ b20:	c3                   	ret$/;"	l
b21	user/sh.asm	/^ b21:	b8 02 00 00 00       	mov    $0x2,%eax$/;"	l
b24	user/usertests.asm	/^     b24:	83 c4 08             	add    $0x8,%esp$/;"	l
b26	user/sh.asm	/^ b26:	cd 40                	int    $0x40$/;"	l
b27	user/usertests.asm	/^     b27:	68 32 3e 00 00       	push   $0x3e32$/;"	l
b28	user/sh.asm	/^ b28:	c3                   	ret$/;"	l
b29	user/sh.asm	/^ b29:	b8 03 00 00 00       	mov    $0x3,%eax$/;"	l
b2c	user/usertests.asm	/^     b2c:	6a 01                	push   $0x1$/;"	l
b2e	user/sh.asm	/^ b2e:	cd 40                	int    $0x40$/;"	l
b2e	user/usertests.asm	/^     b2e:	e8 8c 2c 00 00       	call   37bf <printf>$/;"	l
b3	user/init.asm	/^  b3:	78 b0                	js     65 <main+0x65>$/;"	l
b3	user/kill.asm	/^  b3:	57                   	push   %edi$/;"	l
b3	user/ln.asm	/^  b3:	c3                   	ret$/;"	l
b3	user/stressfs.asm	/^  b3:	e8 04 02 00 00       	call   2bc <close>$/;"	l
b3	user/wc.asm	/^  b3:	c3                   	ret$/;"	l
b3	user/zombie.asm	/^  b3:	cd 40                	int    $0x40$/;"	l
b30	user/sh.asm	/^ b30:	c3                   	ret$/;"	l
b31	user/sh.asm	/^ b31:	b8 04 00 00 00       	mov    $0x4,%eax$/;"	l
b33	user/usertests.asm	/^     b33:	e8 5c 2b 00 00       	call   3694 <wait>$/;"	l
b36	user/sh.asm	/^ b36:	cd 40                	int    $0x40$/;"	l
b38	user/sh.asm	/^ b38:	c3                   	ret$/;"	l
b38	user/usertests.asm	/^     b38:	e8 57 2b 00 00       	call   3694 <wait>$/;"	l
b39	user/sh.asm	/^ b39:	b8 05 00 00 00       	mov    $0x5,%eax$/;"	l
b3d	user/usertests.asm	/^     b3d:	e8 52 2b 00 00       	call   3694 <wait>$/;"	l
b3e	user/sh.asm	/^ b3e:	cd 40                	int    $0x40$/;"	l
b4	user/forktest.asm	/^  b4:	e8 47 ff ff ff       	call   0 <printf>$/;"	l
b4	user/grep.asm	/^  b4:	eb 05                	jmp    bb <matchhere+0x76>$/;"	l
b4	user/kill.asm	/^  b4:	8b 7d 08             	mov    0x8(%ebp),%edi$/;"	l
b4	user/ln.asm	/^  b4:	b8 12 00 00 00       	mov    $0x12,%eax$/;"	l
b4	user/wc.asm	/^  b4:	83 ec 08             	sub    $0x8,%esp$/;"	l
b40	user/sh.asm	/^ b40:	c3                   	ret$/;"	l
b41	user/sh.asm	/^ b41:	b8 10 00 00 00       	mov    $0x10,%eax$/;"	l
b42	user/usertests.asm	/^     b42:	83 c4 08             	add    $0x8,%esp$/;"	l
b45	user/usertests.asm	/^     b45:	68 3b 3e 00 00       	push   $0x3e3b$/;"	l
b46	user/sh.asm	/^ b46:	cd 40                	int    $0x40$/;"	l
b48	user/sh.asm	/^ b48:	c3                   	ret$/;"	l
b49	user/sh.asm	/^ b49:	b8 15 00 00 00       	mov    $0x15,%eax$/;"	l
b4a	user/usertests.asm	/^     b4a:	6a 01                	push   $0x1$/;"	l
b4c	user/usertests.asm	/^     b4c:	e8 6e 2c 00 00       	call   37bf <printf>$/;"	l
b4e	user/sh.asm	/^ b4e:	cd 40                	int    $0x40$/;"	l
b5	user/init.asm	/^  b5:	75 d4                	jne    8b <main+0x8b>$/;"	l
b5	user/sh.asm	/^  b5:	85 c0                	test   %eax,%eax$/;"	l
b5	user/usertests.asm	/^      b5:	ff 35 0c 5b 00 00    	push   0x5b0c$/;"	l
b5	user/zombie.asm	/^  b5:	c3                   	ret$/;"	l
b50	user/sh.asm	/^ b50:	c3                   	ret$/;"	l
b51	user/sh.asm	/^ b51:	b8 06 00 00 00       	mov    $0x6,%eax$/;"	l
b51	user/usertests.asm	/^     b51:	83 c4 10             	add    $0x10,%esp$/;"	l
b54	user/usertests.asm	/^     b54:	eb 94                	jmp    aea <preempt+0xcf>$/;"	l
b56	user/sh.asm	/^ b56:	cd 40                	int    $0x40$/;"	l
b56	user/usertests.asm	/^     b56:	55                   	push   %ebp$/;"	l
b57	user/usertests.asm	/^     b57:	89 e5                	mov    %esp,%ebp$/;"	l
b58	user/sh.asm	/^ b58:	c3                   	ret$/;"	l
b59	user/sh.asm	/^ b59:	b8 07 00 00 00       	mov    $0x7,%eax$/;"	l
b59	user/usertests.asm	/^     b59:	56                   	push   %esi$/;"	l
b5a	user/usertests.asm	/^     b5a:	53                   	push   %ebx$/;"	l
b5b	user/usertests.asm	/^     b5b:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
b5e	user/sh.asm	/^ b5e:	cd 40                	int    $0x40$/;"	l
b6	user/echo.asm	/^  b6:	cd 40                	int    $0x40$/;"	l
b6	user/grep.asm	/^  b6:	b8 01 00 00 00       	mov    $0x1,%eax$/;"	l
b6	user/mkdir.asm	/^  b6:	cd 40                	int    $0x40$/;"	l
b6	user/rm.asm	/^  b6:	cd 40                	int    $0x40$/;"	l
b6	user/zombie.asm	/^  b6:	b8 0b 00 00 00       	mov    $0xb,%eax$/;"	l
b60	user/sh.asm	/^ b60:	c3                   	ret$/;"	l
b60	user/usertests.asm	/^     b60:	83 fe 63             	cmp    $0x63,%esi$/;"	l
b61	user/sh.asm	/^ b61:	b8 0f 00 00 00       	mov    $0xf,%eax$/;"	l
b63	user/usertests.asm	/^     b63:	7f 4b                	jg     bb0 <exitwait+0x5a>$/;"	l
b65	user/usertests.asm	/^     b65:	e8 1a 2b 00 00       	call   3684 <fork>$/;"	l
b66	user/sh.asm	/^ b66:	cd 40                	int    $0x40$/;"	l
b68	user/sh.asm	/^ b68:	c3                   	ret$/;"	l
b69	user/sh.asm	/^ b69:	b8 11 00 00 00       	mov    $0x11,%eax$/;"	l
b6a	user/usertests.asm	/^     b6a:	89 c3                	mov    %eax,%ebx$/;"	l
b6c	user/usertests.asm	/^     b6c:	85 c0                	test   %eax,%eax$/;"	l
b6e	user/sh.asm	/^ b6e:	cd 40                	int    $0x40$/;"	l
b6e	user/usertests.asm	/^     b6e:	78 0e                	js     b7e <exitwait+0x28>$/;"	l
b7	user/cat.asm	/^  b7:	46                   	inc    %esi$/;"	l
b7	user/init.asm	/^  b7:	83 ec 08             	sub    $0x8,%esp$/;"	l
b7	user/kill.asm	/^  b7:	8b 4d 10             	mov    0x10(%ebp),%ecx$/;"	l
b7	user/sh.asm	/^  b7:	74 27                	je     e0 <runcmd+0x5c>$/;"	l
b7	user/wc.asm	/^  b7:	68 76 05 00 00       	push   $0x576$/;"	l
b70	user/sh.asm	/^ b70:	c3                   	ret$/;"	l
b70	user/usertests.asm	/^     b70:	74 39                	je     bab <exitwait+0x55>$/;"	l
b71	user/sh.asm	/^ b71:	b8 12 00 00 00       	mov    $0x12,%eax$/;"	l
b72	user/usertests.asm	/^     b72:	e8 1d 2b 00 00       	call   3694 <wait>$/;"	l
b76	user/sh.asm	/^ b76:	cd 40                	int    $0x40$/;"	l
b77	user/usertests.asm	/^     b77:	39 d8                	cmp    %ebx,%eax$/;"	l
b78	user/sh.asm	/^ b78:	c3                   	ret$/;"	l
b79	user/sh.asm	/^ b79:	b8 08 00 00 00       	mov    $0x8,%eax$/;"	l
b79	user/usertests.asm	/^     b79:	75 1c                	jne    b97 <exitwait+0x41>$/;"	l
b7b	user/usertests.asm	/^     b7b:	46                   	inc    %esi$/;"	l
b7c	user/usertests.asm	/^     b7c:	eb e2                	jmp    b60 <exitwait+0xa>$/;"	l
b7e	user/sh.asm	/^ b7e:	cd 40                	int    $0x40$/;"	l
b7e	user/usertests.asm	/^     b7e:	83 ec 08             	sub    $0x8,%esp$/;"	l
b8	user/cat.asm	/^  b8:	83 c4 10             	add    $0x10,%esp$/;"	l
b8	user/echo.asm	/^  b8:	c3                   	ret$/;"	l
b8	user/ls.asm	/^  b8:	50                   	push   %eax$/;"	l
b8	user/mkdir.asm	/^  b8:	c3                   	ret$/;"	l
b8	user/rm.asm	/^  b8:	c3                   	ret$/;"	l
b8	user/stressfs.asm	/^  b8:	83 c4 08             	add    $0x8,%esp$/;"	l
b80	user/sh.asm	/^ b80:	c3                   	ret$/;"	l
b81	user/sh.asm	/^ b81:	b8 13 00 00 00       	mov    $0x13,%eax$/;"	l
b81	user/usertests.asm	/^     b81:	68 a5 49 00 00       	push   $0x49a5$/;"	l
b86	user/sh.asm	/^ b86:	cd 40                	int    $0x40$/;"	l
b86	user/usertests.asm	/^     b86:	6a 01                	push   $0x1$/;"	l
b88	user/sh.asm	/^ b88:	c3                   	ret$/;"	l
b88	user/usertests.asm	/^     b88:	e8 32 2c 00 00       	call   37bf <printf>$/;"	l
b89	user/sh.asm	/^ b89:	b8 14 00 00 00       	mov    $0x14,%eax$/;"	l
b8d	user/usertests.asm	/^     b8d:	83 c4 10             	add    $0x10,%esp$/;"	l
b8e	user/sh.asm	/^ b8e:	cd 40                	int    $0x40$/;"	l
b9	user/echo.asm	/^  b9:	b8 13 00 00 00       	mov    $0x13,%eax$/;"	l
b9	user/forktest.asm	/^  b9:	83 c4 10             	add    $0x10,%esp$/;"	l
b9	user/ln.asm	/^  b9:	cd 40                	int    $0x40$/;"	l
b9	user/ls.asm	/^  b9:	57                   	push   %edi$/;"	l
b9	user/mkdir.asm	/^  b9:	b8 0f 00 00 00       	mov    $0xf,%eax$/;"	l
b9	user/rm.asm	/^  b9:	b8 0f 00 00 00       	mov    $0xf,%eax$/;"	l
b9	user/sh.asm	/^  b9:	8d 53 04             	lea    0x4(%ebx),%edx$/;"	l
b90	user/sh.asm	/^ b90:	c3                   	ret$/;"	l
b90	user/usertests.asm	/^     b90:	8d 65 f8             	lea    -0x8(%ebp),%esp$/;"	l
b91	user/sh.asm	/^ b91:	b8 09 00 00 00       	mov    $0x9,%eax$/;"	l
b93	user/usertests.asm	/^     b93:	5b                   	pop    %ebx$/;"	l
b94	user/usertests.asm	/^     b94:	5e                   	pop    %esi$/;"	l
b95	user/usertests.asm	/^     b95:	5d                   	pop    %ebp$/;"	l
b96	user/sh.asm	/^ b96:	cd 40                	int    $0x40$/;"	l
b96	user/usertests.asm	/^     b96:	c3                   	ret$/;"	l
b97	user/usertests.asm	/^     b97:	83 ec 08             	sub    $0x8,%esp$/;"	l
b98	user/sh.asm	/^ b98:	c3                   	ret$/;"	l
b99	user/sh.asm	/^ b99:	b8 0a 00 00 00       	mov    $0xa,%eax$/;"	l
b9a	user/usertests.asm	/^     b9a:	68 47 3e 00 00       	push   $0x3e47$/;"	l
b9e	user/sh.asm	/^ b9e:	cd 40                	int    $0x40$/;"	l
b9f	user/usertests.asm	/^     b9f:	6a 01                	push   $0x1$/;"	l
ba	user/init.asm	/^  ba:	68 f8 04 00 00       	push   $0x4f8$/;"	l
ba	user/kill.asm	/^  ba:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
ba	user/ls.asm	/^  ba:	e8 f9 03 00 00       	call   4b8 <fstat>$/;"	l
ba0	user/sh.asm	/^ ba0:	c3                   	ret$/;"	l
ba1	user/sh.asm	/^ ba1:	b8 0b 00 00 00       	mov    $0xb,%eax$/;"	l
ba1	user/usertests.asm	/^     ba1:	e8 19 2c 00 00       	call   37bf <printf>$/;"	l
ba6	user/sh.asm	/^ ba6:	cd 40                	int    $0x40$/;"	l
ba6	user/usertests.asm	/^     ba6:	83 c4 10             	add    $0x10,%esp$/;"	l
ba8	user/sh.asm	/^ ba8:	c3                   	ret$/;"	l
ba9	user/sh.asm	/^ ba9:	b8 0c 00 00 00       	mov    $0xc,%eax$/;"	l
ba9	user/usertests.asm	/^     ba9:	eb e5                	jmp    b90 <exitwait+0x3a>$/;"	l
bab	user/usertests.asm	/^     bab:	e8 dc 2a 00 00       	call   368c <exit>$/;"	l
backcmd	user/sh.c	/^backcmd(struct cmd *subcmd)$/;"	f	typeref:struct:cmd *
backcmd	user/sh.c	/^struct backcmd {$/;"	s	file:
bad	kernel.asm	/^ bad:$/;"	l
bad	kernel.asm	/^bad:$/;"	l
bae	user/sh.asm	/^ bae:	cd 40                	int    $0x40$/;"	l
balloc	fs.c	/^balloc(uint dev)$/;"	f	typeref:typename:uint	file:
balloc	mkfs.c	/^balloc(int used)$/;"	f	typeref:typename:void
base	user/umalloc.c	/^static Header base;$/;"	v	typeref:typename:Header	file:
base_15_0	mmu.h	/^  uint base_15_0 : 16; \/\/ Low bits of segment base address$/;"	m	struct:segdesc	typeref:typename:uint:16
base_23_16	mmu.h	/^  uint base_23_16 : 8; \/\/ Middle bits of segment base address$/;"	m	struct:segdesc	typeref:typename:uint:8
base_31_24	mmu.h	/^  uint base_31_24 : 8; \/\/ High bits of segment base address$/;"	m	struct:segdesc	typeref:typename:uint:8
bb	user/cat.asm	/^  bb:	8b 45 e4             	mov    -0x1c(%ebp),%eax$/;"	l
bb	user/grep.asm	/^  bb:	c9                   	leave$/;"	l
bb	user/ln.asm	/^  bb:	c3                   	ret$/;"	l
bb	user/stressfs.asm	/^  bb:	68 45 05 00 00       	push   $0x545$/;"	l
bb	user/usertests.asm	/^      bb:	e8 ff 36 00 00       	call   37bf <printf>$/;"	l
bb	user/zombie.asm	/^  bb:	cd 40                	int    $0x40$/;"	l
bb0	user/sh.asm	/^ bb0:	c3                   	ret$/;"	l
bb0	user/usertests.asm	/^     bb0:	83 ec 08             	sub    $0x8,%esp$/;"	l
bb1	user/sh.asm	/^ bb1:	b8 0d 00 00 00       	mov    $0xd,%eax$/;"	l
bb3	user/usertests.asm	/^     bb3:	68 57 3e 00 00       	push   $0x3e57$/;"	l
bb6	user/sh.asm	/^ bb6:	cd 40                	int    $0x40$/;"	l
bb8	user/sh.asm	/^ bb8:	c3                   	ret$/;"	l
bb8	user/usertests.asm	/^     bb8:	6a 01                	push   $0x1$/;"	l
bb9	user/sh.asm	/^ bb9:	b8 0e 00 00 00       	mov    $0xe,%eax$/;"	l
bba	user/usertests.asm	/^     bba:	e8 00 2c 00 00       	call   37bf <printf>$/;"	l
bbe	user/sh.asm	/^ bbe:	cd 40                	int    $0x40$/;"	l
bbf	user/usertests.asm	/^     bbf:	83 c4 10             	add    $0x10,%esp$/;"	l
bc	user/forktest.asm	/^  bc:	8b 5d fc             	mov    -0x4(%ebp),%ebx$/;"	l
bc	user/grep.asm	/^  bc:	c3                   	ret$/;"	l
bc	user/ln.asm	/^  bc:	b8 08 00 00 00       	mov    $0x8,%eax$/;"	l
bc	user/sh.asm	/^  bc:	83 ec 08             	sub    $0x8,%esp$/;"	l
bc	user/wc.asm	/^  bc:	6a 01                	push   $0x1$/;"	l
bc0	user/sh.asm	/^ bc0:	c3                   	ret$/;"	l
bc1	user/sh.asm	/^ bc1:	55                   	push   %ebp$/;"	l
bc2	user/sh.asm	/^ bc2:	89 e5                	mov    %esp,%ebp$/;"	l
bc2	user/usertests.asm	/^     bc2:	eb cc                	jmp    b90 <exitwait+0x3a>$/;"	l
bc4	user/sh.asm	/^ bc4:	83 ec 1c             	sub    $0x1c,%esp$/;"	l
bc4	user/usertests.asm	/^     bc4:	55                   	push   %ebp$/;"	l
bc5	user/usertests.asm	/^     bc5:	89 e5                	mov    %esp,%ebp$/;"	l
bc7	user/sh.asm	/^ bc7:	88 55 f4             	mov    %dl,-0xc(%ebp)$/;"	l
bc7	user/usertests.asm	/^     bc7:	57                   	push   %edi$/;"	l
bc8	user/usertests.asm	/^     bc8:	56                   	push   %esi$/;"	l
bc9	user/usertests.asm	/^     bc9:	53                   	push   %ebx$/;"	l
bca	user/sh.asm	/^ bca:	6a 01                	push   $0x1$/;"	l
bca	user/usertests.asm	/^     bca:	83 ec 14             	sub    $0x14,%esp$/;"	l
bcache	bio.c	/^} bcache;$/;"	v	typeref:struct:__anon0f27d3d00108
bcc	user/sh.asm	/^ bcc:	8d 55 f4             	lea    -0xc(%ebp),%edx$/;"	l
bcd	kernel.asm	/^  bcd = (sb & (1 << 2)) == 0;$/;"	d
bcd	user/usertests.asm	/^     bcd:	68 64 3e 00 00       	push   $0x3e64$/;"	l
bcf	user/sh.asm	/^ bcf:	52                   	push   %edx$/;"	l
bcmd	user/sh.asm	/^    bcmd = (struct backcmd*)cmd;$/;"	d
bd	user/grep.asm	/^  bd:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
bd	user/kill.asm	/^  bd:	fc                   	cld$/;"	l
bd	user/zombie.asm	/^  bd:	c3                   	ret$/;"	l
bd0	user/sh.asm	/^ bd0:	50                   	push   %eax$/;"	l
bd1	user/sh.asm	/^ bd1:	e8 6b ff ff ff       	call   b41 <write>$/;"	l
bd2	user/usertests.asm	/^     bd2:	6a 01                	push   $0x1$/;"	l
bd4	user/usertests.asm	/^     bd4:	e8 e6 2b 00 00       	call   37bf <printf>$/;"	l
bd6	user/sh.asm	/^ bd6:	83 c4 10             	add    $0x10,%esp$/;"	l
bd9	user/sh.asm	/^ bd9:	c9                   	leave$/;"	l
bd9	user/usertests.asm	/^     bd9:	e8 2e 2b 00 00       	call   370c <getpid>$/;"	l
bda	kernel.asm	/^  bda = (uchar *) P2V(0x400);$/;"	d
bda	user/sh.asm	/^ bda:	c3                   	ret$/;"	l
bdb	user/sh.asm	/^ bdb:	55                   	push   %ebp$/;"	l
bdc	user/sh.asm	/^ bdc:	89 e5                	mov    %esp,%ebp$/;"	l
bde	user/sh.asm	/^ bde:	57                   	push   %edi$/;"	l
bde	user/usertests.asm	/^     bde:	89 c6                	mov    %eax,%esi$/;"	l
bdf	user/sh.asm	/^ bdf:	56                   	push   %esi$/;"	l
be	user/cat.asm	/^  be:	39 c6                	cmp    %eax,%esi$/;"	l
be	user/echo.asm	/^  be:	cd 40                	int    $0x40$/;"	l
be	user/kill.asm	/^  be:	f3 aa                	rep stos %al,%es:(%edi)$/;"	l
be	user/mkdir.asm	/^  be:	cd 40                	int    $0x40$/;"	l
be	user/rm.asm	/^  be:	cd 40                	int    $0x40$/;"	l
be	user/wc.asm	/^  be:	e8 4d 03 00 00       	call   410 <printf>$/;"	l
be	user/zombie.asm	/^  be:	b8 0c 00 00 00       	mov    $0xc,%eax$/;"	l
be0	user/sh.asm	/^ be0:	53                   	push   %ebx$/;"	l
be0	user/usertests.asm	/^     be0:	e8 9f 2a 00 00       	call   3684 <fork>$/;"	l
be1	user/sh.asm	/^ be1:	83 ec 2c             	sub    $0x2c,%esp$/;"	l
be4	user/sh.asm	/^ be4:	89 45 d4             	mov    %eax,-0x2c(%ebp)$/;"	l
be5	user/usertests.asm	/^     be5:	83 c4 10             	add    $0x10,%esp$/;"	l
be7	user/sh.asm	/^ be7:	89 ce                	mov    %ecx,%esi$/;"	l
be8	user/usertests.asm	/^     be8:	85 c0                	test   %eax,%eax$/;"	l
be9	user/sh.asm	/^ be9:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)$/;"	l
bea	user/usertests.asm	/^     bea:	0f 85 82 00 00 00    	jne    c72 <mem+0xae>$/;"	l
bed	user/sh.asm	/^ bed:	74 04                	je     bf3 <printint+0x18>$/;"	l
bef	user/sh.asm	/^ bef:	85 d2                	test   %edx,%edx$/;"	l
begin_op	log.c	/^begin_op(void)$/;"	f	typeref:typename:void
bf	user/forktest.asm	/^  bf:	c9                   	leave$/;"	l
bf	user/init.asm	/^  bf:	68 a6 03 00 00       	push   $0x3a6$/;"	l
bf	user/ls.asm	/^  bf:	83 c4 10             	add    $0x10,%esp$/;"	l
bf	user/sh.asm	/^  bf:	52                   	push   %edx$/;"	l
bf0	user/usertests.asm	/^     bf0:	bb 00 00 00 00       	mov    $0x0,%ebx$/;"	l
bf1	user/sh.asm	/^ bf1:	78 3c                	js     c2f <printint+0x54>$/;"	l
bf3	user/sh.asm	/^ bf3:	89 d1                	mov    %edx,%ecx$/;"	l
bf5	user/sh.asm	/^ bf5:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)$/;"	l
bf5	user/usertests.asm	/^     bf5:	eb 04                	jmp    bfb <mem+0x37>$/;"	l
bf7	user/usertests.asm	/^     bf7:	89 18                	mov    %ebx,(%eax)$/;"	l
bf9	user/usertests.asm	/^     bf9:	89 c3                	mov    %eax,%ebx$/;"	l
bfb	user/usertests.asm	/^     bfb:	83 ec 0c             	sub    $0xc,%esp$/;"	l
bfc	user/sh.asm	/^ bfc:	bb 00 00 00 00       	mov    $0x0,%ebx$/;"	l
bfe	user/usertests.asm	/^     bfe:	68 11 27 00 00       	push   $0x2711$/;"	l
bfree	fs.c	/^bfree(int dev, uint b)$/;"	f	typeref:typename:void	file:
bget	bio.c	/^bget(uint dev, uint blockno)$/;"	f	typeref:struct:buf *	file:
bi	kernel.asm	/^  bi = b % BPB;$/;"	d
bigargtest	user/usertests.c	/^bigargtest(void)$/;"	f	typeref:typename:void
bigdir	user/usertests.c	/^bigdir(void)$/;"	f	typeref:typename:void
bigfile	user/usertests.c	/^bigfile(void)$/;"	f	typeref:typename:void
bigwrite	user/usertests.c	/^bigwrite(void)$/;"	f	typeref:typename:void
binit	bio.c	/^binit(void)$/;"	f	typeref:typename:void
block	log.c	/^  int block[LOGSIZE];$/;"	m	struct:logheader	typeref:typename:int[]	file:
blockno	buf.h	/^  uint blockno;$/;"	m	struct:buf	typeref:typename:uint
bmap	fs.c	/^bmap(struct inode *ip, uint bn)$/;"	f	typeref:typename:uint	file:
bmapstart	fs.h	/^  uint bmapstart;    \/\/ Block number of first free map block$/;"	m	struct:superblock	typeref:typename:uint
bochs	Makefile	/^bochs : fs.img xv6.img$/;"	t
bootblock	Makefile	/^bootblock: bootasm.S bootmain.c$/;"	t
bootmain	bootmain.c	/^bootmain(void)$/;"	f	typeref:typename:void
bp	kernel.asm	/^    bp = bread(dev, BBLOCK(b, sb));$/;"	d
bp	kernel.asm	/^    bp = bread(ip->dev, addr);$/;"	d
bp	kernel.asm	/^  bp = bread(dev, 1);$/;"	d
bp	kernel.asm	/^  bp = bread(dev, BBLOCK(b, sb));$/;"	d
bp	kernel.asm	/^  bp = bread(dev, bno);$/;"	d
bp	user/sh.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	user/usertests.asm	/^  bp = (Header*)ap - 1;$/;"	d
bread	bio.c	/^bread(uint dev, uint blockno)$/;"	f	typeref:struct:buf *
brelse	bio.c	/^brelse(struct buf *b)$/;"	f	typeref:typename:void
bsstest	user/usertests.c	/^bsstest(void)$/;"	f	typeref:typename:void
buf	bio.c	/^  struct buf buf[NBUF];$/;"	m	struct:__anon0f27d3d00108	typeref:struct:buf[]	file:
buf	buf.h	/^struct buf {$/;"	s
buf	console.c	/^  char buf[INPUT_BUF];$/;"	m	struct:__anon96a473a90208	typeref:typename:char[]	file:
buf	kernel.asm	/^  buf = (char*)p;$/;"	d
buf	user/cat.c	/^char buf[512];$/;"	v	typeref:typename:char[512]
buf	user/grep.c	/^char buf[1024];$/;"	v	typeref:typename:char[1024]
buf	user/usertests.c	/^char buf[8192];$/;"	v	typeref:typename:char[8192]
buf	user/wc.c	/^char buf[512];$/;"	v	typeref:typename:char[512]
bwrite	bio.c	/^bwrite(struct buf *b)$/;"	f	typeref:typename:void
bzero	fs.c	/^bzero(int dev, int bno)$/;"	f	typeref:typename:void	file:
c	initcode.asm	/^   c:	b8 07 00 00 00       	mov    $0x7,%eax$/;"	l
c	kernel.asm	/^        c = (c == '\\r') ? '\\n' : c;$/;"	d
c	kernel.asm	/^    c = fmt[++i] & 0xff;$/;"	d
c	kernel.asm	/^    c = input.buf[input.r++ % INPUT_BUF];$/;"	d
c	kernel.asm	/^  c = &cpus[cpuid()];$/;"	d
c	kernel.asm	/^  c = charcode[shift & (CTL | SHIFT)][data];$/;"	d
c	kernel.asm	/^  c = mycpu();$/;"	d
c	user/cat.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	user/echo.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	user/grep.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	user/grep.asm	/^   c:	8b 7d 0c             	mov    0xc(%ebp),%edi$/;"	l
c	user/init.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	user/kill.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	user/ln.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	user/ls.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	user/ls.asm	/^   c:	e8 0e 03 00 00       	call   31f <strlen>$/;"	l
c	user/mkdir.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	user/rm.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	user/sh.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	user/stressfs.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	user/usertests.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	user/usertests.asm	/^  c = sbrk(-(sbrk(0) - oldbrk));$/;"	d
c	user/usertests.asm	/^  c = sbrk(-4096);$/;"	d
c	user/usertests.asm	/^  c = sbrk(0);$/;"	d
c	user/usertests.asm	/^  c = sbrk(1);$/;"	d
c	user/usertests.asm	/^  c = sbrk(4096);$/;"	d
c	user/wc.asm	/^    c = fmt[i] & 0xff;$/;"	d
c0	user/cat.asm	/^  c0:	7d 31                	jge    f3 <main+0x87>$/;"	l
c0	user/echo.asm	/^  c0:	c3                   	ret$/;"	l
c0	user/forktest.asm	/^  c0:	c3                   	ret$/;"	l
c0	user/kill.asm	/^  c0:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
c0	user/mkdir.asm	/^  c0:	c3                   	ret$/;"	l
c0	user/rm.asm	/^  c0:	c3                   	ret$/;"	l
c0	user/sh.asm	/^  c0:	50                   	push   %eax$/;"	l
c0	user/stressfs.asm	/^  c0:	6a 01                	push   $0x1$/;"	l
c0	user/usertests.asm	/^      c0:	e8 c7 35 00 00       	call   368c <exit>$/;"	l
c01	user/sh.asm	/^ c01:	89 c8                	mov    %ecx,%eax$/;"	l
c03	user/sh.asm	/^ c03:	ba 00 00 00 00       	mov    $0x0,%edx$/;"	l
c03	user/usertests.asm	/^     c03:	e8 d7 2d 00 00       	call   39df <malloc>$/;"	l
c08	user/sh.asm	/^ c08:	f7 f6                	div    %esi$/;"	l
c08	user/usertests.asm	/^     c08:	83 c4 10             	add    $0x10,%esp$/;"	l
c0a	user/sh.asm	/^ c0a:	89 df                	mov    %ebx,%edi$/;"	l
c0b	user/usertests.asm	/^     c0b:	85 c0                	test   %eax,%eax$/;"	l
c0c	user/sh.asm	/^ c0c:	43                   	inc    %ebx$/;"	l
c0d	user/sh.asm	/^ c0d:	8a 92 44 10 00 00    	mov    0x1044(%edx),%dl$/;"	l
c0d	user/usertests.asm	/^     c0d:	75 e8                	jne    bf7 <mem+0x33>$/;"	l
c0f	user/usertests.asm	/^     c0f:	eb 10                	jmp    c21 <mem+0x5d>$/;"	l
c1	user/echo.asm	/^  c1:	b8 14 00 00 00       	mov    $0x14,%eax$/;"	l
c1	user/forktest.asm	/^  c1:	83 ec 08             	sub    $0x8,%esp$/;"	l
c1	user/ln.asm	/^  c1:	cd 40                	int    $0x40$/;"	l
c1	user/mkdir.asm	/^  c1:	b8 11 00 00 00       	mov    $0x11,%eax$/;"	l
c1	user/rm.asm	/^  c1:	b8 11 00 00 00       	mov    $0x11,%eax$/;"	l
c1	user/sh.asm	/^  c1:	e8 93 0a 00 00       	call   b59 <exec>$/;"	l
c11	user/usertests.asm	/^     c11:	8b 3b                	mov    (%ebx),%edi$/;"	l
c13	user/sh.asm	/^ c13:	88 54 3d d8          	mov    %dl,-0x28(%ebp,%edi,1)$/;"	l
c13	user/usertests.asm	/^     c13:	83 ec 0c             	sub    $0xc,%esp$/;"	l
c16	user/usertests.asm	/^     c16:	53                   	push   %ebx$/;"	l
c17	user/sh.asm	/^ c17:	89 ca                	mov    %ecx,%edx$/;"	l
c17	user/usertests.asm	/^     c17:	e8 03 2d 00 00       	call   391f <free>$/;"	l
c19	user/sh.asm	/^ c19:	89 c1                	mov    %eax,%ecx$/;"	l
c1b	user/sh.asm	/^ c1b:	39 f2                	cmp    %esi,%edx$/;"	l
c1c	user/usertests.asm	/^     c1c:	83 c4 10             	add    $0x10,%esp$/;"	l
c1d	user/sh.asm	/^ c1d:	73 e2                	jae    c01 <printint+0x26>$/;"	l
c1f	user/sh.asm	/^ c1f:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)$/;"	l
c1f	user/usertests.asm	/^     c1f:	89 fb                	mov    %edi,%ebx$/;"	l
c2	user/cat.asm	/^  c2:	8b 45 e0             	mov    -0x20(%ebp),%eax$/;"	l
c2	user/grep.asm	/^  c2:	eb f7                	jmp    bb <matchhere+0x76>$/;"	l
c2	user/ls.asm	/^  c2:	85 c0                	test   %eax,%eax$/;"	l
c2	user/stressfs.asm	/^  c2:	e8 00 03 00 00       	call   3c7 <printf>$/;"	l
c21	user/usertests.asm	/^     c21:	85 db                	test   %ebx,%ebx$/;"	l
c23	user/sh.asm	/^ c23:	74 24                	je     c49 <printint+0x6e>$/;"	l
c23	user/usertests.asm	/^     c23:	75 ec                	jne    c11 <mem+0x4d>$/;"	l
c25	user/sh.asm	/^ c25:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)$/;"	l
c25	user/usertests.asm	/^     c25:	83 ec 0c             	sub    $0xc,%esp$/;"	l
c28	user/usertests.asm	/^     c28:	68 00 50 00 00       	push   $0x5000$/;"	l
c2a	user/sh.asm	/^ c2a:	8d 5f 02             	lea    0x2(%edi),%ebx$/;"	l
c2d	user/sh.asm	/^ c2d:	eb 1a                	jmp    c49 <printint+0x6e>$/;"	l
c2d	user/usertests.asm	/^     c2d:	e8 ad 2d 00 00       	call   39df <malloc>$/;"	l
c2f	user/sh.asm	/^ c2f:	89 d1                	mov    %edx,%ecx$/;"	l
c3	user/kill.asm	/^  c3:	8b 7d fc             	mov    -0x4(%ebp),%edi$/;"	l
c3	user/ln.asm	/^  c3:	c3                   	ret$/;"	l
c3	user/wc.asm	/^  c3:	e8 15 02 00 00       	call   2dd <exit>$/;"	l
c3	user/zombie.asm	/^  c3:	cd 40                	int    $0x40$/;"	l
c31	user/sh.asm	/^ c31:	f7 d9                	neg    %ecx$/;"	l
c32	user/usertests.asm	/^     c32:	83 c4 10             	add    $0x10,%esp$/;"	l
c33	user/sh.asm	/^ c33:	c7 45 d0 01 00 00 00 	movl   $0x1,-0x30(%ebp)$/;"	l
c35	user/usertests.asm	/^     c35:	85 c0                	test   %eax,%eax$/;"	l
c37	user/usertests.asm	/^     c37:	74 1d                	je     c56 <mem+0x92>$/;"	l
c39	user/usertests.asm	/^     c39:	83 ec 0c             	sub    $0xc,%esp$/;"	l
c3a	user/sh.asm	/^ c3a:	eb c0                	jmp    bfc <printint+0x21>$/;"	l
c3c	user/sh.asm	/^ c3c:	0f be 54 1d d8       	movsbl -0x28(%ebp,%ebx,1),%edx$/;"	l
c3c	user/usertests.asm	/^     c3c:	50                   	push   %eax$/;"	l
c3d	user/usertests.asm	/^     c3d:	e8 dd 2c 00 00       	call   391f <free>$/;"	l
c4	user/forktest.asm	/^  c4:	68 27 03 00 00       	push   $0x327$/;"	l
c4	user/grep.asm	/^  c4:	55                   	push   %ebp$/;"	l
c4	user/init.asm	/^  c4:	e8 54 00 00 00       	call   11d <exec>$/;"	l
c4	user/ln.asm	/^  c4:	b8 13 00 00 00       	mov    $0x13,%eax$/;"	l
c4	user/ls.asm	/^  c4:	0f 88 83 00 00 00    	js     14d <ls+0xc2>$/;"	l
c41	user/sh.asm	/^ c41:	8b 45 d4             	mov    -0x2c(%ebp),%eax$/;"	l
c42	user/usertests.asm	/^     c42:	83 c4 08             	add    $0x8,%esp$/;"	l
c44	user/sh.asm	/^ c44:	e8 78 ff ff ff       	call   bc1 <putc>$/;"	l
c45	user/usertests.asm	/^     c45:	68 88 3e 00 00       	push   $0x3e88$/;"	l
c49	user/sh.asm	/^ c49:	4b                   	dec    %ebx$/;"	l
c4a	user/sh.asm	/^ c4a:	79 f0                	jns    c3c <printint+0x61>$/;"	l
c4a	user/usertests.asm	/^     c4a:	6a 01                	push   $0x1$/;"	l
c4c	user/sh.asm	/^ c4c:	83 c4 2c             	add    $0x2c,%esp$/;"	l
c4c	user/usertests.asm	/^     c4c:	e8 6e 2b 00 00       	call   37bf <printf>$/;"	l
c4f	user/sh.asm	/^ c4f:	5b                   	pop    %ebx$/;"	l
c5	user/cat.asm	/^  c5:	8d 3c b0             	lea    (%eax,%esi,4),%edi$/;"	l
c5	user/grep.asm	/^  c5:	89 e5                	mov    %esp,%ebp$/;"	l
c5	user/usertests.asm	/^      c5:	83 ec 08             	sub    $0x8,%esp$/;"	l
c5	user/zombie.asm	/^  c5:	c3                   	ret$/;"	l
c50	user/sh.asm	/^ c50:	5e                   	pop    %esi$/;"	l
c51	user/sh.asm	/^ c51:	5f                   	pop    %edi$/;"	l
c51	user/usertests.asm	/^     c51:	e8 36 2a 00 00       	call   368c <exit>$/;"	l
c52	user/sh.asm	/^ c52:	5d                   	pop    %ebp$/;"	l
c53	user/sh.asm	/^ c53:	c3                   	ret$/;"	l
c54	user/sh.asm	/^ c54:	55                   	push   %ebp$/;"	l
c55	user/sh.asm	/^ c55:	89 e5                	mov    %esp,%ebp$/;"	l
c56	user/usertests.asm	/^     c56:	83 ec 08             	sub    $0x8,%esp$/;"	l
c57	user/sh.asm	/^ c57:	57                   	push   %edi$/;"	l
c58	user/sh.asm	/^ c58:	56                   	push   %esi$/;"	l
c59	user/sh.asm	/^ c59:	53                   	push   %ebx$/;"	l
c59	user/usertests.asm	/^     c59:	68 6e 3e 00 00       	push   $0x3e6e$/;"	l
c5a	user/sh.asm	/^ c5a:	83 ec 1c             	sub    $0x1c,%esp$/;"	l
c5d	user/sh.asm	/^ c5d:	8d 45 10             	lea    0x10(%ebp),%eax$/;"	l
c5e	user/usertests.asm	/^     c5e:	6a 01                	push   $0x1$/;"	l
c6	user/echo.asm	/^  c6:	cd 40                	int    $0x40$/;"	l
c6	user/kill.asm	/^  c6:	c9                   	leave$/;"	l
c6	user/mkdir.asm	/^  c6:	cd 40                	int    $0x40$/;"	l
c6	user/rm.asm	/^  c6:	cd 40                	int    $0x40$/;"	l
c6	user/sh.asm	/^  c6:	83 c4 0c             	add    $0xc,%esp$/;"	l
c6	user/zombie.asm	/^  c6:	b8 0d 00 00 00       	mov    $0xd,%eax$/;"	l
c60	user/sh.asm	/^ c60:	89 45 e4             	mov    %eax,-0x1c(%ebp)$/;"	l
c60	user/usertests.asm	/^     c60:	e8 5a 2b 00 00       	call   37bf <printf>$/;"	l
c63	user/sh.asm	/^ c63:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
c65	user/usertests.asm	/^     c65:	89 34 24             	mov    %esi,(%esp)$/;"	l
c68	user/sh.asm	/^ c68:	bb 00 00 00 00       	mov    $0x0,%ebx$/;"	l
c68	user/usertests.asm	/^     c68:	e8 4f 2a 00 00       	call   36bc <kill>$/;"	l
c6d	user/sh.asm	/^ c6d:	eb 12                	jmp    c81 <printf+0x2d>$/;"	l
c6d	user/usertests.asm	/^     c6d:	e8 1a 2a 00 00       	call   368c <exit>$/;"	l
c6f	user/sh.asm	/^ c6f:	89 fa                	mov    %edi,%edx$/;"	l
c7	user/grep.asm	/^  c7:	56                   	push   %esi$/;"	l
c7	user/kill.asm	/^  c7:	c3                   	ret$/;"	l
c7	user/stressfs.asm	/^  c7:	83 c4 08             	add    $0x8,%esp$/;"	l
c71	user/sh.asm	/^ c71:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
c72	user/usertests.asm	/^     c72:	e8 1d 2a 00 00       	call   3694 <wait>$/;"	l
c74	user/sh.asm	/^ c74:	e8 48 ff ff ff       	call   bc1 <putc>$/;"	l
c77	user/usertests.asm	/^     c77:	8d 65 f4             	lea    -0xc(%ebp),%esp$/;"	l
c79	user/sh.asm	/^ c79:	eb 05                	jmp    c80 <printf+0x2c>$/;"	l
c7a	user/usertests.asm	/^     c7a:	5b                   	pop    %ebx$/;"	l
c7b	user/sh.asm	/^ c7b:	83 fe 25             	cmp    $0x25,%esi$/;"	l
c7b	user/usertests.asm	/^     c7b:	5e                   	pop    %esi$/;"	l
c7c	user/usertests.asm	/^     c7c:	5f                   	pop    %edi$/;"	l
c7d	user/usertests.asm	/^     c7d:	5d                   	pop    %ebp$/;"	l
c7e	user/sh.asm	/^ c7e:	74 22                	je     ca2 <printf+0x4e>$/;"	l
c7e	user/usertests.asm	/^     c7e:	c3                   	ret$/;"	l
c7f	user/usertests.asm	/^     c7f:	55                   	push   %ebp$/;"	l
c8	user/cat.asm	/^  c8:	83 ec 08             	sub    $0x8,%esp$/;"	l
c8	user/echo.asm	/^  c8:	c3                   	ret$/;"	l
c8	user/grep.asm	/^  c8:	53                   	push   %ebx$/;"	l
c8	user/kill.asm	/^  c8:	55                   	push   %ebp$/;"	l
c8	user/mkdir.asm	/^  c8:	c3                   	ret$/;"	l
c8	user/rm.asm	/^  c8:	c3                   	ret$/;"	l
c8	user/usertests.asm	/^      c8:	68 af 3a 00 00       	push   $0x3aaf$/;"	l
c8	user/wc.asm	/^  c8:	8d 4c 24 04          	lea    0x4(%esp),%ecx$/;"	l
c80	user/sh.asm	/^ c80:	43                   	inc    %ebx$/;"	l
c80	user/usertests.asm	/^     c80:	89 e5                	mov    %esp,%ebp$/;"	l
c81	user/sh.asm	/^ c81:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
c82	user/usertests.asm	/^     c82:	57                   	push   %edi$/;"	l
c83	user/usertests.asm	/^     c83:	56                   	push   %esi$/;"	l
c84	user/sh.asm	/^ c84:	8a 04 18             	mov    (%eax,%ebx,1),%al$/;"	l
c84	user/usertests.asm	/^     c84:	53                   	push   %ebx$/;"	l
c85	user/usertests.asm	/^     c85:	83 ec 24             	sub    $0x24,%esp$/;"	l
c87	user/sh.asm	/^ c87:	84 c0                	test   %al,%al$/;"	l
c88	user/usertests.asm	/^     c88:	68 90 3e 00 00       	push   $0x3e90$/;"	l
c89	user/sh.asm	/^ c89:	0f 84 1d 01 00 00    	je     dac <printf+0x158>$/;"	l
c8d	user/usertests.asm	/^     c8d:	6a 01                	push   $0x1$/;"	l
c8f	user/sh.asm	/^ c8f:	0f be f8             	movsbl %al,%edi$/;"	l
c8f	user/usertests.asm	/^     c8f:	e8 2b 2b 00 00       	call   37bf <printf>$/;"	l
c9	user/echo.asm	/^  c9:	b8 09 00 00 00       	mov    $0x9,%eax$/;"	l
c9	user/forktest.asm	/^  c9:	6a 01                	push   $0x1$/;"	l
c9	user/grep.asm	/^  c9:	8b 75 08             	mov    0x8(%ebp),%esi$/;"	l
c9	user/init.asm	/^  c9:	83 c4 08             	add    $0x8,%esp$/;"	l
c9	user/kill.asm	/^  c9:	89 e5                	mov    %esp,%ebp$/;"	l
c9	user/ln.asm	/^  c9:	cd 40                	int    $0x40$/;"	l
c9	user/mkdir.asm	/^  c9:	b8 12 00 00 00       	mov    $0x12,%eax$/;"	l
c9	user/rm.asm	/^  c9:	b8 12 00 00 00       	mov    $0x12,%eax$/;"	l
c9	user/sh.asm	/^  c9:	ff 73 04             	push   0x4(%ebx)$/;"	l
c92	user/sh.asm	/^ c92:	0f b6 c0             	movzbl %al,%eax$/;"	l
c94	user/usertests.asm	/^     c94:	c7 04 24 9f 3e 00 00 	movl   $0x3e9f,(%esp)$/;"	l
c95	user/sh.asm	/^ c95:	85 f6                	test   %esi,%esi$/;"	l
c97	user/sh.asm	/^ c97:	75 e2                	jne    c7b <printf+0x27>$/;"	l
c99	user/sh.asm	/^ c99:	83 f8 25             	cmp    $0x25,%eax$/;"	l
c9b	user/usertests.asm	/^     c9b:	e8 3c 2a 00 00       	call   36dc <unlink>$/;"	l
c9c	user/sh.asm	/^ c9c:	75 d1                	jne    c6f <printf+0x1b>$/;"	l
c9e	user/sh.asm	/^ c9e:	89 c6                	mov    %eax,%esi$/;"	l
ca	user/ls.asm	/^  ca:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax$/;"	l
ca	user/stressfs.asm	/^  ca:	6a 00                	push   $0x0$/;"	l
ca0	user/sh.asm	/^ ca0:	eb de                	jmp    c80 <printf+0x2c>$/;"	l
ca0	user/usertests.asm	/^     ca0:	83 c4 08             	add    $0x8,%esp$/;"	l
ca2	user/sh.asm	/^ ca2:	83 f8 25             	cmp    $0x25,%eax$/;"	l
ca3	user/usertests.asm	/^     ca3:	68 02 02 00 00       	push   $0x202$/;"	l
ca5	user/sh.asm	/^ ca5:	0f 84 cc 00 00 00    	je     d77 <printf+0x123>$/;"	l
ca8	user/usertests.asm	/^     ca8:	68 9f 3e 00 00       	push   $0x3e9f$/;"	l
cab	user/sh.asm	/^ cab:	0f 8c da 00 00 00    	jl     d8b <printf+0x137>$/;"	l
cad	user/usertests.asm	/^     cad:	e8 1a 2a 00 00       	call   36cc <open>$/;"	l
cat	user/cat.asm	/^cat:     formato del fichero elf32-i386$/;"	l
cat	user/cat.c	/^cat(int fd)$/;"	f	typeref:typename:void
cb	user/cat.asm	/^  cb:	6a 00                	push   $0x0$/;"	l
cb	user/forktest.asm	/^  cb:	e8 30 ff ff ff       	call   0 <printf>$/;"	l
cb	user/kill.asm	/^  cb:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
cb	user/ln.asm	/^  cb:	c3                   	ret$/;"	l
cb	user/zombie.asm	/^  cb:	cd 40                	int    $0x40$/;"	l
cb1	user/sh.asm	/^ cb1:	83 f8 78             	cmp    $0x78,%eax$/;"	l
cb2	user/usertests.asm	/^     cb2:	83 c4 10             	add    $0x10,%esp$/;"	l
cb4	user/sh.asm	/^ cb4:	0f 8f d1 00 00 00    	jg     d8b <printf+0x137>$/;"	l
cb5	user/usertests.asm	/^     cb5:	85 c0                	test   %eax,%eax$/;"	l
cb7	user/usertests.asm	/^     cb7:	78 4b                	js     d04 <sharedfd+0x85>$/;"	l
cb9	user/usertests.asm	/^     cb9:	89 c6                	mov    %eax,%esi$/;"	l
cba	user/sh.asm	/^ cba:	83 f8 63             	cmp    $0x63,%eax$/;"	l
cbb	user/usertests.asm	/^     cbb:	e8 c4 29 00 00       	call   3684 <fork>$/;"	l
cbd	user/sh.asm	/^ cbd:	0f 8c c8 00 00 00    	jl     d8b <printf+0x137>$/;"	l
cc	user/forktest.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	user/grep.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	user/grep.asm	/^  cc:	8b 5d 0c             	mov    0xc(%ebp),%ebx$/;"	l
cc	user/init.asm	/^  cc:	68 a9 03 00 00       	push   $0x3a9$/;"	l
cc	user/kill.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	user/ln.asm	/^  cc:	b8 14 00 00 00       	mov    $0x14,%eax$/;"	l
cc	user/ls.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	user/sh.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	user/sh.asm	/^  cc:	68 0b 0f 00 00       	push   $0xf0b$/;"	l
cc	user/stressfs.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	user/stressfs.asm	/^  cc:	8d 45 de             	lea    -0x22(%ebp),%eax$/;"	l
cc	user/usertests.asm	/^        cc = sizeof(buf);$/;"	d
cc	user/usertests.asm	/^      cc = cc * 2;$/;"	d
cc	user/usertests.asm	/^    cc = 1;$/;"	d
cc	user/usertests.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	user/usertests.asm	/^    cc = read(fd, buf, 300);$/;"	d
cc	user/usertests.asm	/^  cc = read(fd, buf, sizeof(buf));$/;"	d
cc	user/wc.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	user/wc.asm	/^  cc:	83 e4 f0             	and    $0xfffffff0,%esp$/;"	l
cc0	user/usertests.asm	/^     cc0:	89 c7                	mov    %eax,%edi$/;"	l
cc2	user/usertests.asm	/^     cc2:	85 c0                	test   %eax,%eax$/;"	l
cc3	user/sh.asm	/^ cc3:	83 e8 63             	sub    $0x63,%eax$/;"	l
cc4	user/usertests.asm	/^     cc4:	75 55                	jne    d1b <sharedfd+0x9c>$/;"	l
cc6	user/sh.asm	/^ cc6:	83 f8 15             	cmp    $0x15,%eax$/;"	l
cc6	user/usertests.asm	/^     cc6:	b8 63 00 00 00       	mov    $0x63,%eax$/;"	l
cc9	user/sh.asm	/^ cc9:	0f 87 bc 00 00 00    	ja     d8b <printf+0x137>$/;"	l
ccb	user/usertests.asm	/^     ccb:	83 ec 04             	sub    $0x4,%esp$/;"	l
cce	user/usertests.asm	/^     cce:	6a 0a                	push   $0xa$/;"	l
ccf	user/sh.asm	/^ ccf:	ff 24 85 ec 0f 00 00 	jmp    *0xfec(,%eax,4)$/;"	l
cd	user/cat.asm	/^  cd:	ff 37                	push   (%edi)$/;"	l
cd	user/usertests.asm	/^      cd:	ff 35 0c 5b 00 00    	push   0x5b0c$/;"	l
cd	user/zombie.asm	/^  cd:	c3                   	ret$/;"	l
cd0	user/usertests.asm	/^     cd0:	50                   	push   %eax$/;"	l
cd1	user/usertests.asm	/^     cd1:	8d 45 de             	lea    -0x22(%ebp),%eax$/;"	l
cd4	user/usertests.asm	/^     cd4:	50                   	push   %eax$/;"	l
cd5	user/usertests.asm	/^     cd5:	e8 87 28 00 00       	call   3561 <memset>$/;"	l
cd6	user/sh.asm	/^ cd6:	8b 7d e4             	mov    -0x1c(%ebp),%edi$/;"	l
cd9	user/sh.asm	/^ cd9:	8b 17                	mov    (%edi),%edx$/;"	l
cda	user/usertests.asm	/^     cda:	83 c4 10             	add    $0x10,%esp$/;"	l
cdb	user/sh.asm	/^ cdb:	83 ec 0c             	sub    $0xc,%esp$/;"	l
cdd	user/usertests.asm	/^     cdd:	bb 00 00 00 00       	mov    $0x0,%ebx$/;"	l
cde	user/sh.asm	/^ cde:	6a 01                	push   $0x1$/;"	l
ce	user/echo.asm	/^  ce:	cd 40                	int    $0x40$/;"	l
ce	user/kill.asm	/^  ce:	8a 4d 0c             	mov    0xc(%ebp),%cl$/;"	l
ce	user/mkdir.asm	/^  ce:	cd 40                	int    $0x40$/;"	l
ce	user/rm.asm	/^  ce:	cd 40                	int    $0x40$/;"	l
ce	user/zombie.asm	/^  ce:	b8 0e 00 00 00       	mov    $0xe,%eax$/;"	l
ce0	user/sh.asm	/^ ce0:	b9 0a 00 00 00       	mov    $0xa,%ecx$/;"	l
ce2	user/usertests.asm	/^     ce2:	81 fb e7 03 00 00    	cmp    $0x3e7,%ebx$/;"	l
ce5	user/sh.asm	/^ ce5:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
ce8	user/sh.asm	/^ ce8:	e8 ee fe ff ff       	call   bdb <printint>$/;"	l
ce8	user/usertests.asm	/^     ce8:	7f 4a                	jg     d34 <sharedfd+0xb5>$/;"	l
cea	user/usertests.asm	/^     cea:	83 ec 04             	sub    $0x4,%esp$/;"	l
ced	user/sh.asm	/^ ced:	83 c7 04             	add    $0x4,%edi$/;"	l
ced	user/usertests.asm	/^     ced:	6a 0a                	push   $0xa$/;"	l
cef	user/usertests.asm	/^     cef:	8d 45 de             	lea    -0x22(%ebp),%eax$/;"	l
cf	user/cat.asm	/^  cf:	e8 6c 00 00 00       	call   140 <open>$/;"	l
cf	user/grep.asm	/^  cf:	80 3e 5e             	cmpb   $0x5e,(%esi)$/;"	l
cf	user/stressfs.asm	/^  cf:	50                   	push   %eax$/;"	l
cf	user/wc.asm	/^  cf:	ff 71 fc             	push   -0x4(%ecx)$/;"	l
cf0	user/sh.asm	/^ cf0:	89 7d e4             	mov    %edi,-0x1c(%ebp)$/;"	l
cf2	user/usertests.asm	/^     cf2:	50                   	push   %eax$/;"	l
cf3	user/sh.asm	/^ cf3:	83 c4 10             	add    $0x10,%esp$/;"	l
cf3	user/usertests.asm	/^     cf3:	56                   	push   %esi$/;"	l
cf4	user/usertests.asm	/^     cf4:	e8 b3 29 00 00       	call   36ac <write>$/;"	l
cf6	user/sh.asm	/^ cf6:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
cf9	user/usertests.asm	/^     cf9:	83 c4 10             	add    $0x10,%esp$/;"	l
cfb	user/sh.asm	/^ cfb:	eb 83                	jmp    c80 <printf+0x2c>$/;"	l
cfc	user/usertests.asm	/^     cfc:	83 f8 0a             	cmp    $0xa,%eax$/;"	l
cfd	user/sh.asm	/^ cfd:	8b 7d e4             	mov    -0x1c(%ebp),%edi$/;"	l
cff	user/usertests.asm	/^     cff:	75 21                	jne    d22 <sharedfd+0xa3>$/;"	l
cgaputc	console.c	/^cgaputc(int c)$/;"	f	typeref:typename:void	file:
chan	proc.h	/^  void *chan;                  \/\/ If non-zero, sleeping on chan$/;"	m	struct:proc	typeref:typename:void *
char	user/cat.asm	/^char buf[512];$/;"	l
char	user/init.asm	/^char *argv[] = { "sh", 0 };$/;"	l
char	user/sh.asm	/^char symbols[] = "<|>&;()";$/;"	l
char	user/sh.asm	/^char whitespace[] = " \\t\\r\\n\\v";$/;"	l
char	user/usertests.asm	/^char uninit[10000];$/;"	l
char	user/wc.asm	/^char buf[512];$/;"	l
checksum	mp.h	/^  uchar checksum;               \/\/ all bytes must add up to 0$/;"	m	struct:mp	typeref:typename:uchar
checksum	mp.h	/^  uchar checksum;               \/\/ all bytes must add up to 0$/;"	m	struct:mpconf	typeref:typename:uchar
clean	Makefile	/^clean:$/;"	t
clean	user/Makefile	/^clean:$/;"	t
clearpteu	vm.c	/^clearpteu(pde_t *pgdir, char *uva)$/;"	f	typeref:typename:void
cli	x86.h	/^cli(void)$/;"	f	typeref:typename:void
cmd	user/sh.asm	/^      cmd = redircmd(cmd, q, eq, O_RDONLY, 0);$/;"	d
cmd	user/sh.asm	/^      cmd = redircmd(cmd, q, eq, O_WRONLY|O_CREATE, 1);$/;"	d
cmd	user/sh.asm	/^    cmd = backcmd(cmd);$/;"	d
cmd	user/sh.asm	/^    cmd = listcmd(cmd, parseline(ps, es));$/;"	d
cmd	user/sh.asm	/^    cmd = pipecmd(cmd, parsepipe(ps, es));$/;"	d
cmd	user/sh.asm	/^  cmd = (struct execcmd*)ret;$/;"	d
cmd	user/sh.asm	/^  cmd = malloc(sizeof(*cmd));$/;"	d
cmd	user/sh.asm	/^  cmd = parseexec(ps, es);$/;"	d
cmd	user/sh.asm	/^  cmd = parseline(&s, es);$/;"	d
cmd	user/sh.asm	/^  cmd = parseline(ps, es);$/;"	d
cmd	user/sh.asm	/^  cmd = parsepipe(ps, es);$/;"	d
cmd	user/sh.asm	/^  cmd = parseredirs(cmd, ps, es);$/;"	d
cmd	user/sh.c	/^  struct cmd *cmd;$/;"	m	struct:backcmd	typeref:struct:cmd *	file:
cmd	user/sh.c	/^  struct cmd *cmd;$/;"	m	struct:redircmd	typeref:struct:cmd *	file:
cmd	user/sh.c	/^struct cmd {$/;"	s	file:
cmos_read	lapic.c	/^cmos_read(uint reg)$/;"	f	typeref:typename:uint	file:
cmostime	lapic.c	/^cmostime(struct rtcdate *r)$/;"	f	typeref:typename:void
code	kernel.asm	/^  code = P2V(0x7000);$/;"	d
commit	log.c	/^commit()$/;"	f	typeref:typename:void	file:
committing	log.c	/^  int committing;  \/\/ in commit(), please wait.$/;"	m	struct:log	typeref:typename:int	file:
concreate	user/usertests.c	/^concreate(void)$/;"	f	typeref:typename:void
conf	kernel.asm	/^  conf = (struct mpconf*) P2V((uint) mp->physaddr);$/;"	d
cons	console.c	/^} cons;$/;"	v	typeref:struct:__anon96a473a90108
consoleinit	console.c	/^consoleinit(void)$/;"	f	typeref:typename:void
consoleintr	console.c	/^consoleintr(int (*getc)(void))$/;"	f	typeref:typename:void
consoleread	console.c	/^consoleread(struct inode *ip, char *dst, int n)$/;"	f	typeref:typename:int
consolewrite	console.c	/^consolewrite(struct inode *ip, char *buf, int n)$/;"	f	typeref:typename:int
consputc	console.c	/^consputc(int c)$/;"	f	typeref:typename:void
context	proc.h	/^  struct context *context;     \/\/ swtch() here to run process$/;"	m	struct:proc	typeref:struct:context *
context	proc.h	/^struct context {$/;"	s
copyout	vm.c	/^copyout(pde_t *pgdir, uint va, void *p, uint len)$/;"	f	typeref:typename:int
copyuvm	vm.c	/^copyuvm(pde_t *pgdir, uint sz)$/;"	f	typeref:typename:pde_t *
cprintf	console.c	/^cprintf(char *fmt, ...)$/;"	f	typeref:typename:void
cpu	proc.h	/^struct cpu {$/;"	s
cpu	spinlock.h	/^  struct cpu *cpu;   \/\/ The cpu holding the lock.$/;"	m	struct:spinlock	typeref:struct:cpu *
cpuid	proc.c	/^cpuid() {$/;"	f	typeref:typename:int
cpus	mp.c	/^struct cpu cpus[NCPU];$/;"	v	typeref:struct:cpu[]
cr3	mmu.h	/^  void *cr3;         \/\/ Page directory base$/;"	m	struct:taskstate	typeref:typename:void *
create	sysfile.c	/^create(char *path, short type, short major, short minor)$/;"	f	typeref:struct:inode *	file:
createdelete	user/usertests.c	/^createdelete(void)$/;"	f	typeref:typename:void
createtest	user/usertests.c	/^createtest(void)$/;"	f	typeref:typename:void
crt	console.c	/^static ushort *crt = (ushort*)P2V(0xb8000);  \/\/ CGA memory$/;"	v	typeref:typename:ushort *	file:
cs	mmu.h	/^  uint cs : 16;         \/\/ code segment selector$/;"	m	struct:gatedesc	typeref:typename:uint:16
cs	mmu.h	/^  ushort cs;$/;"	m	struct:taskstate	typeref:typename:ushort
cs	x86.h	/^  ushort cs;$/;"	m	struct:trapframe	typeref:typename:ushort
ctlmap	kbd.h	/^static uchar ctlmap[256] =$/;"	v	typeref:typename:uchar[256]
cwd	proc.h	/^  struct inode *cwd;           \/\/ Current directory$/;"	m	struct:proc	typeref:struct:inode *
d	kernel.asm	/^  d = dst;$/;"	d
d	user/echo.asm	/^   d:	57                   	push   %edi$/;"	l
d	user/init.asm	/^   d:	53                   	push   %ebx$/;"	l
d	user/kill.asm	/^   d:	57                   	push   %edi$/;"	l
d	user/ln.asm	/^   d:	53                   	push   %ebx$/;"	l
d	user/mkdir.asm	/^   d:	57                   	push   %edi$/;"	l
d	user/rm.asm	/^   d:	57                   	push   %edi$/;"	l
d	user/stressfs.asm	/^   d:	57                   	push   %edi$/;"	l
d	user/zombie.asm	/^   d:	51                   	push   %ecx$/;"	l
d0	user/echo.asm	/^  d0:	c3                   	ret$/;"	l
d0	user/forktest.asm	/^  d0:	e8 92 01 00 00       	call   267 <exit>$/;"	l
d0	user/ls.asm	/^  d0:	0f bf f0             	movswl %ax,%esi$/;"	l
d0	user/mkdir.asm	/^  d0:	c3                   	ret$/;"	l
d0	user/rm.asm	/^  d0:	c3                   	ret$/;"	l
d0	user/stressfs.asm	/^  d0:	e8 ff 01 00 00       	call   2d4 <open>$/;"	l
d00	user/sh.asm	/^ d00:	8b 17                	mov    (%edi),%edx$/;"	l
d01	user/usertests.asm	/^     d01:	43                   	inc    %ebx$/;"	l
d02	user/sh.asm	/^ d02:	83 ec 0c             	sub    $0xc,%esp$/;"	l
d02	user/usertests.asm	/^     d02:	eb de                	jmp    ce2 <sharedfd+0x63>$/;"	l
d04	user/usertests.asm	/^     d04:	83 ec 08             	sub    $0x8,%esp$/;"	l
d05	user/sh.asm	/^ d05:	6a 00                	push   $0x0$/;"	l
d07	user/sh.asm	/^ d07:	b9 10 00 00 00       	mov    $0x10,%ecx$/;"	l
d07	user/usertests.asm	/^     d07:	68 64 4b 00 00       	push   $0x4b64$/;"	l
d0c	user/sh.asm	/^ d0c:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
d0c	user/usertests.asm	/^     d0c:	6a 01                	push   $0x1$/;"	l
d0e	user/usertests.asm	/^     d0e:	e8 ac 2a 00 00       	call   37bf <printf>$/;"	l
d0f	user/sh.asm	/^ d0f:	e8 c7 fe ff ff       	call   bdb <printint>$/;"	l
d1	user/echo.asm	/^  d1:	b8 0a 00 00 00       	mov    $0xa,%eax$/;"	l
d1	user/init.asm	/^  d1:	6a 01                	push   $0x1$/;"	l
d1	user/kill.asm	/^  d1:	eb 01                	jmp    d4 <strchr+0xc>$/;"	l
d1	user/ln.asm	/^  d1:	cd 40                	int    $0x40$/;"	l
d1	user/mkdir.asm	/^  d1:	b8 08 00 00 00       	mov    $0x8,%eax$/;"	l
d1	user/rm.asm	/^  d1:	b8 08 00 00 00       	mov    $0x8,%eax$/;"	l
d1	user/sh.asm	/^  d1:	6a 02                	push   $0x2$/;"	l
d13	user/usertests.asm	/^     d13:	83 c4 10             	add    $0x10,%esp$/;"	l
d14	user/sh.asm	/^ d14:	83 c7 04             	add    $0x4,%edi$/;"	l
d16	user/usertests.asm	/^     d16:	e9 d5 00 00 00       	jmp    df0 <sharedfd+0x171>$/;"	l
d17	user/sh.asm	/^ d17:	89 7d e4             	mov    %edi,-0x1c(%ebp)$/;"	l
d1a	user/sh.asm	/^ d1a:	83 c4 10             	add    $0x10,%esp$/;"	l
d1b	user/usertests.asm	/^     d1b:	b8 70 00 00 00       	mov    $0x70,%eax$/;"	l
d1d	user/sh.asm	/^ d1d:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
d2	user/grep.asm	/^  d2:	75 12                	jne    e6 <match+0x22>$/;"	l
d2	user/wc.asm	/^  d2:	55                   	push   %ebp$/;"	l
d20	user/usertests.asm	/^     d20:	eb a9                	jmp    ccb <sharedfd+0x4c>$/;"	l
d22	user/sh.asm	/^ d22:	e9 59 ff ff ff       	jmp    c80 <printf+0x2c>$/;"	l
d22	user/usertests.asm	/^     d22:	83 ec 08             	sub    $0x8,%esp$/;"	l
d25	user/usertests.asm	/^     d25:	68 90 4b 00 00       	push   $0x4b90$/;"	l
d27	user/sh.asm	/^ d27:	8b 45 e4             	mov    -0x1c(%ebp),%eax$/;"	l
d2a	user/sh.asm	/^ d2a:	8b 30                	mov    (%eax),%esi$/;"	l
d2a	user/usertests.asm	/^     d2a:	6a 01                	push   $0x1$/;"	l
d2c	user/sh.asm	/^ d2c:	83 c0 04             	add    $0x4,%eax$/;"	l
d2c	user/usertests.asm	/^     d2c:	e8 8e 2a 00 00       	call   37bf <printf>$/;"	l
d2f	user/sh.asm	/^ d2f:	89 45 e4             	mov    %eax,-0x1c(%ebp)$/;"	l
d3	user/init.asm	/^  d3:	e8 40 01 00 00       	call   218 <printf>$/;"	l
d3	user/kill.asm	/^  d3:	40                   	inc    %eax$/;"	l
d3	user/ln.asm	/^  d3:	c3                   	ret$/;"	l
d3	user/ls.asm	/^  d3:	66 83 f8 01          	cmp    $0x1,%ax$/;"	l
d3	user/sh.asm	/^  d3:	e8 7c 0b 00 00       	call   c54 <printf>$/;"	l
d3	user/usertests.asm	/^      d3:	e8 e7 36 00 00       	call   37bf <printf>$/;"	l
d3	user/wc.asm	/^  d3:	89 e5                	mov    %esp,%ebp$/;"	l
d3	user/zombie.asm	/^  d3:	cd 40                	int    $0x40$/;"	l
d31	user/usertests.asm	/^     d31:	83 c4 10             	add    $0x10,%esp$/;"	l
d32	user/sh.asm	/^ d32:	85 f6                	test   %esi,%esi$/;"	l
d34	user/sh.asm	/^ d34:	75 13                	jne    d49 <printf+0xf5>$/;"	l
d34	user/usertests.asm	/^     d34:	85 ff                	test   %edi,%edi$/;"	l
d36	user/sh.asm	/^ d36:	be e4 0f 00 00       	mov    $0xfe4,%esi$/;"	l
d36	user/usertests.asm	/^     d36:	74 4d                	je     d85 <sharedfd+0x106>$/;"	l
d38	user/usertests.asm	/^     d38:	e8 57 29 00 00       	call   3694 <wait>$/;"	l
d3b	user/sh.asm	/^ d3b:	eb 0c                	jmp    d49 <printf+0xf5>$/;"	l
d3d	user/sh.asm	/^ d3d:	0f be d2             	movsbl %dl,%edx$/;"	l
d3d	user/usertests.asm	/^     d3d:	83 ec 0c             	sub    $0xc,%esp$/;"	l
d4	user/cat.asm	/^  d4:	89 c3                	mov    %eax,%ebx$/;"	l
d4	user/grep.asm	/^  d4:	83 ec 08             	sub    $0x8,%esp$/;"	l
d4	user/kill.asm	/^  d4:	8a 10                	mov    (%eax),%dl$/;"	l
d4	user/ln.asm	/^  d4:	b8 09 00 00 00       	mov    $0x9,%eax$/;"	l
d40	user/sh.asm	/^ d40:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
d40	user/usertests.asm	/^     d40:	56                   	push   %esi$/;"	l
d41	user/usertests.asm	/^     d41:	e8 6e 29 00 00       	call   36b4 <close>$/;"	l
d43	user/sh.asm	/^ d43:	e8 79 fe ff ff       	call   bc1 <putc>$/;"	l
d46	user/usertests.asm	/^     d46:	83 c4 08             	add    $0x8,%esp$/;"	l
d48	user/sh.asm	/^ d48:	46                   	inc    %esi$/;"	l
d49	user/sh.asm	/^ d49:	8a 16                	mov    (%esi),%dl$/;"	l
d49	user/usertests.asm	/^     d49:	6a 00                	push   $0x0$/;"	l
d4b	user/sh.asm	/^ d4b:	84 d2                	test   %dl,%dl$/;"	l
d4b	user/usertests.asm	/^     d4b:	68 9f 3e 00 00       	push   $0x3e9f$/;"	l
d4d	user/sh.asm	/^ d4d:	75 ee                	jne    d3d <printf+0xe9>$/;"	l
d4f	user/sh.asm	/^ d4f:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
d5	user/forktest.asm	/^  d5:	55                   	push   %ebp$/;"	l
d5	user/stressfs.asm	/^  d5:	89 c6                	mov    %eax,%esi$/;"	l
d5	user/wc.asm	/^  d5:	57                   	push   %edi$/;"	l
d5	user/zombie.asm	/^  d5:	c3                   	ret$/;"	l
d50	user/usertests.asm	/^     d50:	e8 77 29 00 00       	call   36cc <open>$/;"	l
d54	user/sh.asm	/^ d54:	e9 27 ff ff ff       	jmp    c80 <printf+0x2c>$/;"	l
d55	user/usertests.asm	/^     d55:	89 c7                	mov    %eax,%edi$/;"	l
d57	user/usertests.asm	/^     d57:	83 c4 10             	add    $0x10,%esp$/;"	l
d59	user/sh.asm	/^ d59:	8b 7d e4             	mov    -0x1c(%ebp),%edi$/;"	l
d5a	user/usertests.asm	/^     d5a:	85 c0                	test   %eax,%eax$/;"	l
d5c	user/sh.asm	/^ d5c:	0f be 17             	movsbl (%edi),%edx$/;"	l
d5c	user/usertests.asm	/^     d5c:	78 2c                	js     d8a <sharedfd+0x10b>$/;"	l
d5e	user/usertests.asm	/^     d5e:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
d5f	user/sh.asm	/^ d5f:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
d6	user/cat.asm	/^  d6:	83 c4 10             	add    $0x10,%esp$/;"	l
d6	user/echo.asm	/^  d6:	cd 40                	int    $0x40$/;"	l
d6	user/forktest.asm	/^  d6:	89 e5                	mov    %esp,%ebp$/;"	l
d6	user/kill.asm	/^  d6:	84 d2                	test   %dl,%dl$/;"	l
d6	user/mkdir.asm	/^  d6:	cd 40                	int    $0x40$/;"	l
d6	user/rm.asm	/^  d6:	cd 40                	int    $0x40$/;"	l
d6	user/wc.asm	/^  d6:	56                   	push   %esi$/;"	l
d62	user/sh.asm	/^ d62:	e8 5a fe ff ff       	call   bc1 <putc>$/;"	l
d63	user/usertests.asm	/^     d63:	bb 00 00 00 00       	mov    $0x0,%ebx$/;"	l
d67	user/sh.asm	/^ d67:	83 c7 04             	add    $0x4,%edi$/;"	l
d68	user/usertests.asm	/^     d68:	83 ec 04             	sub    $0x4,%esp$/;"	l
d6a	user/sh.asm	/^ d6a:	89 7d e4             	mov    %edi,-0x1c(%ebp)$/;"	l
d6b	user/usertests.asm	/^     d6b:	6a 0a                	push   $0xa$/;"	l
d6d	user/sh.asm	/^ d6d:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
d6d	user/usertests.asm	/^     d6d:	8d 45 de             	lea    -0x22(%ebp),%eax$/;"	l
d7	user/grep.asm	/^  d7:	53                   	push   %ebx$/;"	l
d7	user/ls.asm	/^  d7:	0f 84 8d 00 00 00    	je     16a <ls+0xdf>$/;"	l
d7	user/stressfs.asm	/^  d7:	83 c4 10             	add    $0x10,%esp$/;"	l
d7	user/wc.asm	/^  d7:	53                   	push   %ebx$/;"	l
d70	user/usertests.asm	/^     d70:	50                   	push   %eax$/;"	l
d71	user/usertests.asm	/^     d71:	57                   	push   %edi$/;"	l
d72	user/sh.asm	/^ d72:	e9 09 ff ff ff       	jmp    c80 <printf+0x2c>$/;"	l
d72	user/usertests.asm	/^     d72:	e8 2d 29 00 00       	call   36a4 <read>$/;"	l
d77	user/sh.asm	/^ d77:	89 fa                	mov    %edi,%edx$/;"	l
d77	user/usertests.asm	/^     d77:	83 c4 10             	add    $0x10,%esp$/;"	l
d79	user/sh.asm	/^ d79:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
d7a	user/usertests.asm	/^     d7a:	85 c0                	test   %eax,%eax$/;"	l
d7c	user/sh.asm	/^ d7c:	e8 40 fe ff ff       	call   bc1 <putc>$/;"	l
d7c	user/usertests.asm	/^     d7c:	7e 38                	jle    db6 <sharedfd+0x137>$/;"	l
d7e	user/usertests.asm	/^     d7e:	ba 00 00 00 00       	mov    $0x0,%edx$/;"	l
d8	user/echo.asm	/^  d8:	c3                   	ret$/;"	l
d8	user/forktest.asm	/^  d8:	83 e4 f0             	and    $0xfffffff0,%esp$/;"	l
d8	user/grep.asm	/^  d8:	46                   	inc    %esi$/;"	l
d8	user/init.asm	/^  d8:	e8 08 00 00 00       	call   e5 <exit>$/;"	l
d8	user/kill.asm	/^  d8:	74 06                	je     e0 <strchr+0x18>$/;"	l
d8	user/mkdir.asm	/^  d8:	c3                   	ret$/;"	l
d8	user/rm.asm	/^  d8:	c3                   	ret$/;"	l
d8	user/sh.asm	/^  d8:	83 c4 10             	add    $0x10,%esp$/;"	l
d8	user/usertests.asm	/^      d8:	e8 af 35 00 00       	call   368c <exit>$/;"	l
d8	user/wc.asm	/^  d8:	51                   	push   %ecx$/;"	l
d81	user/sh.asm	/^ d81:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
d83	user/usertests.asm	/^     d83:	eb 1e                	jmp    da3 <sharedfd+0x124>$/;"	l
d85	user/usertests.asm	/^     d85:	e8 02 29 00 00       	call   368c <exit>$/;"	l
d86	user/sh.asm	/^ d86:	e9 f5 fe ff ff       	jmp    c80 <printf+0x2c>$/;"	l
d8a	user/usertests.asm	/^     d8a:	83 ec 08             	sub    $0x8,%esp$/;"	l
d8b	user/sh.asm	/^ d8b:	ba 25 00 00 00       	mov    $0x25,%edx$/;"	l
d8d	user/usertests.asm	/^     d8d:	68 b0 4b 00 00       	push   $0x4bb0$/;"	l
d9	user/cat.asm	/^  d9:	85 c0                	test   %eax,%eax$/;"	l
d9	user/echo.asm	/^  d9:	b8 0b 00 00 00       	mov    $0xb,%eax$/;"	l
d9	user/grep.asm	/^  d9:	56                   	push   %esi$/;"	l
d9	user/ln.asm	/^  d9:	cd 40                	int    $0x40$/;"	l
d9	user/mkdir.asm	/^  d9:	b8 13 00 00 00       	mov    $0x13,%eax$/;"	l
d9	user/rm.asm	/^  d9:	b8 13 00 00 00       	mov    $0x13,%eax$/;"	l
d9	user/wc.asm	/^  d9:	83 ec 18             	sub    $0x18,%esp$/;"	l
d90	user/sh.asm	/^ d90:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
d92	user/usertests.asm	/^     d92:	6a 01                	push   $0x1$/;"	l
d93	user/sh.asm	/^ d93:	e8 29 fe ff ff       	call   bc1 <putc>$/;"	l
d94	user/usertests.asm	/^     d94:	e8 26 2a 00 00       	call   37bf <printf>$/;"	l
d98	user/sh.asm	/^ d98:	89 fa                	mov    %edi,%edx$/;"	l
d99	user/usertests.asm	/^     d99:	83 c4 10             	add    $0x10,%esp$/;"	l
d9a	user/sh.asm	/^ d9a:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
d9c	user/usertests.asm	/^     d9c:	eb 52                	jmp    df0 <sharedfd+0x171>$/;"	l
d9d	user/sh.asm	/^ d9d:	e8 1f fe ff ff       	call   bc1 <putc>$/;"	l
d9e	user/usertests.asm	/^     d9e:	3c 70                	cmp    $0x70,%al$/;"	l
da	user/grep.asm	/^  da:	e8 66 ff ff ff       	call   45 <matchhere>$/;"	l
da	user/kill.asm	/^  da:	38 ca                	cmp    %cl,%dl$/;"	l
da	user/stressfs.asm	/^  da:	bb 00 00 00 00       	mov    $0x0,%ebx$/;"	l
da0	user/usertests.asm	/^     da0:	74 11                	je     db3 <sharedfd+0x134>$/;"	l
da2	user/sh.asm	/^ da2:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
da2	user/usertests.asm	/^     da2:	42                   	inc    %edx$/;"	l
da3	user/usertests.asm	/^     da3:	83 fa 09             	cmp    $0x9,%edx$/;"	l
da6	user/usertests.asm	/^     da6:	77 c0                	ja     d68 <sharedfd+0xe9>$/;"	l
da7	user/sh.asm	/^ da7:	e9 d4 fe ff ff       	jmp    c80 <printf+0x2c>$/;"	l
da8	user/usertests.asm	/^     da8:	8a 44 15 de          	mov    -0x22(%ebp,%edx,1),%al$/;"	l
dac	user/sh.asm	/^ dac:	8d 65 f4             	lea    -0xc(%ebp),%esp$/;"	l
dac	user/usertests.asm	/^     dac:	3c 63                	cmp    $0x63,%al$/;"	l
dae	user/usertests.asm	/^     dae:	75 ee                	jne    d9e <sharedfd+0x11f>$/;"	l
daf	user/sh.asm	/^ daf:	5b                   	pop    %ebx$/;"	l
data	buf.h	/^  uchar data[BSIZE];$/;"	m	struct:buf	typeref:typename:uchar[]
data	ioapic.c	/^  uint data;$/;"	m	struct:ioapic	typeref:typename:uint	file:
data	kernel.asm	/^    data = (shift & E0ESC ? data : data & 0x7F);$/;"	d
data	kernel.asm	/^  data = inb(KBDATAP);$/;"	d
data	kernel.ld	/^	PROVIDE(data = .);$/;"	s	assignment:provide
data	pipe.c	/^  char data[PIPESIZE];$/;"	m	struct:pipe	typeref:typename:char[]	file:
day	date.h	/^  uint day;$/;"	m	struct:rtcdate	typeref:typename:uint
db	mmu.h	/^  uint db : 1;         \/\/ 0 = 16-bit segment, 1 = 32-bit segment$/;"	m	struct:segdesc	typeref:typename:uint:1
db	user/cat.asm	/^  db:	79 c9                	jns    a6 <main+0x3a>$/;"	l
db	user/forktest.asm	/^  db:	e8 45 ff ff ff       	call   25 <forktest>$/;"	l
db	user/ln.asm	/^  db:	c3                   	ret$/;"	l
db	user/sh.asm	/^  db:	e8 41 0a 00 00       	call   b21 <exit>$/;"	l
db0	user/sh.asm	/^ db0:	5e                   	pop    %esi$/;"	l
db0	user/usertests.asm	/^     db0:	43                   	inc    %ebx$/;"	l
db1	user/sh.asm	/^ db1:	5f                   	pop    %edi$/;"	l
db1	user/usertests.asm	/^     db1:	eb eb                	jmp    d9e <sharedfd+0x11f>$/;"	l
db2	user/sh.asm	/^ db2:	5d                   	pop    %ebp$/;"	l
db3	user/sh.asm	/^ db3:	c3                   	ret$/;"	l
db3	user/usertests.asm	/^     db3:	46                   	inc    %esi$/;"	l
db4	user/sh.asm	/^ db4:	55                   	push   %ebp$/;"	l
db4	user/usertests.asm	/^     db4:	eb ec                	jmp    da2 <sharedfd+0x123>$/;"	l
db5	user/sh.asm	/^ db5:	89 e5                	mov    %esp,%ebp$/;"	l
db6	user/usertests.asm	/^     db6:	83 ec 0c             	sub    $0xc,%esp$/;"	l
db7	user/sh.asm	/^ db7:	57                   	push   %edi$/;"	l
db8	user/sh.asm	/^ db8:	56                   	push   %esi$/;"	l
db9	user/sh.asm	/^ db9:	53                   	push   %ebx$/;"	l
db9	user/usertests.asm	/^     db9:	57                   	push   %edi$/;"	l
dba	user/sh.asm	/^ dba:	8b 5d 08             	mov    0x8(%ebp),%ebx$/;"	l
dba	user/usertests.asm	/^     dba:	e8 f5 28 00 00       	call   36b4 <close>$/;"	l
dbd	user/sh.asm	/^ dbd:	8d 4b f8             	lea    -0x8(%ebx),%ecx$/;"	l
dbf	user/usertests.asm	/^     dbf:	c7 04 24 9f 3e 00 00 	movl   $0x3e9f,(%esp)$/;"	l
dc	user/kill.asm	/^  dc:	75 f5                	jne    d3 <strchr+0xb>$/;"	l
dc	user/ln.asm	/^  dc:	b8 0a 00 00 00       	mov    $0xa,%eax$/;"	l
dc	user/wc.asm	/^  dc:	8b 01                	mov    (%ecx),%eax$/;"	l
dc0	user/sh.asm	/^ dc0:	a1 44 16 00 00       	mov    0x1644,%eax$/;"	l
dc5	user/sh.asm	/^ dc5:	eb 02                	jmp    dc9 <free+0x15>$/;"	l
dc6	user/usertests.asm	/^     dc6:	e8 11 29 00 00       	call   36dc <unlink>$/;"	l
dc7	user/sh.asm	/^ dc7:	89 d0                	mov    %edx,%eax$/;"	l
dc9	user/sh.asm	/^ dc9:	39 c8                	cmp    %ecx,%eax$/;"	l
dcb	user/sh.asm	/^ dcb:	73 04                	jae    dd1 <free+0x1d>$/;"	l
dcb	user/usertests.asm	/^     dcb:	83 c4 10             	add    $0x10,%esp$/;"	l
dcd	user/sh.asm	/^ dcd:	3b 08                	cmp    (%eax),%ecx$/;"	l
dce	user/usertests.asm	/^     dce:	81 fb 10 27 00 00    	cmp    $0x2710,%ebx$/;"	l
dcf	user/sh.asm	/^ dcf:	72 12                	jb     de3 <free+0x2f>$/;"	l
dd	user/cat.asm	/^  dd:	83 ec 04             	sub    $0x4,%esp$/;"	l
dd	user/init.asm	/^  dd:	b8 01 00 00 00       	mov    $0x1,%eax$/;"	l
dd	user/ls.asm	/^  dd:	66 83 f8 02          	cmp    $0x2,%ax$/;"	l
dd	user/usertests.asm	/^      dd:	55                   	push   %ebp$/;"	l
dd1	user/sh.asm	/^ dd1:	8b 10                	mov    (%eax),%edx$/;"	l
dd3	user/sh.asm	/^ dd3:	39 d0                	cmp    %edx,%eax$/;"	l
dd4	user/usertests.asm	/^     dd4:	75 22                	jne    df8 <sharedfd+0x179>$/;"	l
dd5	user/sh.asm	/^ dd5:	72 f0                	jb     dc7 <free+0x13>$/;"	l
dd6	user/usertests.asm	/^     dd6:	81 fe 10 27 00 00    	cmp    $0x2710,%esi$/;"	l
dd7	user/sh.asm	/^ dd7:	39 c8                	cmp    %ecx,%eax$/;"	l
dd9	user/sh.asm	/^ dd9:	72 08                	jb     de3 <free+0x2f>$/;"	l
ddb	user/sh.asm	/^ ddb:	39 d1                	cmp    %edx,%ecx$/;"	l
ddc	user/usertests.asm	/^     ddc:	75 1a                	jne    df8 <sharedfd+0x179>$/;"	l
ddd	user/sh.asm	/^ ddd:	72 04                	jb     de3 <free+0x2f>$/;"	l
dde	user/usertests.asm	/^     dde:	83 ec 08             	sub    $0x8,%esp$/;"	l
ddf	user/sh.asm	/^ ddf:	89 d0                	mov    %edx,%eax$/;"	l
de	user/echo.asm	/^  de:	cd 40                	int    $0x40$/;"	l
de	user/kill.asm	/^  de:	eb 05                	jmp    e5 <strchr+0x1d>$/;"	l
de	user/mkdir.asm	/^  de:	cd 40                	int    $0x40$/;"	l
de	user/rm.asm	/^  de:	cd 40                	int    $0x40$/;"	l
de	user/usertests.asm	/^      de:	89 e5                	mov    %esp,%ebp$/;"	l
de	user/wc.asm	/^  de:	89 45 e4             	mov    %eax,-0x1c(%ebp)$/;"	l
de1	user/sh.asm	/^ de1:	eb e6                	jmp    dc9 <free+0x15>$/;"	l
de1	user/usertests.asm	/^     de1:	68 a8 3e 00 00       	push   $0x3ea8$/;"	l
de3	user/sh.asm	/^ de3:	8b 73 fc             	mov    -0x4(%ebx),%esi$/;"	l
de6	user/sh.asm	/^ de6:	8d 3c f1             	lea    (%ecx,%esi,8),%edi$/;"	l
de6	user/usertests.asm	/^     de6:	6a 01                	push   $0x1$/;"	l
de8	user/usertests.asm	/^     de8:	e8 d2 29 00 00       	call   37bf <printf>$/;"	l
de9	user/sh.asm	/^ de9:	8b 10                	mov    (%eax),%edx$/;"	l
deallocuvm	vm.c	/^deallocuvm(pde_t *pgdir, uint oldsz, uint newsz)$/;"	f	typeref:typename:int
deb	user/sh.asm	/^ deb:	39 d7                	cmp    %edx,%edi$/;"	l
ded	user/sh.asm	/^ ded:	74 19                	je     e08 <free+0x54>$/;"	l
ded	user/usertests.asm	/^     ded:	83 c4 10             	add    $0x10,%esp$/;"	l
def	user/sh.asm	/^ def:	89 53 f8             	mov    %edx,-0x8(%ebx)$/;"	l
default	kernel.asm	/^    default:$/;"	l
dev	buf.h	/^  uint dev;$/;"	m	struct:buf	typeref:typename:uint
dev	file.h	/^  uint dev;           \/\/ Device number$/;"	m	struct:inode	typeref:typename:uint
dev	log.c	/^  int dev;$/;"	m	struct:log	typeref:typename:int	file:
dev	stat.h	/^  int dev;     \/\/ File system's disk device$/;"	m	struct:stat	typeref:typename:int
devsw	file.c	/^struct devsw devsw[NDEV];$/;"	v	typeref:struct:devsw[]
devsw	file.h	/^struct devsw {$/;"	s
df	user/grep.asm	/^  df:	83 c4 10             	add    $0x10,%esp$/;"	l
df	user/stressfs.asm	/^  df:	eb 19                	jmp    fa <main+0xfa>$/;"	l
df0	user/usertests.asm	/^     df0:	8d 65 f4             	lea    -0xc(%ebp),%esp$/;"	l
df2	user/sh.asm	/^ df2:	8b 50 04             	mov    0x4(%eax),%edx$/;"	l
df3	user/usertests.asm	/^     df3:	5b                   	pop    %ebx$/;"	l
df4	user/usertests.asm	/^     df4:	5e                   	pop    %esi$/;"	l
df5	user/sh.asm	/^ df5:	8d 34 d0             	lea    (%eax,%edx,8),%esi$/;"	l
df5	user/usertests.asm	/^     df5:	5f                   	pop    %edi$/;"	l
df6	user/usertests.asm	/^     df6:	5d                   	pop    %ebp$/;"	l
df7	user/usertests.asm	/^     df7:	c3                   	ret$/;"	l
df8	user/sh.asm	/^ df8:	39 ce                	cmp    %ecx,%esi$/;"	l
df8	user/usertests.asm	/^     df8:	56                   	push   %esi$/;"	l
df9	user/usertests.asm	/^     df9:	53                   	push   %ebx$/;"	l
dfa	user/sh.asm	/^ dfa:	74 1b                	je     e17 <free+0x63>$/;"	l
dfa	user/usertests.asm	/^     dfa:	68 b5 3e 00 00       	push   $0x3eb5$/;"	l
dfc	user/sh.asm	/^ dfc:	89 08                	mov    %ecx,(%eax)$/;"	l
dfe	user/sh.asm	/^ dfe:	a3 44 16 00 00       	mov    %eax,0x1644$/;"	l
dff	user/usertests.asm	/^     dff:	6a 01                	push   $0x1$/;"	l
dinode	fs.h	/^struct dinode {$/;"	s
dirent	fs.h	/^struct dirent {$/;"	s
dirfile	user/usertests.c	/^dirfile(void)$/;"	f	typeref:typename:void
dirlink	fs.c	/^dirlink(struct inode *dp, char *name, uint inum)$/;"	f	typeref:typename:int
dirlookup	fs.c	/^dirlookup(struct inode *dp, char *name, uint *poff)$/;"	f	typeref:struct:inode *
dirtest	user/usertests.c	/^void dirtest(void)$/;"	f	typeref:typename:void
disksize	memide.c	/^static int disksize;$/;"	v	typeref:typename:int	file:
dist	Makefile	/^dist:$/;"	t
dist-test	Makefile	/^dist-test:$/;"	t
do_commit	kernel.asm	/^    do_commit = 1;$/;"	d
dpl	mmu.h	/^  uint dpl : 2;         \/\/ descriptor(meaning new) privilege level$/;"	m	struct:gatedesc	typeref:typename:uint:2
dpl	mmu.h	/^  uint dpl : 2;        \/\/ Descriptor Privilege Level$/;"	m	struct:segdesc	typeref:typename:uint:2
ds	mmu.h	/^  ushort ds;$/;"	m	struct:taskstate	typeref:typename:ushort
ds	x86.h	/^  ushort ds;$/;"	m	struct:trapframe	typeref:typename:ushort
dst	user/forktest.asm	/^  dst = vdst;$/;"	d
dst	user/grep.asm	/^  dst = vdst;$/;"	d
dst	user/kill.asm	/^  dst = vdst;$/;"	d
dst	user/ls.asm	/^  dst = vdst;$/;"	d
dst	user/sh.asm	/^  dst = vdst;$/;"	d
dst	user/stressfs.asm	/^  dst = vdst;$/;"	d
dst	user/usertests.asm	/^  dst = vdst;$/;"	d
dst	user/wc.asm	/^  dst = vdst;$/;"	d
e	console.c	/^  uint e;  \/\/ Edit index$/;"	m	struct:__anon96a473a90208	typeref:typename:uint	file:
e	kernel.asm	/^  e = addr+len;$/;"	d
e	user/echo.asm	/^   e:	56                   	push   %esi$/;"	l
e	user/init.asm	/^   e:	51                   	push   %ecx$/;"	l
e	user/kill.asm	/^   e:	56                   	push   %esi$/;"	l
e	user/ln.asm	/^   e:	51                   	push   %ecx$/;"	l
e	user/mkdir.asm	/^   e:	56                   	push   %esi$/;"	l
e	user/rm.asm	/^   e:	56                   	push   %esi$/;"	l
e	user/sh.asm	/^   e:	68 fc 0e 00 00       	push   $0xefc$/;"	l
e	user/stressfs.asm	/^   e:	56                   	push   %esi$/;"	l
e	user/zombie.asm	/^   e:	83 ec 04             	sub    $0x4,%esp$/;"	l
e0	user/cat.asm	/^  e0:	ff 37                	push   (%edi)$/;"	l
e0	user/echo.asm	/^  e0:	c3                   	ret$/;"	l
e0	user/forktest.asm	/^  e0:	e8 82 01 00 00       	call   267 <exit>$/;"	l
e0	user/kill.asm	/^  e0:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
e0	user/mkdir.asm	/^  e0:	c3                   	ret$/;"	l
e0	user/rm.asm	/^  e0:	c3                   	ret$/;"	l
e0	user/sh.asm	/^  e0:	e8 3c 0a 00 00       	call   b21 <exit>$/;"	l
e0	user/usertests.asm	/^      e0:	83 ec 10             	sub    $0x10,%esp$/;"	l
e01	user/usertests.asm	/^     e01:	e8 b9 29 00 00       	call   37bf <printf>$/;"	l
e03	user/sh.asm	/^ e03:	5b                   	pop    %ebx$/;"	l
e04	user/sh.asm	/^ e04:	5e                   	pop    %esi$/;"	l
e05	user/sh.asm	/^ e05:	5f                   	pop    %edi$/;"	l
e06	user/sh.asm	/^ e06:	5d                   	pop    %ebp$/;"	l
e06	user/usertests.asm	/^     e06:	e8 81 28 00 00       	call   368c <exit>$/;"	l
e07	user/sh.asm	/^ e07:	c3                   	ret$/;"	l
e08	user/sh.asm	/^ e08:	03 72 04             	add    0x4(%edx),%esi$/;"	l
e0b	user/sh.asm	/^ e0b:	89 73 fc             	mov    %esi,-0x4(%ebx)$/;"	l
e0b	user/usertests.asm	/^     e0b:	55                   	push   %ebp$/;"	l
e0c	user/usertests.asm	/^     e0c:	89 e5                	mov    %esp,%ebp$/;"	l
e0e	user/sh.asm	/^ e0e:	8b 10                	mov    (%eax),%edx$/;"	l
e0e	user/usertests.asm	/^     e0e:	57                   	push   %edi$/;"	l
e0f	user/usertests.asm	/^     e0f:	56                   	push   %esi$/;"	l
e1	user/echo.asm	/^  e1:	b8 0c 00 00 00       	mov    $0xc,%eax$/;"	l
e1	user/ln.asm	/^  e1:	cd 40                	int    $0x40$/;"	l
e1	user/ls.asm	/^  e1:	75 41                	jne    124 <ls+0x99>$/;"	l
e1	user/mkdir.asm	/^  e1:	b8 14 00 00 00       	mov    $0x14,%eax$/;"	l
e1	user/rm.asm	/^  e1:	b8 14 00 00 00       	mov    $0x14,%eax$/;"	l
e1	user/stressfs.asm	/^  e1:	83 ec 04             	sub    $0x4,%esp$/;"	l
e1	user/wc.asm	/^  e1:	8b 51 04             	mov    0x4(%ecx),%edx$/;"	l
e10	user/sh.asm	/^ e10:	8b 12                	mov    (%edx),%edx$/;"	l
e10	user/usertests.asm	/^     e10:	53                   	push   %ebx$/;"	l
e11	user/usertests.asm	/^     e11:	83 ec 34             	sub    $0x34,%esp$/;"	l
e12	user/sh.asm	/^ e12:	89 53 f8             	mov    %edx,-0x8(%ebx)$/;"	l
e14	user/usertests.asm	/^     e14:	8d 7d d8             	lea    -0x28(%ebp),%edi$/;"	l
e15	user/sh.asm	/^ e15:	eb db                	jmp    df2 <free+0x3e>$/;"	l
e17	user/sh.asm	/^ e17:	03 53 fc             	add    -0x4(%ebx),%edx$/;"	l
e17	user/usertests.asm	/^     e17:	be fc 51 00 00       	mov    $0x51fc,%esi$/;"	l
e1a	user/sh.asm	/^ e1a:	89 50 04             	mov    %edx,0x4(%eax)$/;"	l
e1c	user/usertests.asm	/^     e1c:	b9 04 00 00 00       	mov    $0x4,%ecx$/;"	l
e1d	user/sh.asm	/^ e1d:	8b 53 f8             	mov    -0x8(%ebx),%edx$/;"	l
e2	user/cat.asm	/^  e2:	68 b7 03 00 00       	push   $0x3b7$/;"	l
e2	user/grep.asm	/^  e2:	eb 22                	jmp    106 <match+0x42>$/;"	l
e2	user/init.asm	/^  e2:	cd 40                	int    $0x40$/;"	l
e20	user/sh.asm	/^ e20:	89 10                	mov    %edx,(%eax)$/;"	l
e21	user/usertests.asm	/^     e21:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)$/;"	l
e22	user/sh.asm	/^ e22:	eb da                	jmp    dfe <free+0x4a>$/;"	l
e23	user/usertests.asm	/^     e23:	68 ca 3e 00 00       	push   $0x3eca$/;"	l
e24	user/sh.asm	/^ e24:	55                   	push   %ebp$/;"	l
e25	user/sh.asm	/^ e25:	89 e5                	mov    %esp,%ebp$/;"	l
e27	user/sh.asm	/^ e27:	53                   	push   %ebx$/;"	l
e28	user/sh.asm	/^ e28:	83 ec 04             	sub    $0x4,%esp$/;"	l
e28	user/usertests.asm	/^     e28:	6a 01                	push   $0x1$/;"	l
e2a	user/usertests.asm	/^     e2a:	e8 90 29 00 00       	call   37bf <printf>$/;"	l
e2b	user/sh.asm	/^ e2b:	89 c3                	mov    %eax,%ebx$/;"	l
e2d	user/sh.asm	/^ e2d:	3d ff 0f 00 00       	cmp    $0xfff,%eax$/;"	l
e2f	user/usertests.asm	/^     e2f:	83 c4 10             	add    $0x10,%esp$/;"	l
e3	user/ln.asm	/^  e3:	c3                   	ret$/;"	l
e3	user/ls.asm	/^  e3:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax$/;"	l
e3	user/usertests.asm	/^      e3:	68 bf 3a 00 00       	push   $0x3abf$/;"	l
e32	user/sh.asm	/^ e32:	77 05                	ja     e39 <morecore+0x15>$/;"	l
e32	user/usertests.asm	/^     e32:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
e34	user/sh.asm	/^ e34:	bb 00 10 00 00       	mov    $0x1000,%ebx$/;"	l
e37	user/usertests.asm	/^     e37:	eb 43                	jmp    e7c <fourfiles+0x71>$/;"	l
e39	user/sh.asm	/^ e39:	8d 04 dd 00 00 00 00 	lea    0x0(,%ebx,8),%eax$/;"	l
e39	user/usertests.asm	/^     e39:	83 ec 08             	sub    $0x8,%esp$/;"	l
e3c	user/usertests.asm	/^     e3c:	68 a5 49 00 00       	push   $0x49a5$/;"	l
e4	user/grep.asm	/^  e4:	89 d3                	mov    %edx,%ebx$/;"	l
e4	user/init.asm	/^  e4:	c3                   	ret$/;"	l
e4	user/ln.asm	/^  e4:	b8 0b 00 00 00       	mov    $0xb,%eax$/;"	l
e4	user/stressfs.asm	/^  e4:	68 00 02 00 00       	push   $0x200$/;"	l
e4	user/wc.asm	/^  e4:	89 55 e0             	mov    %edx,-0x20(%ebp)$/;"	l
e40	user/sh.asm	/^ e40:	83 ec 0c             	sub    $0xc,%esp$/;"	l
e41	user/usertests.asm	/^     e41:	6a 01                	push   $0x1$/;"	l
e43	user/sh.asm	/^ e43:	50                   	push   %eax$/;"	l
e43	user/usertests.asm	/^     e43:	e8 77 29 00 00       	call   37bf <printf>$/;"	l
e44	user/sh.asm	/^ e44:	e8 60 fd ff ff       	call   ba9 <sbrk>$/;"	l
e48	user/usertests.asm	/^     e48:	e8 3f 28 00 00       	call   368c <exit>$/;"	l
e49	user/sh.asm	/^ e49:	83 c4 10             	add    $0x10,%esp$/;"	l
e4c	user/sh.asm	/^ e4c:	83 f8 ff             	cmp    $0xffffffff,%eax$/;"	l
e4d	user/usertests.asm	/^     e4d:	83 ec 08             	sub    $0x8,%esp$/;"	l
e4f	user/sh.asm	/^ e4f:	74 1c                	je     e6d <morecore+0x49>$/;"	l
e5	user/forktest.asm	/^  e5:	c3                   	ret$/;"	l
e5	user/init.asm	/^  e5:	b8 02 00 00 00       	mov    $0x2,%eax$/;"	l
e5	user/kill.asm	/^  e5:	5d                   	pop    %ebp$/;"	l
e5	user/sh.asm	/^  e5:	83 ec 0c             	sub    $0xc,%esp$/;"	l
e50	user/usertests.asm	/^     e50:	68 6b 41 00 00       	push   $0x416b$/;"	l
e51	user/sh.asm	/^ e51:	89 58 04             	mov    %ebx,0x4(%eax)$/;"	l
e54	user/sh.asm	/^ e54:	83 c0 08             	add    $0x8,%eax$/;"	l
e55	user/usertests.asm	/^     e55:	6a 01                	push   $0x1$/;"	l
e57	user/sh.asm	/^ e57:	83 ec 0c             	sub    $0xc,%esp$/;"	l
e57	user/usertests.asm	/^     e57:	e8 63 29 00 00       	call   37bf <printf>$/;"	l
e5a	user/sh.asm	/^ e5a:	50                   	push   %eax$/;"	l
e5b	user/sh.asm	/^ e5b:	e8 54 ff ff ff       	call   db4 <free>$/;"	l
e5c	user/usertests.asm	/^     e5c:	e8 2b 28 00 00       	call   368c <exit>$/;"	l
e6	user/echo.asm	/^  e6:	cd 40                	int    $0x40$/;"	l
e6	user/forktest.asm	/^  e6:	55                   	push   %ebp$/;"	l
e6	user/grep.asm	/^  e6:	83 ec 08             	sub    $0x8,%esp$/;"	l
e6	user/kill.asm	/^  e6:	c3                   	ret$/;"	l
e6	user/mkdir.asm	/^  e6:	cd 40                	int    $0x40$/;"	l
e6	user/rm.asm	/^  e6:	cd 40                	int    $0x40$/;"	l
e60	user/sh.asm	/^ e60:	a1 44 16 00 00       	mov    0x1644,%eax$/;"	l
e61	user/usertests.asm	/^     e61:	83 ec 04             	sub    $0x4,%esp$/;"	l
e64	user/usertests.asm	/^     e64:	50                   	push   %eax$/;"	l
e65	user/sh.asm	/^ e65:	83 c4 10             	add    $0x10,%esp$/;"	l
e65	user/usertests.asm	/^     e65:	68 da 3e 00 00       	push   $0x3eda$/;"	l
e68	user/sh.asm	/^ e68:	8b 5d fc             	mov    -0x4(%ebp),%ebx$/;"	l
e6a	user/usertests.asm	/^     e6a:	6a 01                	push   $0x1$/;"	l
e6b	user/sh.asm	/^ e6b:	c9                   	leave$/;"	l
e6c	user/sh.asm	/^ e6c:	c3                   	ret$/;"	l
e6c	user/usertests.asm	/^     e6c:	e8 4e 29 00 00       	call   37bf <printf>$/;"	l
e6d	user/sh.asm	/^ e6d:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
e7	user/cat.asm	/^  e7:	6a 01                	push   $0x1$/;"	l
e7	user/forktest.asm	/^  e7:	89 e5                	mov    %esp,%ebp$/;"	l
e7	user/kill.asm	/^  e7:	55                   	push   %ebp$/;"	l
e7	user/wc.asm	/^  e7:	83 f8 01             	cmp    $0x1,%eax$/;"	l
e71	user/usertests.asm	/^     e71:	e8 16 28 00 00       	call   368c <exit>$/;"	l
e72	user/sh.asm	/^ e72:	eb f4                	jmp    e68 <morecore+0x44>$/;"	l
e74	user/sh.asm	/^ e74:	55                   	push   %ebp$/;"	l
e75	user/sh.asm	/^ e75:	89 e5                	mov    %esp,%ebp$/;"	l
e76	user/usertests.asm	/^     e76:	e8 11 28 00 00       	call   368c <exit>$/;"	l
e77	user/sh.asm	/^ e77:	53                   	push   %ebx$/;"	l
e78	user/sh.asm	/^ e78:	83 ec 04             	sub    $0x4,%esp$/;"	l
e7b	user/sh.asm	/^ e7b:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
e7b	user/usertests.asm	/^     e7b:	46                   	inc    %esi$/;"	l
e7c	user/usertests.asm	/^     e7c:	83 fe 03             	cmp    $0x3,%esi$/;"	l
e7e	user/sh.asm	/^ e7e:	8d 58 07             	lea    0x7(%eax),%ebx$/;"	l
e7f	user/usertests.asm	/^     e7f:	7f 76                	jg     ef7 <fourfiles+0xec>$/;"	l
e8	user/echo.asm	/^  e8:	c3                   	ret$/;"	l
e8	user/kill.asm	/^  e8:	89 e5                	mov    %esp,%ebp$/;"	l
e8	user/mkdir.asm	/^  e8:	c3                   	ret$/;"	l
e8	user/rm.asm	/^  e8:	c3                   	ret$/;"	l
e8	user/sh.asm	/^  e8:	ff 73 14             	push   0x14(%ebx)$/;"	l
e8	user/usertests.asm	/^      e8:	ff 35 0c 5b 00 00    	push   0x5b0c$/;"	l
e81	user/sh.asm	/^ e81:	c1 eb 03             	shr    $0x3,%ebx$/;"	l
e81	user/usertests.asm	/^     e81:	8b 7c b5 d8          	mov    -0x28(%ebp,%esi,4),%edi$/;"	l
e84	user/sh.asm	/^ e84:	43                   	inc    %ebx$/;"	l
e85	user/sh.asm	/^ e85:	8b 0d 44 16 00 00    	mov    0x1644,%ecx$/;"	l
e85	user/usertests.asm	/^     e85:	83 ec 0c             	sub    $0xc,%esp$/;"	l
e88	user/usertests.asm	/^     e88:	57                   	push   %edi$/;"	l
e89	user/usertests.asm	/^     e89:	e8 4e 28 00 00       	call   36dc <unlink>$/;"	l
e8b	user/sh.asm	/^ e8b:	85 c9                	test   %ecx,%ecx$/;"	l
e8d	user/sh.asm	/^ e8d:	74 04                	je     e93 <malloc+0x1f>$/;"	l
e8e	user/usertests.asm	/^     e8e:	e8 f1 27 00 00       	call   3684 <fork>$/;"	l
e8f	user/sh.asm	/^ e8f:	8b 01                	mov    (%ecx),%eax$/;"	l
e9	user/cat.asm	/^  e9:	e8 45 01 00 00       	call   233 <printf>$/;"	l
e9	user/echo.asm	/^  e9:	b8 0d 00 00 00       	mov    $0xd,%eax$/;"	l
e9	user/forktest.asm	/^  e9:	56                   	push   %esi$/;"	l
e9	user/grep.asm	/^  e9:	53                   	push   %ebx$/;"	l
e9	user/ln.asm	/^  e9:	cd 40                	int    $0x40$/;"	l
e9	user/ls.asm	/^  e9:	89 85 b4 fd ff ff    	mov    %eax,-0x24c(%ebp)$/;"	l
e9	user/mkdir.asm	/^  e9:	b8 09 00 00 00       	mov    $0x9,%eax$/;"	l
e9	user/rm.asm	/^  e9:	b8 09 00 00 00       	mov    $0x9,%eax$/;"	l
e9	user/stressfs.asm	/^  e9:	8d 85 de fd ff ff    	lea    -0x222(%ebp),%eax$/;"	l
e91	user/sh.asm	/^ e91:	eb 4a                	jmp    edd <malloc+0x69>$/;"	l
e93	user/sh.asm	/^ e93:	c7 05 44 16 00 00 48 	movl   $0x1648,0x1644$/;"	l
e93	user/usertests.asm	/^     e93:	83 c4 10             	add    $0x10,%esp$/;"	l
e96	user/usertests.asm	/^     e96:	85 c0                	test   %eax,%eax$/;"	l
e98	user/usertests.asm	/^     e98:	78 9f                	js     e39 <fourfiles+0x2e>$/;"	l
e9a	user/sh.asm	/^ e9a:	16 00 00 $/;"	l
e9a	user/usertests.asm	/^     e9a:	75 df                	jne    e7b <fourfiles+0x70>$/;"	l
e9c	user/usertests.asm	/^     e9c:	89 c3                	mov    %eax,%ebx$/;"	l
e9d	user/sh.asm	/^ e9d:	c7 05 48 16 00 00 48 	movl   $0x1648,0x1648$/;"	l
e9e	user/usertests.asm	/^     e9e:	83 ec 08             	sub    $0x8,%esp$/;"	l
ea	user/forktest.asm	/^  ea:	53                   	push   %ebx$/;"	l
ea	user/grep.asm	/^  ea:	56                   	push   %esi$/;"	l
ea	user/init.asm	/^  ea:	cd 40                	int    $0x40$/;"	l
ea	user/kill.asm	/^  ea:	57                   	push   %edi$/;"	l
ea	user/wc.asm	/^  ea:	7e 07                	jle    f3 <main+0x2b>$/;"	l
ea1	user/usertests.asm	/^     ea1:	68 02 02 00 00       	push   $0x202$/;"	l
ea4	user/sh.asm	/^ ea4:	16 00 00 $/;"	l
ea6	user/usertests.asm	/^     ea6:	57                   	push   %edi$/;"	l
ea7	user/sh.asm	/^ ea7:	c7 05 4c 16 00 00 00 	movl   $0x0,0x164c$/;"	l
ea7	user/usertests.asm	/^     ea7:	e8 20 28 00 00       	call   36cc <open>$/;"	l
eac	user/usertests.asm	/^     eac:	89 c7                	mov    %eax,%edi$/;"	l
eae	user/sh.asm	/^ eae:	00 00 00 $/;"	l
eae	user/usertests.asm	/^     eae:	83 c4 10             	add    $0x10,%esp$/;"	l
eargv	user/sh.c	/^  char *eargv[MAXARGS];$/;"	m	struct:execcmd	typeref:typename:char * []	file:
eax	mmu.h	/^  uint eax;          \/\/ More saved state (registers)$/;"	m	struct:taskstate	typeref:typename:uint
eax	x86.h	/^  uint eax;$/;"	m	struct:trapframe	typeref:typename:uint
eb	user/forktest.asm	/^  eb:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
eb	user/grep.asm	/^  eb:	e8 55 ff ff ff       	call   45 <matchhere>$/;"	l
eb	user/kill.asm	/^  eb:	56                   	push   %esi$/;"	l
eb	user/ln.asm	/^  eb:	c3                   	ret$/;"	l
eb	user/sh.asm	/^  eb:	e8 59 0a 00 00       	call   b49 <close>$/;"	l
eb1	user/sh.asm	/^ eb1:	b9 48 16 00 00       	mov    $0x1648,%ecx$/;"	l
eb1	user/usertests.asm	/^     eb1:	85 c0                	test   %eax,%eax$/;"	l
eb3	user/usertests.asm	/^     eb3:	78 98                	js     e4d <fourfiles+0x42>$/;"	l
eb5	user/usertests.asm	/^     eb5:	83 ec 04             	sub    $0x4,%esp$/;"	l
eb6	user/sh.asm	/^ eb6:	eb d7                	jmp    e8f <malloc+0x1b>$/;"	l
eb8	user/sh.asm	/^ eb8:	74 19                	je     ed3 <malloc+0x5f>$/;"	l
eb8	user/usertests.asm	/^     eb8:	68 00 02 00 00       	push   $0x200$/;"	l
eba	user/sh.asm	/^ eba:	29 da                	sub    %ebx,%edx$/;"	l
ebc	user/sh.asm	/^ ebc:	89 50 04             	mov    %edx,0x4(%eax)$/;"	l
ebd	user/usertests.asm	/^     ebd:	83 c6 30             	add    $0x30,%esi$/;"	l
ebf	user/sh.asm	/^ ebf:	8d 04 d0             	lea    (%eax,%edx,8),%eax$/;"	l
ebp	kernel.asm	/^    ebp = (uint*)ebp[0]; \/\/ saved %ebp$/;"	d
ebp	kernel.asm	/^  ebp = (uint*)v - 2;$/;"	d
ebp	mmu.h	/^  uint *ebp;$/;"	m	struct:taskstate	typeref:typename:uint *
ebp	proc.h	/^  uint ebp;$/;"	m	struct:context	typeref:typename:uint
ebp	x86.h	/^  uint ebp;$/;"	m	struct:trapframe	typeref:typename:uint
ebx	mmu.h	/^  uint ebx;$/;"	m	struct:taskstate	typeref:typename:uint
ebx	proc.h	/^  uint ebx;$/;"	m	struct:context	typeref:typename:uint
ebx	x86.h	/^  uint ebx;$/;"	m	struct:trapframe	typeref:typename:uint
ec	user/init.asm	/^  ec:	c3                   	ret$/;"	l
ec	user/kill.asm	/^  ec:	53                   	push   %ebx$/;"	l
ec	user/ln.asm	/^  ec:	b8 0c 00 00 00       	mov    $0xc,%eax$/;"	l
ec	user/wc.asm	/^  ec:	be 01 00 00 00       	mov    $0x1,%esi$/;"	l
ec0	user/usertests.asm	/^     ec0:	56                   	push   %esi$/;"	l
ec1	user/usertests.asm	/^     ec1:	68 60 82 00 00       	push   $0x8260$/;"	l
ec2	user/sh.asm	/^ ec2:	89 58 04             	mov    %ebx,0x4(%eax)$/;"	l
ec5	user/sh.asm	/^ ec5:	89 0d 44 16 00 00    	mov    %ecx,0x1644$/;"	l
ec6	user/usertests.asm	/^     ec6:	e8 96 26 00 00       	call   3561 <memset>$/;"	l
ecb	user/sh.asm	/^ ecb:	83 c0 08             	add    $0x8,%eax$/;"	l
ecb	user/usertests.asm	/^     ecb:	83 c4 10             	add    $0x10,%esp$/;"	l
ece	user/sh.asm	/^ ece:	8b 5d fc             	mov    -0x4(%ebp),%ebx$/;"	l
ece	user/usertests.asm	/^     ece:	83 fb 0b             	cmp    $0xb,%ebx$/;"	l
echo	user/echo.asm	/^echo:     formato del fichero elf32-i386$/;"	l
echoargv	user/usertests.c	/^char *echoargv[] = { "echo", "ALL", "TESTS", "PASSED", 0 };$/;"	v	typeref:typename:char * []
ecmd	user/sh.asm	/^    ecmd = (struct execcmd*)cmd;$/;"	d
ecx	mmu.h	/^  uint ecx;$/;"	m	struct:taskstate	typeref:typename:uint
ecx	x86.h	/^  uint ecx;$/;"	m	struct:trapframe	typeref:typename:uint
ed	user/init.asm	/^  ed:	b8 03 00 00 00       	mov    $0x3,%eax$/;"	l
ed	user/kill.asm	/^  ed:	83 ec 1c             	sub    $0x1c,%esp$/;"	l
ed1	user/sh.asm	/^ ed1:	c9                   	leave$/;"	l
ed1	user/usertests.asm	/^     ed1:	7f a3                	jg     e76 <fourfiles+0x6b>$/;"	l
ed2	user/sh.asm	/^ ed2:	c3                   	ret$/;"	l
ed3	user/sh.asm	/^ ed3:	8b 10                	mov    (%eax),%edx$/;"	l
ed3	user/usertests.asm	/^     ed3:	83 ec 04             	sub    $0x4,%esp$/;"	l
ed5	user/sh.asm	/^ ed5:	89 11                	mov    %edx,(%ecx)$/;"	l
ed6	user/usertests.asm	/^     ed6:	68 f4 01 00 00       	push   $0x1f4$/;"	l
ed7	user/sh.asm	/^ ed7:	eb ec                	jmp    ec5 <malloc+0x51>$/;"	l
ed9	user/sh.asm	/^ ed9:	89 c1                	mov    %eax,%ecx$/;"	l
edata	kernel.ld	/^	PROVIDE(edata = .);$/;"	s	assignment:provide
edb	user/sh.asm	/^ edb:	8b 00                	mov    (%eax),%eax$/;"	l
edb	user/usertests.asm	/^     edb:	68 60 82 00 00       	push   $0x8260$/;"	l
edd	user/sh.asm	/^ edd:	8b 50 04             	mov    0x4(%eax),%edx$/;"	l
edi	mmu.h	/^  uint edi;$/;"	m	struct:taskstate	typeref:typename:uint
edi	proc.h	/^  uint edi;$/;"	m	struct:context	typeref:typename:uint
edi	x86.h	/^  uint edi;$/;"	m	struct:trapframe	typeref:typename:uint
edx	mmu.h	/^  uint edx;$/;"	m	struct:taskstate	typeref:typename:uint
edx	x86.h	/^  uint edx;$/;"	m	struct:trapframe	typeref:typename:uint
ee	user/cat.asm	/^  ee:	e8 0d 00 00 00       	call   100 <exit>$/;"	l
ee	user/echo.asm	/^  ee:	cd 40                	int    $0x40$/;"	l
ee	user/forktest.asm	/^  ee:	8b 4d 0c             	mov    0xc(%ebp),%ecx$/;"	l
ee	user/mkdir.asm	/^  ee:	cd 40                	int    $0x40$/;"	l
ee	user/rm.asm	/^  ee:	cd 40                	int    $0x40$/;"	l
ee	user/usertests.asm	/^      ee:	e8 cc 36 00 00       	call   37bf <printf>$/;"	l
ee0	user/sh.asm	/^ ee0:	39 da                	cmp    %ebx,%edx$/;"	l
ee0	user/usertests.asm	/^     ee0:	57                   	push   %edi$/;"	l
ee1	user/usertests.asm	/^     ee1:	e8 c6 27 00 00       	call   36ac <write>$/;"	l
ee2	user/sh.asm	/^ ee2:	73 d4                	jae    eb8 <malloc+0x44>$/;"	l
ee4	user/sh.asm	/^ ee4:	39 05 44 16 00 00    	cmp    %eax,0x1644$/;"	l
ee6	user/usertests.asm	/^     ee6:	83 c4 10             	add    $0x10,%esp$/;"	l
ee9	user/usertests.asm	/^     ee9:	3d f4 01 00 00       	cmp    $0x1f4,%eax$/;"	l
eea	user/sh.asm	/^ eea:	75 ed                	jne    ed9 <malloc+0x65>$/;"	l
eec	user/sh.asm	/^ eec:	89 d8                	mov    %ebx,%eax$/;"	l
eee	user/sh.asm	/^ eee:	e8 31 ff ff ff       	call   e24 <morecore>$/;"	l
eee	user/usertests.asm	/^     eee:	0f 85 6d ff ff ff    	jne    e61 <fourfiles+0x56>$/;"	l
ef	user/ls.asm	/^  ef:	8b 8d cc fd ff ff    	mov    -0x234(%ebp),%ecx$/;"	l
ef	user/stressfs.asm	/^  ef:	50                   	push   %eax$/;"	l
ef3	user/sh.asm	/^ ef3:	85 c0                	test   %eax,%eax$/;"	l
ef4	user/usertests.asm	/^     ef4:	43                   	inc    %ebx$/;"	l
ef5	user/sh.asm	/^ ef5:	75 e2                	jne    ed9 <malloc+0x65>$/;"	l
ef5	user/usertests.asm	/^     ef5:	eb d7                	jmp    ece <fourfiles+0xc3>$/;"	l
ef7	user/sh.asm	/^ ef7:	eb d5                	jmp    ece <malloc+0x5a>$/;"	l
ef7	user/usertests.asm	/^     ef7:	bb 00 00 00 00       	mov    $0x0,%ebx$/;"	l
efc	user/usertests.asm	/^     efc:	eb 06                	jmp    f04 <fourfiles+0xf9>$/;"	l
efe	user/usertests.asm	/^     efe:	e8 91 27 00 00       	call   3694 <wait>$/;"	l
efile	user/sh.c	/^  char *efile;$/;"	m	struct:redircmd	typeref:typename:char *	file:
eflags	kernel.asm	/^  eflags = readeflags();$/;"	d
eflags	mmu.h	/^  uint eflags;$/;"	m	struct:taskstate	typeref:typename:uint
eflags	x86.h	/^  uint eflags;$/;"	m	struct:trapframe	typeref:typename:uint
ehsize	elf.h	/^  ushort ehsize;$/;"	m	struct:elfhdr	typeref:typename:ushort
eip	mmu.h	/^  uint *eip;         \/\/ Saved state from last task switch$/;"	m	struct:taskstate	typeref:typename:uint *
eip	proc.h	/^  uint eip;$/;"	m	struct:context	typeref:typename:uint
eip	x86.h	/^  uint eip;$/;"	m	struct:trapframe	typeref:typename:uint
elf	elf.h	/^  uchar elf[12];$/;"	m	struct:elfhdr	typeref:typename:uchar[12]
elfhdr	elf.h	/^struct elfhdr {$/;"	s
empty	kernel.asm	/^      empty = ip;$/;"	d
empty	kernel.asm	/^  empty = 0;$/;"	d
end	kernel.ld	/^	PROVIDE(end = .);$/;"	s	assignment:provide
end_op	log.c	/^end_op(void)$/;"	f	typeref:typename:void
entry	elf.h	/^  uint entry;$/;"	m	struct:elfhdr	typeref:typename:uint
entry	entry.S	/^entry:$/;"	l
entry	kernel.asm	/^entry:$/;"	l
entry	mp.h	/^  ushort entry;                 \/\/ entry count$/;"	m	struct:mpconf	typeref:typename:ushort
entryother	Makefile	/^entryother: entryother.S$/;"	t
entrypgdir	main.c	/^pde_t entrypgdir[NPDENTRIES] = {$/;"	v	typeref:typename:pde_t[]
entrypgdir	main.c	/^pde_t entrypgdir[];  \/\/ For entry.S$/;"	v	typeref:typename:pde_t[]
ep	kernel.asm	/^  ep = (char*)curproc->sz;$/;"	d
epa	bootblock.asm	/^  epa = pa + count;$/;"	d
eph	bootblock.asm	/^  eph = ph + elf->phnum;$/;"	d
err	x86.h	/^  uint err;$/;"	m	struct:trapframe	typeref:typename:uint
es	mmu.h	/^  ushort es;         \/\/ Even more saved state (segment selectors)$/;"	m	struct:taskstate	typeref:typename:ushort
es	user/sh.asm	/^  es = s + strlen(s);$/;"	d
es	x86.h	/^  ushort es;$/;"	m	struct:trapframe	typeref:typename:ushort
esi	mmu.h	/^  uint esi;$/;"	m	struct:taskstate	typeref:typename:uint
esi	proc.h	/^  uint esi;$/;"	m	struct:context	typeref:typename:uint
esi	x86.h	/^  uint esi;$/;"	m	struct:trapframe	typeref:typename:uint
esp	mmu.h	/^  uint *esp;$/;"	m	struct:taskstate	typeref:typename:uint *
esp	x86.h	/^  uint esp;$/;"	m	struct:trapframe	typeref:typename:uint
esp0	mmu.h	/^  uint esp0;         \/\/ Stack pointers and segment selectors$/;"	m	struct:taskstate	typeref:typename:uint
esp1	mmu.h	/^  uint *esp1;$/;"	m	struct:taskstate	typeref:typename:uint *
esp2	mmu.h	/^  uint *esp2;$/;"	m	struct:taskstate	typeref:typename:uint *
etext	kernel.ld	/^	PROVIDE(etext = .);	\/* Define the 'etext' symbol to this value *\/$/;"	s	assignment:provide
even	runoff.spec	/^even: bootasm.S   # mild preference$/;"	t
even	runoff.spec	/^even: bootmain.c  # mild preference$/;"	t
even	runoff.spec	/^even: console.c$/;"	t
even	runoff.spec	/^even: entry.S  # mild preference$/;"	t
even	runoff.spec	/^even: entryother.S  # mild preference$/;"	t
even	runoff.spec	/^even: ide.c$/;"	t
even	runoff.spec	/^even: kalloc.c  # mild preference$/;"	t
even	runoff.spec	/^even: kbd.h$/;"	t
even	runoff.spec	/^even: log.c$/;"	t
even	runoff.spec	/^even: main.c$/;"	t
even	runoff.spec	/^even: mp.c$/;"	t
even	runoff.spec	/^even: proc.c   # VERY important$/;"	t
even	runoff.spec	/^even: proc.h$/;"	t
even	runoff.spec	/^even: spinlock.h$/;"	t
exec	exec.c	/^exec(char *path, char **argv)$/;"	f	typeref:typename:int
execcmd	user/sh.c	/^execcmd(void)$/;"	f	typeref:struct:cmd *
execcmd	user/sh.c	/^struct execcmd {$/;"	s	file:
exectest	user/usertests.c	/^exectest(void)$/;"	f	typeref:typename:void
exit	initcode.S	/^exit:$/;"	l
exit	initcode.asm	/^exit:$/;"	l
exit	proc.c	/^exit(void)$/;"	f	typeref:typename:void
exitiputtest	user/usertests.c	/^exitiputtest(void)$/;"	f	typeref:typename:void
exitwait	user/usertests.c	/^exitwait(void)$/;"	f	typeref:typename:void
f	user/echo.asm	/^   f:	53                   	push   %ebx$/;"	l
f	user/grep.asm	/^   f:	8b 5d 10             	mov    0x10(%ebp),%ebx$/;"	l
f	user/init.asm	/^   f:	83 ec 08             	sub    $0x8,%esp$/;"	l
f	user/kill.asm	/^   f:	53                   	push   %ebx$/;"	l
f	user/ln.asm	/^   f:	8b 59 04             	mov    0x4(%ecx),%ebx$/;"	l
f	user/mkdir.asm	/^   f:	53                   	push   %ebx$/;"	l
f	user/rm.asm	/^   f:	53                   	push   %ebx$/;"	l
f	user/stressfs.asm	/^   f:	53                   	push   %ebx$/;"	l
f0	user/echo.asm	/^  f0:	c3                   	ret$/;"	l
f0	user/grep.asm	/^  f0:	83 c4 10             	add    $0x10,%esp$/;"	l
f0	user/kill.asm	/^  f0:	8b 7d 08             	mov    0x8(%ebp),%edi$/;"	l
f0	user/mkdir.asm	/^  f0:	c3                   	ret$/;"	l
f0	user/rm.asm	/^  f0:	c3                   	ret$/;"	l
f0	user/sh.asm	/^  f0:	83 c4 08             	add    $0x8,%esp$/;"	l
f0	user/stressfs.asm	/^  f0:	56                   	push   %esi$/;"	l
f03	user/usertests.asm	/^     f03:	43                   	inc    %ebx$/;"	l
f04	user/usertests.asm	/^     f04:	83 fb 03             	cmp    $0x3,%ebx$/;"	l
f07	user/usertests.asm	/^     f07:	7e f5                	jle    efe <fourfiles+0xf3>$/;"	l
f09	user/usertests.asm	/^     f09:	bb 00 00 00 00       	mov    $0x0,%ebx$/;"	l
f0e	user/usertests.asm	/^     f0e:	eb 72                	jmp    f82 <fourfiles+0x177>$/;"	l
f1	user/echo.asm	/^  f1:	b8 0e 00 00 00       	mov    $0xe,%eax$/;"	l
f1	user/forktest.asm	/^  f1:	89 c2                	mov    %eax,%edx$/;"	l
f1	user/ln.asm	/^  f1:	cd 40                	int    $0x40$/;"	l
f1	user/mkdir.asm	/^  f1:	b8 0a 00 00 00       	mov    $0xa,%eax$/;"	l
f1	user/rm.asm	/^  f1:	b8 0a 00 00 00       	mov    $0xa,%eax$/;"	l
f1	user/stressfs.asm	/^  f1:	e8 b6 01 00 00       	call   2ac <read>$/;"	l
f1	user/wc.asm	/^  f1:	eb 2b                	jmp    11e <main+0x56>$/;"	l
f10	user/usertests.asm	/^     f10:	83 ec 08             	sub    $0x8,%esp$/;"	l
f13	user/usertests.asm	/^     f13:	68 eb 3e 00 00       	push   $0x3eeb$/;"	l
f18	user/usertests.asm	/^     f18:	6a 01                	push   $0x1$/;"	l
f1a	user/usertests.asm	/^     f1a:	e8 a0 28 00 00       	call   37bf <printf>$/;"	l
f1f	user/usertests.asm	/^     f1f:	e8 68 27 00 00       	call   368c <exit>$/;"	l
f2	user/init.asm	/^  f2:	cd 40                	int    $0x40$/;"	l
f24	user/usertests.asm	/^     f24:	01 7d d4             	add    %edi,-0x2c(%ebp)$/;"	l
f27	user/usertests.asm	/^     f27:	83 ec 04             	sub    $0x4,%esp$/;"	l
f2a	user/usertests.asm	/^     f2a:	68 00 20 00 00       	push   $0x2000$/;"	l
f2f	user/usertests.asm	/^     f2f:	68 60 82 00 00       	push   $0x8260$/;"	l
f3	user/cat.asm	/^  f3:	e8 08 00 00 00       	call   100 <exit>$/;"	l
f3	user/forktest.asm	/^  f3:	89 cb                	mov    %ecx,%ebx$/;"	l
f3	user/grep.asm	/^  f3:	85 c0                	test   %eax,%eax$/;"	l
f3	user/kill.asm	/^  f3:	bb 00 00 00 00       	mov    $0x0,%ebx$/;"	l
f3	user/ln.asm	/^  f3:	c3                   	ret$/;"	l
f3	user/sh.asm	/^  f3:	ff 73 10             	push   0x10(%ebx)$/;"	l
f3	user/usertests.asm	/^      f3:	e8 8c 35 00 00       	call   3684 <fork>$/;"	l
f3	user/wc.asm	/^  f3:	83 ec 08             	sub    $0x8,%esp$/;"	l
f34	user/usertests.asm	/^     f34:	56                   	push   %esi$/;"	l
f35	user/usertests.asm	/^     f35:	e8 6a 27 00 00       	call   36a4 <read>$/;"	l
f3a	user/usertests.asm	/^     f3a:	89 c7                	mov    %eax,%edi$/;"	l
f3c	user/usertests.asm	/^     f3c:	83 c4 10             	add    $0x10,%esp$/;"	l
f3f	user/usertests.asm	/^     f3f:	85 c0                	test   %eax,%eax$/;"	l
f4	user/init.asm	/^  f4:	c3                   	ret$/;"	l
f4	user/ln.asm	/^  f4:	b8 0d 00 00 00       	mov    $0xd,%eax$/;"	l
f41	user/usertests.asm	/^     f41:	7e 1a                	jle    f5d <fourfiles+0x152>$/;"	l
f43	user/usertests.asm	/^     f43:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
f48	user/usertests.asm	/^     f48:	39 f8                	cmp    %edi,%eax$/;"	l
f4a	user/usertests.asm	/^     f4a:	7d d8                	jge    f24 <fourfiles+0x119>$/;"	l
f4c	user/usertests.asm	/^     f4c:	0f be 88 60 82 00 00 	movsbl 0x8260(%eax),%ecx$/;"	l
f5	user/forktest.asm	/^  f5:	41                   	inc    %ecx$/;"	l
f5	user/grep.asm	/^  f5:	75 0a                	jne    101 <match+0x3d>$/;"	l
f5	user/init.asm	/^  f5:	b8 04 00 00 00       	mov    $0x4,%eax$/;"	l
f5	user/ls.asm	/^  f5:	89 8d b0 fd ff ff    	mov    %ecx,-0x250(%ebp)$/;"	l
f53	user/usertests.asm	/^     f53:	8d 53 30             	lea    0x30(%ebx),%edx$/;"	l
f56	user/usertests.asm	/^     f56:	39 d1                	cmp    %edx,%ecx$/;"	l
f58	user/usertests.asm	/^     f58:	75 b6                	jne    f10 <fourfiles+0x105>$/;"	l
f5a	user/usertests.asm	/^     f5a:	40                   	inc    %eax$/;"	l
f5b	user/usertests.asm	/^     f5b:	eb eb                	jmp    f48 <fourfiles+0x13d>$/;"	l
f5d	user/usertests.asm	/^     f5d:	8b 7d d0             	mov    -0x30(%ebp),%edi$/;"	l
f6	user/echo.asm	/^  f6:	cd 40                	int    $0x40$/;"	l
f6	user/forktest.asm	/^  f6:	89 d6                	mov    %edx,%esi$/;"	l
f6	user/mkdir.asm	/^  f6:	cd 40                	int    $0x40$/;"	l
f6	user/rm.asm	/^  f6:	cd 40                	int    $0x40$/;"	l
f6	user/sh.asm	/^  f6:	ff 73 08             	push   0x8(%ebx)$/;"	l
f6	user/stressfs.asm	/^  f6:	43                   	inc    %ebx$/;"	l
f6	user/wc.asm	/^  f6:	68 85 05 00 00       	push   $0x585$/;"	l
f60	user/usertests.asm	/^     f60:	83 ec 0c             	sub    $0xc,%esp$/;"	l
f63	user/usertests.asm	/^     f63:	56                   	push   %esi$/;"	l
f64	user/usertests.asm	/^     f64:	e8 4b 27 00 00       	call   36b4 <close>$/;"	l
f69	user/usertests.asm	/^     f69:	83 c4 10             	add    $0x10,%esp$/;"	l
f6c	user/usertests.asm	/^     f6c:	81 7d d4 70 17 00 00 	cmpl   $0x1770,-0x2c(%ebp)$/;"	l
f7	user/grep.asm	/^  f7:	8d 53 01             	lea    0x1(%ebx),%edx$/;"	l
f7	user/stressfs.asm	/^  f7:	83 c4 10             	add    $0x10,%esp$/;"	l
f73	user/usertests.asm	/^     f73:	75 32                	jne    fa7 <fourfiles+0x19c>$/;"	l
f75	user/usertests.asm	/^     f75:	83 ec 0c             	sub    $0xc,%esp$/;"	l
f78	user/usertests.asm	/^     f78:	57                   	push   %edi$/;"	l
f79	user/usertests.asm	/^     f79:	e8 5e 27 00 00       	call   36dc <unlink>$/;"	l
f7e	user/usertests.asm	/^     f7e:	43                   	inc    %ebx$/;"	l
f7f	user/usertests.asm	/^     f7f:	83 c4 10             	add    $0x10,%esp$/;"	l
f8	user/cat.asm	/^  f8:	b8 01 00 00 00       	mov    $0x1,%eax$/;"	l
f8	user/echo.asm	/^  f8:	c3                   	ret$/;"	l
f8	user/forktest.asm	/^  f8:	42                   	inc    %edx$/;"	l
f8	user/kill.asm	/^  f8:	89 de                	mov    %ebx,%esi$/;"	l
f8	user/mkdir.asm	/^  f8:	c3                   	ret$/;"	l
f8	user/rm.asm	/^  f8:	c3                   	ret$/;"	l
f8	user/usertests.asm	/^      f8:	83 c4 10             	add    $0x10,%esp$/;"	l
f82	user/usertests.asm	/^     f82:	83 fb 01             	cmp    $0x1,%ebx$/;"	l
f85	user/usertests.asm	/^     f85:	7f 37                	jg     fbe <fourfiles+0x1b3>$/;"	l
f87	user/usertests.asm	/^     f87:	8b 7c 9d d8          	mov    -0x28(%ebp,%ebx,4),%edi$/;"	l
f8b	user/usertests.asm	/^     f8b:	83 ec 08             	sub    $0x8,%esp$/;"	l
f8e	user/usertests.asm	/^     f8e:	6a 00                	push   $0x0$/;"	l
f9	user/echo.asm	/^  f9:	55                   	push   %ebp$/;"	l
f9	user/forktest.asm	/^  f9:	8a 1b                	mov    (%ebx),%bl$/;"	l
f9	user/ln.asm	/^  f9:	cd 40                	int    $0x40$/;"	l
f9	user/mkdir.asm	/^  f9:	b8 0b 00 00 00       	mov    $0xb,%eax$/;"	l
f9	user/rm.asm	/^  f9:	b8 0b 00 00 00       	mov    $0xb,%eax$/;"	l
f9	user/sh.asm	/^  f9:	e8 63 0a 00 00       	call   b61 <open>$/;"	l
f90	user/usertests.asm	/^     f90:	57                   	push   %edi$/;"	l
f91	user/usertests.asm	/^     f91:	e8 36 27 00 00       	call   36cc <open>$/;"	l
f96	user/usertests.asm	/^     f96:	89 c6                	mov    %eax,%esi$/;"	l
f98	user/usertests.asm	/^     f98:	83 c4 10             	add    $0x10,%esp$/;"	l
f9b	user/usertests.asm	/^     f9b:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)$/;"	l
fa	user/echo.asm	/^  fa:	89 e5                	mov    %esp,%ebp$/;"	l
fa	user/grep.asm	/^  fa:	80 3b 00             	cmpb   $0x0,(%ebx)$/;"	l
fa	user/init.asm	/^  fa:	cd 40                	int    $0x40$/;"	l
fa	user/kill.asm	/^  fa:	43                   	inc    %ebx$/;"	l
fa	user/stressfs.asm	/^  fa:	83 fb 13             	cmp    $0x13,%ebx$/;"	l
fa2	user/usertests.asm	/^     fa2:	89 7d d0             	mov    %edi,-0x30(%ebp)$/;"	l
fa5	user/usertests.asm	/^     fa5:	eb 80                	jmp    f27 <fourfiles+0x11c>$/;"	l
fa7	user/usertests.asm	/^     fa7:	83 ec 04             	sub    $0x4,%esp$/;"	l
faa	user/usertests.asm	/^     faa:	ff 75 d4             	push   -0x2c(%ebp)$/;"	l
fad	user/usertests.asm	/^     fad:	68 f7 3e 00 00       	push   $0x3ef7$/;"	l
fb	user/forktest.asm	/^  fb:	88 1e                	mov    %bl,(%esi)$/;"	l
fb	user/kill.asm	/^  fb:	3b 5d 0c             	cmp    0xc(%ebp),%ebx$/;"	l
fb	user/ln.asm	/^  fb:	c3                   	ret$/;"	l
fb	user/ls.asm	/^  fb:	83 ec 0c             	sub    $0xc,%esp$/;"	l
fb	user/usertests.asm	/^      fb:	85 c0                	test   %eax,%eax$/;"	l
fb	user/wc.asm	/^  fb:	6a 00                	push   $0x0$/;"	l
fb2	user/usertests.asm	/^     fb2:	6a 01                	push   $0x1$/;"	l
fb4	user/usertests.asm	/^     fb4:	e8 06 28 00 00       	call   37bf <printf>$/;"	l
fb9	user/usertests.asm	/^     fb9:	e8 ce 26 00 00       	call   368c <exit>$/;"	l
fbe	user/usertests.asm	/^     fbe:	83 ec 08             	sub    $0x8,%esp$/;"	l
fc	user/echo.asm	/^  fc:	83 ec 1c             	sub    $0x1c,%esp$/;"	l
fc	user/init.asm	/^  fc:	c3                   	ret$/;"	l
fc	user/ln.asm	/^  fc:	b8 0e 00 00 00       	mov    $0xe,%eax$/;"	l
fc1	user/usertests.asm	/^     fc1:	68 08 3f 00 00       	push   $0x3f08$/;"	l
fc6	user/usertests.asm	/^     fc6:	6a 01                	push   $0x1$/;"	l
fc8	user/usertests.asm	/^     fc8:	e8 f2 27 00 00       	call   37bf <printf>$/;"	l
fcd	user/usertests.asm	/^     fcd:	83 c4 10             	add    $0x10,%esp$/;"	l
fd	user/cat.asm	/^  fd:	cd 40                	int    $0x40$/;"	l
fd	user/forktest.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	user/forktest.asm	/^  fd:	84 db                	test   %bl,%bl$/;"	l
fd	user/grep.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	user/grep.asm	/^  fd:	75 e5                	jne    e4 <match+0x20>$/;"	l
fd	user/init.asm	/^  fd:	b8 05 00 00 00       	mov    $0x5,%eax$/;"	l
fd	user/kill.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	user/ls.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	user/sh.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	user/sh.c	/^  int fd;$/;"	m	struct:redircmd	typeref:typename:int	file:
fd	user/stressfs.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	user/stressfs.asm	/^  fd = open(path, O_CREATE | O_RDWR);$/;"	d
fd	user/stressfs.asm	/^  fd = open(path, O_RDONLY);$/;"	d
fd	user/stressfs.asm	/^  fd:	7e e2                	jle    e1 <main+0xe1>$/;"	l
fd	user/usertests.asm	/^        fd = open(name, O_CREATE | O_RDWR);$/;"	d
fd	user/usertests.asm	/^      fd = open(file, O_CREATE | O_RDWR);$/;"	d
fd	user/usertests.asm	/^      fd = open(fname, O_CREATE | O_RDWR);$/;"	d
fd	user/usertests.asm	/^      fd = open(name, 0);$/;"	d
fd	user/usertests.asm	/^      fd:	78 47                	js     146 <exitiputtest+0x69>$/;"	l
fd	user/usertests.asm	/^    fd = open("", O_CREATE);$/;"	d
fd	user/usertests.asm	/^    fd = open("bigarg-ok", O_CREATE);$/;"	d
fd	user/usertests.asm	/^    fd = open("bigwrite", O_CREATE | O_RDWR);$/;"	d
fd	user/usertests.asm	/^    fd = open("xx", O_CREATE);$/;"	d
fd	user/usertests.asm	/^    fd = open(fname, 0);$/;"	d
fd	user/usertests.asm	/^    fd = open(name, O_CREATE|O_RDWR);$/;"	d
fd	user/usertests.asm	/^  fd = open(".", 0);$/;"	d
fd	user/usertests.asm	/^  fd = open(".", O_RDWR);$/;"	d
fd	user/usertests.asm	/^  fd = open("123456789012345\/123456789012345\/123456789012345", O_CREATE);$/;"	d
fd	user/usertests.asm	/^  fd = open("12345678901234\/12345678901234\/12345678901234", 0);$/;"	d
fd	user/usertests.asm	/^  fd = open("bd", O_CREATE);$/;"	d
fd	user/usertests.asm	/^  fd = open("big", O_CREATE|O_RDWR);$/;"	d
fd	user/usertests.asm	/^  fd = open("big", O_RDONLY);$/;"	d
fd	user/usertests.asm	/^  fd = open("bigarg-ok", 0);$/;"	d
fd	user/usertests.asm	/^  fd = open("bigfile", 0);$/;"	d
fd	user/usertests.asm	/^  fd = open("bigfile", O_CREATE | O_RDWR);$/;"	d
fd	user/usertests.asm	/^  fd = open("dd\/dd\/..\/ff", 0);$/;"	d
fd	user/usertests.asm	/^  fd = open("dd\/dd\/ff", O_CREATE | O_RDWR);$/;"	d
fd	user/usertests.asm	/^  fd = open("dd\/dd\/ffff", 0);$/;"	d
fd	user/usertests.asm	/^  fd = open("dd\/ff", O_CREATE | O_RDWR);$/;"	d
fd	user/usertests.asm	/^  fd = open("dirfile", O_CREATE);$/;"	d
fd	user/usertests.asm	/^  fd = open("dirfile\/xx", 0);$/;"	d
fd	user/usertests.asm	/^  fd = open("dirfile\/xx", O_CREATE);$/;"	d
fd	user/usertests.asm	/^  fd = open("doesnotexist", 0);$/;"	d
fd	user/usertests.asm	/^  fd = open("echo", 0);$/;"	d
fd	user/usertests.asm	/^  fd = open("init", O_RDONLY);$/;"	d
fd	user/usertests.asm	/^  fd = open("lf1", O_CREATE|O_RDWR);$/;"	d
fd	user/usertests.asm	/^  fd = open("lf2", 0);$/;"	d
fd	user/usertests.asm	/^  fd = open("sharedfd", 0);$/;"	d
fd	user/usertests.asm	/^  fd = open("sharedfd", O_CREATE|O_RDWR);$/;"	d
fd	user/usertests.asm	/^  fd = open("small", O_CREATE|O_RDWR);$/;"	d
fd	user/usertests.asm	/^  fd = open("small", O_RDONLY);$/;"	d
fd	user/usertests.asm	/^  fd = open("unlinkread", O_CREATE | O_RDWR);$/;"	d
fd	user/usertests.asm	/^  fd = open("unlinkread", O_RDWR);$/;"	d
fd	user/usertests.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	user/wc.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	user/wc.asm	/^  fd:	e8 fe fe ff ff       	call   0 <wc>$/;"	l
fd0	kernel.asm	/^  fd0 = -1;$/;"	d
fd0	user/usertests.asm	/^     fd0:	8d 65 f4             	lea    -0xc(%ebp),%esp$/;"	l
fd1	user/usertests.asm	/^  fd1 = open("unlinkread", O_CREATE | O_RDWR);$/;"	d
fd3	user/usertests.asm	/^     fd3:	5b                   	pop    %ebx$/;"	l
fd4	user/usertests.asm	/^     fd4:	5e                   	pop    %esi$/;"	l
fd5	user/usertests.asm	/^     fd5:	5f                   	pop    %edi$/;"	l
fd6	user/usertests.asm	/^     fd6:	5d                   	pop    %ebp$/;"	l
fd7	user/usertests.asm	/^     fd7:	c3                   	ret$/;"	l
fd8	user/usertests.asm	/^     fd8:	55                   	push   %ebp$/;"	l
fd9	user/usertests.asm	/^     fd9:	89 e5                	mov    %esp,%ebp$/;"	l
fdalloc	sysfile.c	/^fdalloc(struct file *f)$/;"	f	typeref:typename:int	file:
fdb	user/usertests.asm	/^     fdb:	56                   	push   %esi$/;"	l
fdc	user/usertests.asm	/^     fdc:	53                   	push   %ebx$/;"	l
fdd	user/usertests.asm	/^     fdd:	83 ec 28             	sub    $0x28,%esp$/;"	l
fe	user/kill.asm	/^  fe:	7d 2b                	jge    12b <gets+0x44>$/;"	l
fe	user/ls.asm	/^  fe:	53                   	push   %ebx$/;"	l
fe	user/mkdir.asm	/^  fe:	cd 40                	int    $0x40$/;"	l
fe	user/rm.asm	/^  fe:	cd 40                	int    $0x40$/;"	l
fe	user/sh.asm	/^  fe:	83 c4 10             	add    $0x10,%esp$/;"	l
fe0	user/usertests.asm	/^     fe0:	68 1c 3f 00 00       	push   $0x3f1c$/;"	l
fe5	user/usertests.asm	/^     fe5:	6a 01                	push   $0x1$/;"	l
fe7	user/usertests.asm	/^     fe7:	e8 d3 27 00 00       	call   37bf <printf>$/;"	l
feature	mp.h	/^  uint feature;                 \/\/ feature flags from CPUID instruction$/;"	m	struct:mpproc	typeref:typename:uint
fec	user/usertests.asm	/^     fec:	83 c4 10             	add    $0x10,%esp$/;"	l
fef	user/usertests.asm	/^     fef:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
fetchint	syscall.c	/^fetchint(uint addr, int *ip)$/;"	f	typeref:typename:int
fetchstr	syscall.c	/^fetchstr(uint addr, char **pp)$/;"	f	typeref:typename:int
ff	kernel.asm	/^  ff = *f;$/;"	d
ff	user/cat.asm	/^  ff:	c3                   	ret$/;"	l
ff	user/echo.asm	/^  ff:	88 55 f4             	mov    %dl,-0xc(%ebp)$/;"	l
ff	user/forktest.asm	/^  ff:	75 f2                	jne    f3 <strcpy+0xd>$/;"	l
ff	user/grep.asm	/^  ff:	eb 05                	jmp    106 <match+0x42>$/;"	l
ff	user/ls.asm	/^  ff:	e8 fc fe ff ff       	call   0 <fmtname>$/;"	l
ff	user/stressfs.asm	/^  ff:	83 ec 0c             	sub    $0xc,%esp$/;"	l
ff	user/usertests.asm	/^      ff:	0f 85 a1 00 00 00    	jne    1a6 <exitiputtest+0xc9>$/;"	l
ff4	user/usertests.asm	/^     ff4:	83 fe 03             	cmp    $0x3,%esi$/;"	l
ff7	user/usertests.asm	/^     ff7:	0f 8f b8 00 00 00    	jg     10b5 <createdelete+0xdd>$/;"	l
ffd	user/usertests.asm	/^     ffd:	e8 82 26 00 00       	call   3684 <fork>$/;"	l
file	file.c	/^  struct file file[NFILE];$/;"	m	struct:__anonfd762eb60108	typeref:struct:file[]	file:
file	file.h	/^struct file {$/;"	s
file	user/sh.c	/^  char *file;$/;"	m	struct:redircmd	typeref:typename:char *	file:
filealloc	file.c	/^filealloc(void)$/;"	f	typeref:struct:file *
fileclose	file.c	/^fileclose(struct file *f)$/;"	f	typeref:typename:void
filedup	file.c	/^filedup(struct file *f)$/;"	f	typeref:struct:file *
fileinit	file.c	/^fileinit(void)$/;"	f	typeref:typename:void
fileread	file.c	/^fileread(struct file *f, char *addr, int n)$/;"	f	typeref:typename:int
filestat	file.c	/^filestat(struct file *f, struct stat *st)$/;"	f	typeref:typename:int
filesz	elf.h	/^  uint filesz;$/;"	m	struct:proghdr	typeref:typename:uint
filewrite	file.c	/^filewrite(struct file *f, char *addr, int n)$/;"	f	typeref:typename:int
fill_rtcdate	lapic.c	/^fill_rtcdate(struct rtcdate *r)$/;"	f	typeref:typename:void	file:
first	kernel.asm	/^    first = 0;$/;"	d
flags	buf.h	/^  int flags;$/;"	m	struct:buf	typeref:typename:int
flags	elf.h	/^  uint flags;$/;"	m	struct:elfhdr	typeref:typename:uint
flags	elf.h	/^  uint flags;$/;"	m	struct:proghdr	typeref:typename:uint
flags	entry.S	/^  #define flags /;"	d	file:
flags	kernel.asm	/^    flags = PTE_FLAGS(*pte);$/;"	d
flags	mp.h	/^  uchar flags;                  \/\/ CPU flags$/;"	m	struct:mpproc	typeref:typename:uchar
flags	mp.h	/^  uchar flags;                  \/\/ I\/O APIC flags$/;"	m	struct:mpioapic	typeref:typename:uchar
fmtname	user/ls.c	/^fmtname(char *path)$/;"	f	typeref:typename:char *
fname	user/usertests.asm	/^    fname = names[i];$/;"	d
fname	user/usertests.asm	/^    fname = names[pi];$/;"	d
fork	proc.c	/^fork(void)$/;"	f	typeref:typename:int
fork1	user/sh.c	/^fork1(void)$/;"	f	typeref:typename:int
forkret	proc.c	/^forkret(void)$/;"	f	typeref:typename:void
forktest	user/Makefile	/^forktest: forktest.o libc.a$/;"	t
forktest	user/forktest.asm	/^forktest:     formato del fichero elf32-i386$/;"	l
forktest	user/forktest.c	/^forktest(void)$/;"	f	typeref:typename:void
forktest	user/usertests.c	/^forktest(void)$/;"	f	typeref:typename:void
fourfiles	user/usertests.c	/^fourfiles(void)$/;"	f	typeref:typename:void
fourteen	user/usertests.c	/^fourteen(void)$/;"	f	typeref:typename:void
free	user/umalloc.c	/^free(void *ap)$/;"	f	typeref:typename:void
freeblock	mkfs.c	/^uint freeblock;$/;"	v	typeref:typename:uint
freeinode	mkfs.c	/^uint freeinode = 1;$/;"	v	typeref:typename:uint
freelist	kalloc.c	/^  struct run *freelist;$/;"	m	struct:__anon69d64d0c0108	typeref:struct:run *	file:
freep	user/sh.asm	/^      freep = prevp;$/;"	d
freep	user/sh.asm	/^  freep = p;$/;"	d
freep	user/umalloc.c	/^static Header *freep;$/;"	v	typeref:typename:Header *	file:
freep	user/usertests.asm	/^      freep = prevp;$/;"	d
freep	user/usertests.asm	/^  freep = p;$/;"	d
freerange	kalloc.c	/^freerange(void *vstart, void *vend)$/;"	f	typeref:typename:void
freevm	vm.c	/^freevm(pde_t *pgdir, int dodeallocuvm)$/;"	f	typeref:typename:void
fs	mmu.h	/^  ushort fs;$/;"	m	struct:taskstate	typeref:typename:ushort
fs	x86.h	/^  ushort fs;$/;"	m	struct:trapframe	typeref:typename:ushort
fs.img	Makefile	/^fs.img: mkfs README user$/;"	t
fsfd	mkfs.c	/^int fsfd;$/;"	v	typeref:typename:int
fsfull	user/usertests.c	/^fsfull()$/;"	f	typeref:typename:void
ftable	file.c	/^} ftable;$/;"	v	typeref:struct:__anonfd762eb60108
g	mmu.h	/^  uint g : 1;          \/\/ Granularity: limit scaled by 4K when set$/;"	m	struct:segdesc	typeref:typename:uint:1
gatedesc	mmu.h	/^struct gatedesc {$/;"	s
gdt	bootasm.S	/^gdt:$/;"	l
gdt	entryother.S	/^gdt:$/;"	l
gdt	proc.h	/^  struct segdesc gdt[NSEGS];   \/\/ x86 global descriptor table$/;"	m	struct:cpu	typeref:struct:segdesc[]
gdtdesc	bootasm.S	/^gdtdesc:$/;"	l
gdtdesc	entryother.S	/^gdtdesc:$/;"	l
getcallerpcs	spinlock.c	/^getcallerpcs(void *v, uint pcs[])$/;"	f	typeref:typename:void
getcmd	user/sh.c	/^getcmd(char *buf, int nbuf)$/;"	f	typeref:typename:int
gets	user/ulib.c	/^gets(char *buf, int max)$/;"	f	typeref:typename:char *
gettoken	user/sh.c	/^gettoken(char **ps, char *es, char **q, char **eq)$/;"	f	typeref:typename:int
grep	user/grep.asm	/^grep:     formato del fichero elf32-i386$/;"	l
grep	user/grep.c	/^grep(char *pattern, int fd)$/;"	f	typeref:typename:void
growproc	proc.c	/^growproc(int n)$/;"	f	typeref:typename:int
gs	mmu.h	/^  ushort gs;$/;"	m	struct:taskstate	typeref:typename:ushort
gs	x86.h	/^  ushort gs;$/;"	m	struct:trapframe	typeref:typename:ushort
havedisk1	ide.c	/^static int havedisk1;$/;"	v	typeref:typename:int	file:
havekids	kernel.asm	/^      havekids = 1;$/;"	d
havekids	kernel.asm	/^    havekids = 0;$/;"	d
head	bio.c	/^  struct buf head;$/;"	m	struct:__anon0f27d3d00108	typeref:struct:buf	file:
header	user/umalloc.c	/^union header {$/;"	u	file:
hi	user/usertests.asm	/^  hi = 1100*1024;$/;"	d
holding	spinlock.c	/^holding(struct spinlock *lock)$/;"	f	typeref:typename:int
holdingsleep	sleeplock.c	/^holdingsleep(struct sleeplock *lk)$/;"	f	typeref:typename:int
hour	date.h	/^  uint hour;$/;"	m	struct:rtcdate	typeref:typename:uint
hp	user/sh.asm	/^  hp = (Header*)p;$/;"	d
hp	user/usertests.asm	/^  hp = (Header*)p;$/;"	d
i	kernel.asm	/^  i = 0;$/;"	d
i	user/cat.asm	/^  i = 0;$/;"	d
i	user/echo.asm	/^  i = 0;$/;"	d
i	user/grep.asm	/^  i = 0;$/;"	d
i	user/init.asm	/^  i = 0;$/;"	d
i	user/kill.asm	/^  i = 0;$/;"	d
i	user/ln.asm	/^  i = 0;$/;"	d
i	user/ls.asm	/^  i = 0;$/;"	d
i	user/mkdir.asm	/^  i = 0;$/;"	d
i	user/rm.asm	/^  i = 0;$/;"	d
i	user/sh.asm	/^  i = 0;$/;"	d
i	user/stressfs.asm	/^  i = 0;$/;"	d
i	user/usertests.asm	/^      i = de.name[1] - '0';$/;"	d
i	user/usertests.asm	/^    i = read(fd, buf, 512);$/;"	d
i	user/usertests.asm	/^  i = 0;$/;"	d
i	user/usertests.asm	/^  i = read(fd, buf, 2000);$/;"	d
i	user/wc.asm	/^  i = 0;$/;"	d
ialloc	fs.c	/^ialloc(uint dev, short type)$/;"	f	typeref:struct:inode *
ialloc	mkfs.c	/^ialloc(ushort type)$/;"	f	typeref:typename:uint
iappend	mkfs.c	/^iappend(uint inum, void *xp, int n)$/;"	f	typeref:typename:void
icache	fs.c	/^} icache;$/;"	v	typeref:struct:__anon7c96edaf0108
ideinit	ide.c	/^ideinit(void)$/;"	f	typeref:typename:void
ideinit	memide.c	/^ideinit(void)$/;"	f	typeref:typename:void
ideintr	ide.c	/^ideintr(void)$/;"	f	typeref:typename:void
ideintr	memide.c	/^ideintr(void)$/;"	f	typeref:typename:void
idelock	ide.c	/^static struct spinlock idelock;$/;"	v	typeref:struct:spinlock	file:
idequeue	ide.c	/^static struct buf *idequeue;$/;"	v	typeref:struct:buf *	file:
iderw	ide.c	/^iderw(struct buf *b)$/;"	f	typeref:typename:void
iderw	memide.c	/^iderw(struct buf *b)$/;"	f	typeref:typename:void
idestart	ide.c	/^idestart(struct buf *b)$/;"	f	typeref:typename:void	file:
idewait	ide.c	/^idewait(int checkerr)$/;"	f	typeref:typename:int	file:
idt	trap.c	/^struct gatedesc idt[256];$/;"	v	typeref:struct:gatedesc[256]
idtinit	trap.c	/^idtinit(void)$/;"	f	typeref:typename:void
idup	fs.c	/^idup(struct inode *ip)$/;"	f	typeref:struct:inode *
iget	fs.c	/^iget(uint dev, uint inum)$/;"	f	typeref:struct:inode *	file:
iinit	fs.c	/^iinit(int dev)$/;"	f	typeref:typename:void
ilock	fs.c	/^ilock(struct inode *ip)$/;"	f	typeref:typename:void
imcrp	mp.h	/^  uchar imcrp;$/;"	m	struct:mp	typeref:typename:uchar
inb	x86.h	/^inb(ushort port)$/;"	f	typeref:typename:uchar
init	initcode.S	/^init:$/;"	l
init	user/init.asm	/^init:     formato del fichero elf32-i386$/;"	l
initcode	Makefile	/^initcode: initcode.S$/;"	t
initlock	spinlock.c	/^initlock(struct spinlock *lk, char *name)$/;"	f	typeref:typename:void
initlog	log.c	/^initlog(int dev)$/;"	f	typeref:typename:void
initproc	kernel.asm	/^  initproc = p;$/;"	d
initproc	proc.c	/^static struct proc *initproc;$/;"	v	typeref:struct:proc *	file:
initsleeplock	sleeplock.c	/^initsleeplock(struct sleeplock *lk, char *name)$/;"	f	typeref:typename:void
inituvm	vm.c	/^inituvm(pde_t *pgdir, char *init, uint sz)$/;"	f	typeref:typename:void
ino	stat.h	/^  uint ino;    \/\/ Inode number$/;"	m	struct:stat	typeref:typename:uint
inode	file.h	/^struct inode {$/;"	s
inode	fs.c	/^  struct inode inode[NINODE];$/;"	m	struct:__anon7c96edaf0108	typeref:struct:inode[]	file:
inodestart	fs.h	/^  uint inodestart;   \/\/ Block number of first inode block$/;"	m	struct:superblock	typeref:typename:uint
input	console.c	/^} input;$/;"	v	typeref:struct:__anon96a473a90208
insl	x86.h	/^insl(int port, void *addr, int cnt)$/;"	f	typeref:typename:void
install_trans	log.c	/^install_trans(void)$/;"	f	typeref:typename:void	file:
int	kernel.asm	/^int ncpu;$/;"	l
int	kernel.asm	/^int$/;"	l
int	user/cat.asm	/^int$/;"	l
int	user/echo.asm	/^int$/;"	l
int	user/forktest.asm	/^int$/;"	l
int	user/grep.asm	/^int matchstar(int c, char *re, char *text)$/;"	l
int	user/grep.asm	/^int$/;"	l
int	user/init.asm	/^int$/;"	l
int	user/kill.asm	/^int$/;"	l
int	user/ln.asm	/^int$/;"	l
int	user/ls.asm	/^int$/;"	l
int	user/mkdir.asm	/^int$/;"	l
int	user/rm.asm	/^int$/;"	l
int	user/sh.asm	/^int$/;"	l
int	user/stressfs.asm	/^int$/;"	l
int	user/usertests.asm	/^int stdout = 1;$/;"	l
int	user/usertests.asm	/^int$/;"	l
int	user/wc.asm	/^int$/;"	l
int	user/zombie.asm	/^int$/;"	l
intena	kernel.asm	/^  intena = mycpu()->intena;$/;"	d
intena	proc.h	/^  int intena;                  \/\/ Were interrupts enabled before pushcli?$/;"	m	struct:cpu	typeref:typename:int
inum	file.h	/^  uint inum;          \/\/ Inode number$/;"	m	struct:inode	typeref:typename:uint
inum	fs.h	/^  ushort inum;$/;"	m	struct:dirent	typeref:typename:ushort
inum	user/usertests.c	/^    ushort inum;$/;"	m	struct:concreate::__anon2469bfd60208	typeref:typename:ushort	file:
inword	user/wc.asm	/^        inword = 0;$/;"	d
inword	user/wc.asm	/^        inword = 1;$/;"	d
inword	user/wc.asm	/^  inword = 0;$/;"	d
ioapic	ioapic.c	/^struct ioapic {$/;"	s	file:
ioapic	ioapic.c	/^volatile struct ioapic *ioapic;$/;"	v	typeref:typename:volatile struct ioapic *
ioapicenable	ioapic.c	/^ioapicenable(int irq, int cpunum)$/;"	f	typeref:typename:void
ioapicid	kernel.asm	/^      ioapicid = ioapic->apicno;$/;"	d
ioapicid	mp.c	/^uchar ioapicid;$/;"	v	typeref:typename:uchar
ioapicinit	ioapic.c	/^ioapicinit(void)$/;"	f	typeref:typename:void
ioapicread	ioapic.c	/^ioapicread(int reg)$/;"	f	typeref:typename:uint	file:
ioapicwrite	ioapic.c	/^ioapicwrite(int reg, uint data)$/;"	f	typeref:typename:void	file:
iomb	mmu.h	/^  ushort iomb;       \/\/ I\/O map base address$/;"	m	struct:taskstate	typeref:typename:ushort
ip	file.h	/^  struct inode *ip;$/;"	m	struct:file	typeref:struct:inode *
ip	kernel.asm	/^    ip = create(path, T_FILE, 0, 0);$/;"	d
ip	kernel.asm	/^  ip = 0;$/;"	d
iput	fs.c	/^iput(struct inode *ip)$/;"	f	typeref:typename:void
iputtest	user/usertests.c	/^iputtest(void)$/;"	f	typeref:typename:void
iref	user/usertests.c	/^iref(void)$/;"	f	typeref:typename:void
isdirempty	sysfile.c	/^isdirempty(struct inode *dp)$/;"	f	typeref:typename:int	file:
ismp	kernel.asm	/^      ismp = 0;$/;"	d
ismp	kernel.asm	/^  ismp = 1;$/;"	d
itrunc	fs.c	/^itrunc(struct inode *ip)$/;"	f	typeref:typename:void	file:
iunlock	fs.c	/^iunlock(struct inode *ip)$/;"	f	typeref:typename:void
iunlockput	fs.c	/^iunlockput(struct inode *ip)$/;"	f	typeref:typename:void
iupdate	fs.c	/^iupdate(struct inode *ip)$/;"	f	typeref:typename:void
kalloc	kalloc.c	/^kalloc(void)$/;"	f	typeref:typename:char *
kbdgetc	kbd.c	/^kbdgetc(void)$/;"	f	typeref:typename:int
kbdintr	kbd.c	/^kbdintr(void)$/;"	f	typeref:typename:void
kernel	Makefile	/^kernel: $(OBJS) entry.o entryother initcode kernel.ld$/;"	t
kernel	kernel.asm	/^kernel:     formato del fichero elf32-i386$/;"	l
kernelmemfs	Makefile	/^kernelmemfs: $(MEMFSOBJS) entry.o entryother initcode kernel.ld fs.img$/;"	t
kfree	kalloc.c	/^kfree(char *v)$/;"	f	typeref:typename:void
kill	proc.c	/^kill(int pid)$/;"	f	typeref:typename:int
kill	user/kill.asm	/^kill:     formato del fichero elf32-i386$/;"	l
killed	proc.h	/^  int killed;                  \/\/ If non-zero, have been killed$/;"	m	struct:proc	typeref:typename:int
kinit1	kalloc.c	/^kinit1(void *vstart, void *vend)$/;"	f	typeref:typename:void
kinit2	kalloc.c	/^kinit2(void *vstart, void *vend)$/;"	f	typeref:typename:void
kmap	vm.c	/^static struct kmap {$/;"	s	file:
kmap	vm.c	/^} kmap[] = {$/;"	v	typeref:struct:kmap[]
kmem	kalloc.c	/^} kmem;$/;"	v	typeref:struct:__anon69d64d0c0108
kpgdir	kernel.asm	/^  kpgdir = setupkvm();$/;"	d
kpgdir	vm.c	/^pde_t *kpgdir;  \/\/ for use in scheduler()$/;"	v	typeref:typename:pde_t *
kstack	proc.h	/^  char *kstack;                \/\/ Bottom of kernel stack for this process$/;"	m	struct:proc	typeref:typename:char *
kvmalloc	vm.c	/^kvmalloc(void)$/;"	f	typeref:typename:void
l	user/wc.asm	/^  l = w = c = 0;$/;"	d
lapic	kernel.asm	/^  lapic = (uint*)conf->lapicaddr;$/;"	d
lapic	lapic.c	/^volatile uint *lapic;  \/\/ Initialized in mp.c$/;"	v	typeref:typename:volatile uint *
lapicaddr	mp.h	/^  uint *lapicaddr;              \/\/ address of local APIC$/;"	m	struct:mpconf	typeref:typename:uint *
lapiceoi	lapic.c	/^lapiceoi(void)$/;"	f	typeref:typename:void
lapicid	lapic.c	/^lapicid(void)$/;"	f	typeref:typename:int
lapicinit	lapic.c	/^lapicinit(void)$/;"	f	typeref:typename:void
lapicstartap	lapic.c	/^lapicstartap(uchar apicid, uint addr)$/;"	f	typeref:typename:void
lapicw	lapic.c	/^lapicw(int index, int value)$/;"	f	typeref:typename:void	file:
last	kernel.asm	/^      last = s+1;$/;"	d
last	kernel.asm	/^  last = (char*)PGROUNDDOWN(((uint)va) + size - 1);$/;"	d
lastaddr	user/usertests.asm	/^  lastaddr = (char*) (BIG-1);$/;"	d
lcr3	x86.h	/^lcr3(uint val)$/;"	f	typeref:typename:void
ldt	mmu.h	/^  ushort ldt;$/;"	m	struct:taskstate	typeref:typename:ushort
left	runoff.spec	/^left: fs.c  # mild preference$/;"	t
left	runoff.spec	/^left: log.c$/;"	t
left	runoff.spec	/^left: mp.c$/;"	t
left	runoff.spec	/^left: proc.h$/;"	t
left	runoff.spec	/^left: spinlock.h$/;"	t
left	runoff.spec	/^left: vm.c$/;"	t
left	user/sh.c	/^  struct cmd *left;$/;"	m	struct:listcmd	typeref:struct:cmd *	file:
left	user/sh.c	/^  struct cmd *left;$/;"	m	struct:pipecmd	typeref:struct:cmd *	file:
len	kernel.asm	/^  len = path - s;$/;"	d
length	mp.h	/^  uchar length;                 \/\/ 1$/;"	m	struct:mp	typeref:typename:uchar
length	mp.h	/^  ushort length;                \/\/ total table length$/;"	m	struct:mpconf	typeref:typename:ushort
lgdt	x86.h	/^lgdt(struct segdesc *p, int size)$/;"	f	typeref:typename:void
lh	log.c	/^  struct logheader lh;$/;"	m	struct:log	typeref:struct:logheader	file:
libc.a	user/Makefile	/^libc.a: $(ULIB)$/;"	t
lidt	x86.h	/^lidt(struct gatedesc *p, int size)$/;"	f	typeref:typename:void
lim_15_0	mmu.h	/^  uint lim_15_0 : 16;  \/\/ Low bits of segment limit$/;"	m	struct:segdesc	typeref:typename:uint:16
lim_19_16	mmu.h	/^  uint lim_19_16 : 4;  \/\/ High bits of segment limit$/;"	m	struct:segdesc	typeref:typename:uint:4
link	mmu.h	/^  uint link;         \/\/ Old ts selector$/;"	m	struct:taskstate	typeref:typename:uint
linktest	user/usertests.c	/^linktest(void)$/;"	f	typeref:typename:void
linkunlink	user/usertests.c	/^linkunlink()$/;"	f	typeref:typename:void
listcmd	user/sh.c	/^listcmd(struct cmd *left, struct cmd *right)$/;"	f	typeref:struct:cmd *
listcmd	user/sh.c	/^struct listcmd {$/;"	s	file:
lk	sleeplock.h	/^  struct spinlock lk; \/\/ spinlock protecting this sleep lock$/;"	m	struct:sleeplock	typeref:struct:spinlock
ln	user/ln.asm	/^ln:     formato del fichero elf32-i386$/;"	l
loadgs	x86.h	/^loadgs(ushort v)$/;"	f	typeref:typename:void
loaduvm	vm.c	/^loaduvm(pde_t *pgdir, char *addr, struct inode *ip, uint offset, uint sz)$/;"	f	typeref:typename:int
lock	bio.c	/^  struct spinlock lock;$/;"	m	struct:__anon0f27d3d00108	typeref:struct:spinlock	file:
lock	buf.h	/^  struct sleeplock lock;$/;"	m	struct:buf	typeref:struct:sleeplock
lock	console.c	/^  struct spinlock lock;$/;"	m	struct:__anon96a473a90108	typeref:struct:spinlock	file:
lock	file.c	/^  struct spinlock lock;$/;"	m	struct:__anonfd762eb60108	typeref:struct:spinlock	file:
lock	file.h	/^  struct sleeplock lock; \/\/ protects everything below here$/;"	m	struct:inode	typeref:struct:sleeplock
lock	fs.c	/^  struct spinlock lock;$/;"	m	struct:__anon7c96edaf0108	typeref:struct:spinlock	file:
lock	kalloc.c	/^  struct spinlock lock;$/;"	m	struct:__anon69d64d0c0108	typeref:struct:spinlock	file:
lock	log.c	/^  struct spinlock lock;$/;"	m	struct:log	typeref:struct:spinlock	file:
lock	pipe.c	/^  struct spinlock lock;$/;"	m	struct:pipe	typeref:struct:spinlock	file:
lock	proc.c	/^  struct spinlock lock;$/;"	m	struct:__anon156e3e2a0108	typeref:struct:spinlock	file:
locked	sleeplock.h	/^  uint locked;       \/\/ Is the lock held?$/;"	m	struct:sleeplock	typeref:typename:uint
locked	spinlock.h	/^  uint locked;       \/\/ Is the lock held?$/;"	m	struct:spinlock	typeref:typename:uint
locking	console.c	/^  int locking;$/;"	m	struct:__anon96a473a90108	typeref:typename:int	file:
locking	kernel.asm	/^  locking = cons.locking;$/;"	d
log	log.c	/^struct log log;$/;"	v	typeref:struct:log
log	log.c	/^struct log {$/;"	s	file:
log_write	log.c	/^log_write(struct buf *b)$/;"	f	typeref:typename:void
logheader	log.c	/^struct logheader {$/;"	s	file:
logstart	fs.h	/^  uint logstart;     \/\/ Block number of first log block$/;"	m	struct:superblock	typeref:typename:uint
ls	user/ls.asm	/^ls:     formato del fichero elf32-i386$/;"	l
ls	user/ls.c	/^ls(char *path)$/;"	f	typeref:typename:void
ltr	x86.h	/^ltr(ushort sel)$/;"	f	typeref:typename:void
m	kernel.asm	/^      m = 1 << (bi % 8);$/;"	d
m	kernel.asm	/^  m = 1 << (bi % 8);$/;"	d
m	user/grep.asm	/^      m = 0;$/;"	d
m	user/grep.asm	/^  m = 0;$/;"	d
m1	user/usertests.asm	/^      m1 = m2;$/;"	d
m1	user/usertests.asm	/^    m1 = 0;$/;"	d
m1	user/usertests.asm	/^    m1 = malloc(1024*20);$/;"	d
m2	user/usertests.asm	/^      m2 = *(char**)m1;$/;"	d
machine	elf.h	/^  ushort machine;$/;"	m	struct:elfhdr	typeref:typename:ushort
magic	elf.h	/^  uint magic;  \/\/ must equal ELF_MAGIC$/;"	m	struct:elfhdr	typeref:typename:uint
magic	entry.S	/^  #define magic /;"	d	file:
main	main.c	/^main(void)$/;"	f	typeref:typename:int
main	mkfs.c	/^main(int argc, char *argv[])$/;"	f	typeref:typename:int
main	user/cat.c	/^main(int argc, char *argv[])$/;"	f	typeref:typename:int
main	user/echo.c	/^main(int argc, char *argv[])$/;"	f	typeref:typename:int
main	user/forktest.c	/^main(void)$/;"	f	typeref:typename:int
main	user/grep.c	/^main(int argc, char *argv[])$/;"	f	typeref:typename:int
main	user/init.c	/^main(void)$/;"	f	typeref:typename:int
main	user/kill.c	/^main(int argc, char **argv)$/;"	f	typeref:typename:int
main	user/ln.c	/^main(int argc, char *argv[])$/;"	f	typeref:typename:int
main	user/ls.c	/^main(int argc, char *argv[])$/;"	f	typeref:typename:int
main	user/mkdir.c	/^main(int argc, char *argv[])$/;"	f	typeref:typename:int
main	user/rm.c	/^main(int argc, char *argv[])$/;"	f	typeref:typename:int
main	user/sh.c	/^main(void)$/;"	f	typeref:typename:int
main	user/stressfs.c	/^main(int argc, char *argv[])$/;"	f	typeref:typename:int
main	user/usertests.c	/^main(int argc, char *argv[])$/;"	f	typeref:typename:int
main	user/wc.c	/^main(int argc, char *argv[])$/;"	f	typeref:typename:int
main	user/zombie.c	/^main(void)$/;"	f	typeref:typename:int
major	file.h	/^  short major;$/;"	m	struct:inode	typeref:typename:short
major	fs.h	/^  short major;          \/\/ Major device number (T_DEV only)$/;"	m	struct:dinode	typeref:typename:short
malloc	user/umalloc.c	/^malloc(uint nbytes)$/;"	f	typeref:typename:void *
mappages	vm.c	/^mappages(pde_t *pgdir, void *va, uint size, uint pa, int perm)$/;"	f	typeref:typename:int	file:
match	user/grep.c	/^match(char *re, char *text)$/;"	f	typeref:typename:int
matchhere	user/grep.c	/^int matchhere(char *re, char *text)$/;"	f	typeref:typename:int
matchstar	user/grep.c	/^int matchstar(int c, char *re, char *text)$/;"	f	typeref:typename:int
mem	kernel.asm	/^    mem = kalloc();$/;"	d
mem	kernel.asm	/^  mem = kalloc();$/;"	d
mem	user/usertests.c	/^mem(void)$/;"	f	typeref:typename:void
memcmp	string.c	/^memcmp(const void *v1, const void *v2, uint n)$/;"	f	typeref:typename:int
memcpy	string.c	/^memcpy(void *dst, const void *src, uint n)$/;"	f	typeref:typename:void *
memdisk	memide.c	/^static uchar *memdisk;$/;"	v	typeref:typename:uchar *	file:
memmove	string.c	/^memmove(void *dst, const void *src, uint n)$/;"	f	typeref:typename:void *
memmove	user/ulib.c	/^memmove(void *vdst, const void *vsrc, int n)$/;"	f	typeref:typename:void *
memset	string.c	/^memset(void *dst, int c, uint n)$/;"	f	typeref:typename:void *
memset	user/ulib.c	/^memset(void *dst, int c, uint n)$/;"	f	typeref:typename:void *
memsz	elf.h	/^  uint memsz;$/;"	m	struct:proghdr	typeref:typename:uint
microdelay	lapic.c	/^microdelay(int us)$/;"	f	typeref:typename:void
min	fs.c	/^#define min(/;"	d	file:
min	mkfs.c	/^#define min(/;"	d	file:
minor	file.h	/^  short minor;$/;"	m	struct:inode	typeref:typename:short
minor	fs.h	/^  short minor;          \/\/ Minor device number (T_DEV only)$/;"	m	struct:dinode	typeref:typename:short
minute	date.h	/^  uint minute;$/;"	m	struct:rtcdate	typeref:typename:uint
mkdir	user/mkdir.asm	/^mkdir:     formato del fichero elf32-i386$/;"	l
mkfs	Makefile	/^mkfs: mkfs.c fs.h$/;"	t
mode	user/sh.c	/^  int mode;$/;"	m	struct:redircmd	typeref:typename:int	file:
month	date.h	/^  uint month;$/;"	m	struct:rtcdate	typeref:typename:uint
morecore	user/umalloc.c	/^morecore(uint nu)$/;"	f	typeref:typename:Header *	file:
mp	mp.h	/^struct mp {             \/\/ floating pointer$/;"	s
mpconf	mp.h	/^struct mpconf {         \/\/ configuration table header$/;"	s
mpconfig	mp.c	/^mpconfig(struct mp **pmp)$/;"	f	typeref:struct:mpconf *	file:
mpenter	main.c	/^mpenter(void)$/;"	f	typeref:typename:void	file:
mpinit	mp.c	/^mpinit(void)$/;"	f	typeref:typename:void
mpioapic	mp.h	/^struct mpioapic {       \/\/ I\/O APIC table entry$/;"	s
mpmain	main.c	/^mpmain(void)$/;"	f	typeref:typename:void	file:
mpproc	mp.h	/^struct mpproc {         \/\/ processor table entry$/;"	s
mpsearch	mp.c	/^mpsearch(void)$/;"	f	typeref:struct:mp *	file:
mpsearch1	mp.c	/^mpsearch1(uint a, int len)$/;"	f	typeref:struct:mp *	file:
multiboot_header	entry.S	/^multiboot_header:$/;"	l
mycpu	proc.c	/^mycpu(void)$/;"	f	typeref:struct:cpu *
myproc	proc.c	/^myproc(void) {$/;"	f	typeref:struct:proc *
n	kernel.asm	/^      n = PGSIZE;$/;"	d
n	kernel.asm	/^      n = len;$/;"	d
n	kernel.asm	/^      n = sz - i;$/;"	d
n	kernel.asm	/^    n = PGSIZE - (va - va0);$/;"	d
n	log.c	/^  int n;$/;"	m	struct:logheader	typeref:typename:int	file:
n	user/forktest.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	user/forktest.asm	/^  n = 0;$/;"	d
n	user/grep.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	user/grep.asm	/^  n = 0;$/;"	d
n	user/kill.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	user/kill.asm	/^  n = 0;$/;"	d
n	user/ls.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	user/ls.asm	/^  n = 0;$/;"	d
n	user/sh.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	user/sh.asm	/^  n = 0;$/;"	d
n	user/stressfs.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	user/stressfs.asm	/^  n = 0;$/;"	d
n	user/usertests.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	user/usertests.asm	/^  n = 0;$/;"	d
n	user/wc.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	user/wc.asm	/^  n = 0;$/;"	d
n1	kernel.asm	/^        n1 = max;$/;"	d
name	fs.h	/^  char name[DIRSIZ];$/;"	m	struct:dirent	typeref:typename:char[]
name	proc.h	/^  char name[16];               \/\/ Process name (debugging)$/;"	m	struct:proc	typeref:typename:char[16]
name	sleeplock.h	/^  char *name;        \/\/ Name of lock.$/;"	m	struct:sleeplock	typeref:typename:char *
name	spinlock.h	/^  char *name;        \/\/ Name of lock.$/;"	m	struct:spinlock	typeref:typename:char *
name	user/cat.asm	/^    ret$/;"	l
name	user/echo.asm	/^    ret$/;"	l
name	user/forktest.asm	/^    ret$/;"	l
name	user/grep.asm	/^    ret$/;"	l
name	user/init.asm	/^    ret$/;"	l
name	user/kill.asm	/^    ret$/;"	l
name	user/ln.asm	/^    ret$/;"	l
name	user/ls.asm	/^    ret$/;"	l
name	user/mkdir.asm	/^    ret$/;"	l
name	user/rm.asm	/^    ret$/;"	l
name	user/sh.asm	/^    ret$/;"	l
name	user/stressfs.asm	/^    ret$/;"	l
name	user/usertests.asm	/^    ret$/;"	l
name	user/usertests.c	/^    char name[14];$/;"	m	struct:concreate::__anon2469bfd60208	typeref:typename:char[14]	file:
name	user/usertests.c	/^char name[3];$/;"	v	typeref:typename:char[3]
name	user/wc.asm	/^    ret$/;"	l
name	user/zombie.asm	/^    ret$/;"	l
namecmp	fs.c	/^namecmp(const char *s, const char *t)$/;"	f	typeref:typename:int
namei	fs.c	/^namei(char *path)$/;"	f	typeref:struct:inode *
nameiparent	fs.c	/^nameiparent(char *path, char *name)$/;"	f	typeref:struct:inode *
namex	fs.c	/^namex(char *path, int nameiparent, char *name)$/;"	f	typeref:struct:inode *	file:
nbitmap	mkfs.c	/^int nbitmap = FSSIZE\/(BSIZE*8) + 1;$/;"	v	typeref:typename:int
nblocks	fs.h	/^  uint nblocks;      \/\/ Number of data blocks$/;"	m	struct:superblock	typeref:typename:uint
nblocks	mkfs.c	/^int nblocks;  \/\/ Number of data blocks$/;"	v	typeref:typename:int
nc	user/usertests.asm	/^  nc = np = 0;$/;"	d
ncli	proc.h	/^  int ncli;                    \/\/ Depth of pushcli nesting.$/;"	m	struct:cpu	typeref:typename:int
ncpu	mp.c	/^int ncpu;$/;"	v	typeref:typename:int
neg	user/cat.asm	/^    neg = 1;$/;"	d
neg	user/cat.asm	/^  neg = 0;$/;"	d
neg	user/echo.asm	/^    neg = 1;$/;"	d
neg	user/echo.asm	/^  neg = 0;$/;"	d
neg	user/grep.asm	/^    neg = 1;$/;"	d
neg	user/grep.asm	/^  neg = 0;$/;"	d
neg	user/init.asm	/^    neg = 1;$/;"	d
neg	user/init.asm	/^  neg = 0;$/;"	d
neg	user/kill.asm	/^    neg = 1;$/;"	d
neg	user/kill.asm	/^  neg = 0;$/;"	d
neg	user/ln.asm	/^    neg = 1;$/;"	d
neg	user/ln.asm	/^  neg = 0;$/;"	d
neg	user/ls.asm	/^    neg = 1;$/;"	d
neg	user/ls.asm	/^  neg = 0;$/;"	d
neg	user/mkdir.asm	/^    neg = 1;$/;"	d
neg	user/mkdir.asm	/^  neg = 0;$/;"	d
neg	user/rm.asm	/^    neg = 1;$/;"	d
neg	user/rm.asm	/^  neg = 0;$/;"	d
neg	user/sh.asm	/^    neg = 1;$/;"	d
neg	user/sh.asm	/^  neg = 0;$/;"	d
neg	user/stressfs.asm	/^    neg = 1;$/;"	d
neg	user/stressfs.asm	/^  neg = 0;$/;"	d
neg	user/usertests.asm	/^    neg = 1;$/;"	d
neg	user/usertests.asm	/^  neg = 0;$/;"	d
neg	user/wc.asm	/^    neg = 1;$/;"	d
neg	user/wc.asm	/^  neg = 0;$/;"	d
next	buf.h	/^  struct buf *next;$/;"	m	struct:buf	typeref:struct:buf *
next	kalloc.c	/^  struct run *next;$/;"	m	struct:run	typeref:struct:run *	file:
nextpid	proc.c	/^int nextpid = 1;$/;"	v	typeref:typename:int
ninodeblocks	mkfs.c	/^int ninodeblocks = NINODES \/ IPB + 1;$/;"	v	typeref:typename:int
ninodes	fs.h	/^  uint ninodes;      \/\/ Number of inodes.$/;"	m	struct:superblock	typeref:typename:uint
nlink	file.h	/^  short nlink;$/;"	m	struct:inode	typeref:typename:short
nlink	fs.h	/^  short nlink;          \/\/ Number of links to inode in file system$/;"	m	struct:dinode	typeref:typename:short
nlink	stat.h	/^  short nlink; \/\/ Number of links to file$/;"	m	struct:stat	typeref:typename:short
nlog	fs.h	/^  uint nlog;         \/\/ Number of log blocks$/;"	m	struct:superblock	typeref:typename:uint
nlog	mkfs.c	/^int nlog = LOGSIZE;$/;"	v	typeref:typename:int
nmeta	mkfs.c	/^int nmeta;    \/\/ Number of meta blocks (boot, sb, nlog, inode, bitmap)$/;"	v	typeref:typename:int
normalmap	kbd.h	/^static uchar normalmap[256] =$/;"	v	typeref:typename:uchar[256]
nread	pipe.c	/^  uint nread;     \/\/ number of bytes read$/;"	m	struct:pipe	typeref:typename:uint	file:
nu	user/sh.asm	/^    nu = 4096;$/;"	d
nu	user/usertests.asm	/^    nu = 4096;$/;"	d
nulterminate	user/sh.c	/^nulterminate(struct cmd *cmd)$/;"	f	typeref:struct:cmd *
num	kernel.asm	/^  num = curproc->tf->eax;$/;"	d
nunits	user/sh.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	user/usertests.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nwrite	pipe.c	/^  uint nwrite;    \/\/ number of bytes written$/;"	m	struct:pipe	typeref:typename:uint	file:
odd	runoff.spec	/^odd: fs.c   # VERY important$/;"	t
odd	runoff.spec	/^odd: sh.c$/;"	t
oemlength	mp.h	/^  ushort oemlength;             \/\/ OEM table length$/;"	m	struct:mpconf	typeref:typename:ushort
oemtable	mp.h	/^  uint *oemtable;               \/\/ OEM table pointer$/;"	m	struct:mpconf	typeref:typename:uint *
oesp	x86.h	/^  uint oesp;      \/\/ useless & ignored$/;"	m	struct:trapframe	typeref:typename:uint
off	elf.h	/^  uint off;$/;"	m	struct:proghdr	typeref:typename:uint
off	file.h	/^  uint off;$/;"	m	struct:file	typeref:typename:uint
off_15_0	mmu.h	/^  uint off_15_0 : 16;   \/\/ low 16 bits of offset in segment$/;"	m	struct:gatedesc	typeref:typename:uint:16
off_31_16	mmu.h	/^  uint off_31_16 : 16;  \/\/ high bits of offset in segment$/;"	m	struct:gatedesc	typeref:typename:uint:16
offset	bootblock.asm	/^  offset = (offset \/ SECTSIZE) + 1;$/;"	d
ofile	proc.h	/^  struct file *ofile[NOFILE];  \/\/ Open files$/;"	m	struct:proc	typeref:struct:file * []
oldbrk	user/usertests.asm	/^  oldbrk = sbrk(0);$/;"	d
oldpgdir	kernel.asm	/^  oldpgdir = curproc->pgdir;$/;"	d
openiputtest	user/usertests.c	/^openiputtest(void)$/;"	f	typeref:typename:void
opentest	user/usertests.c	/^opentest(void)$/;"	f	typeref:typename:void
os	kernel.asm	/^  os = s;$/;"	d
os	user/forktest.asm	/^  os = s;$/;"	d
os	user/grep.asm	/^  os = s;$/;"	d
os	user/kill.asm	/^  os = s;$/;"	d
os	user/ls.asm	/^  os = s;$/;"	d
os	user/sh.asm	/^  os = s;$/;"	d
os	user/stressfs.asm	/^  os = s;$/;"	d
os	user/usertests.asm	/^  os = s;$/;"	d
os	user/wc.asm	/^  os = s;$/;"	d
outb	x86.h	/^outb(ushort port, uchar data)$/;"	f	typeref:typename:void
outsl	x86.h	/^outsl(int port, const void *addr, int cnt)$/;"	f	typeref:typename:void
outstanding	log.c	/^  int outstanding; \/\/ how many FS sys calls are executing.$/;"	m	struct:log	typeref:typename:int	file:
outw	x86.h	/^outw(ushort port, ushort data)$/;"	f	typeref:typename:void
p	kernel.asm	/^    p = ((bda[0x14]<<8)|bda[0x13])*1024;$/;"	d
p	kernel.asm	/^  p = (char*)PGROUNDUP((uint)vstart);$/;"	d
p	kernel.asm	/^  p = 0;$/;"	d
p	kernel.asm	/^  p = allocproc();$/;"	d
p	kernel.asm	/^  p = c->proc;$/;"	d
p	mmu.h	/^  uint p : 1;           \/\/ Present$/;"	m	struct:gatedesc	typeref:typename:uint:1
p	mmu.h	/^  uint p : 1;          \/\/ Present$/;"	m	struct:segdesc	typeref:typename:uint:1
p	user/grep.asm	/^      p = q+1;$/;"	d
p	user/grep.asm	/^    p = buf;$/;"	d
p	user/ls.asm	/^    p = buf+strlen(buf);$/;"	d
p	user/sh.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	user/usertests.asm	/^  p = sbrk(amt);$/;"	d
p	user/usertests.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
pa	bootblock.asm	/^    pa = (uchar*)ph->paddr;$/;"	d
pa	kernel.asm	/^      pa = PTE_ADDR(*pte);$/;"	d
pa	kernel.asm	/^    pa = PTE_ADDR(*pte);$/;"	d
pa0	kernel.asm	/^    pa0 = uva2ka(pgdir, (char*)va0);$/;"	d
pad	ioapic.c	/^  uint pad[3];$/;"	m	struct:ioapic	typeref:typename:uint[3]	file:
pad	runoff	/^pad()$/;"	f
padding1	mmu.h	/^  ushort padding1;$/;"	m	struct:taskstate	typeref:typename:ushort
padding1	x86.h	/^  ushort padding1;$/;"	m	struct:trapframe	typeref:typename:ushort
padding10	mmu.h	/^  ushort padding10;$/;"	m	struct:taskstate	typeref:typename:ushort
padding2	mmu.h	/^  ushort padding2;$/;"	m	struct:taskstate	typeref:typename:ushort
padding2	x86.h	/^  ushort padding2;$/;"	m	struct:trapframe	typeref:typename:ushort
padding3	mmu.h	/^  ushort padding3;$/;"	m	struct:taskstate	typeref:typename:ushort
padding3	x86.h	/^  ushort padding3;$/;"	m	struct:trapframe	typeref:typename:ushort
padding4	mmu.h	/^  ushort padding4;$/;"	m	struct:taskstate	typeref:typename:ushort
padding4	x86.h	/^  ushort padding4;$/;"	m	struct:trapframe	typeref:typename:ushort
padding5	mmu.h	/^  ushort padding5;$/;"	m	struct:taskstate	typeref:typename:ushort
padding5	x86.h	/^  ushort padding5;$/;"	m	struct:trapframe	typeref:typename:ushort
padding6	mmu.h	/^  ushort padding6;$/;"	m	struct:taskstate	typeref:typename:ushort
padding6	x86.h	/^  ushort padding6;$/;"	m	struct:trapframe	typeref:typename:ushort
padding7	mmu.h	/^  ushort padding7;$/;"	m	struct:taskstate	typeref:typename:ushort
padding8	mmu.h	/^  ushort padding8;$/;"	m	struct:taskstate	typeref:typename:ushort
padding9	mmu.h	/^  ushort padding9;$/;"	m	struct:taskstate	typeref:typename:ushort
paddr	elf.h	/^  uint paddr;$/;"	m	struct:proghdr	typeref:typename:uint
panic	console.c	/^panic(char *s)$/;"	f	typeref:typename:void
panic	user/sh.c	/^panic(char *s)$/;"	f	typeref:typename:void
panicked	console.c	/^static int panicked = 0;$/;"	v	typeref:typename:int	file:
panicked	kernel.asm	/^  panicked = 1; \/\/ freeze other CPU$/;"	d
parent	proc.h	/^  struct proc *parent;         \/\/ Parent process$/;"	m	struct:proc	typeref:struct:proc *
parseblock	user/sh.c	/^parseblock(char **ps, char *es)$/;"	f	typeref:struct:cmd *
parsecmd	user/sh.c	/^parsecmd(char *s)$/;"	f	typeref:struct:cmd *
parseexec	user/sh.c	/^parseexec(char **ps, char *es)$/;"	f	typeref:struct:cmd *
parseline	user/sh.c	/^parseline(char **ps, char *es)$/;"	f	typeref:struct:cmd *
parsepipe	user/sh.c	/^parsepipe(char **ps, char *es)$/;"	f	typeref:struct:cmd *
parseredirs	user/sh.c	/^parseredirs(struct cmd *cmd, char **ps, char *es)$/;"	f	typeref:struct:cmd *
pattern	user/grep.asm	/^  pattern = argv[1];$/;"	d
pcs	spinlock.h	/^  uint pcs[10];      \/\/ The call stack (an array of program counters)$/;"	m	struct:spinlock	typeref:typename:uint[10]
pde	kernel.asm	/^  pde = &pgdir[PDX(va)];$/;"	d
pde_t	kernel.asm	/^pde_t entrypgdir[];  \/\/ For entry.S$/;"	l
pde_t	types.h	/^typedef uint pde_t;$/;"	t	typeref:typename:uint
peek	user/sh.c	/^peek(char **ps, char *es, char *toks)$/;"	f	typeref:typename:int
perm	vm.c	/^  int perm;$/;"	m	struct:kmap	typeref:typename:int	file:
pgdir	kernel.asm	/^  pgdir = 0;$/;"	d
pgdir	proc.h	/^  pde_t* pgdir;                \/\/ Page table$/;"	m	struct:proc	typeref:typename:pde_t *
pgtab	kernel.asm	/^    pgtab = (pte_t*)P2V(PTE_ADDR(*pde));$/;"	d
ph	bootblock.asm	/^  ph = (struct proghdr*)((uchar*)elf + elf->phoff);$/;"	d
phentsize	elf.h	/^  ushort phentsize;$/;"	m	struct:elfhdr	typeref:typename:ushort
phnum	elf.h	/^  ushort phnum;$/;"	m	struct:elfhdr	typeref:typename:ushort
phoff	elf.h	/^  uint phoff;$/;"	m	struct:elfhdr	typeref:typename:uint
phys_end	vm.c	/^  uint phys_end;$/;"	m	struct:kmap	typeref:typename:uint	file:
phys_start	vm.c	/^  uint phys_start;$/;"	m	struct:kmap	typeref:typename:uint	file:
physaddr	mp.h	/^  void *physaddr;               \/\/ phys addr of MP config table$/;"	m	struct:mp	typeref:typename:void *
picinit	picirq.c	/^picinit(void)$/;"	f	typeref:typename:void
pid	kernel.asm	/^        pid = p->pid;$/;"	d
pid	kernel.asm	/^  pid = np->pid;$/;"	d
pid	proc.h	/^  int pid;                     \/\/ Process ID$/;"	m	struct:proc	typeref:typename:int
pid	sleeplock.h	/^  int pid;           \/\/ Process holding lock$/;"	m	struct:sleeplock	typeref:typename:int
pid	user/forktest.asm	/^    pid = fork();$/;"	d
pid	user/init.asm	/^    pid = fork();$/;"	d
pid	user/sh.asm	/^  pid = fork();$/;"	d
pid	user/usertests.asm	/^    pid = fork();$/;"	d
pid	user/usertests.asm	/^  pid = fork();$/;"	d
pid1	user/usertests.asm	/^  pid1 = fork();$/;"	d
pid2	user/usertests.asm	/^  pid2 = fork();$/;"	d
pid3	user/usertests.asm	/^  pid3 = fork();$/;"	d
pinit	proc.c	/^pinit(void)$/;"	f	typeref:typename:void
pipe	file.h	/^  struct pipe *pipe;$/;"	m	struct:file	typeref:struct:pipe *
pipe	pipe.c	/^struct pipe {$/;"	s	file:
pipe1	user/usertests.c	/^pipe1(void)$/;"	f	typeref:typename:void
pipealloc	pipe.c	/^pipealloc(struct file **f0, struct file **f1)$/;"	f	typeref:typename:int
pipeclose	pipe.c	/^pipeclose(struct pipe *p, int writable)$/;"	f	typeref:typename:void
pipecmd	user/sh.c	/^pipecmd(struct cmd *left, struct cmd *right)$/;"	f	typeref:struct:cmd *
pipecmd	user/sh.c	/^struct pipecmd {$/;"	s	file:
piperead	pipe.c	/^piperead(struct pipe *p, char *addr, int n)$/;"	f	typeref:typename:int
pipewrite	pipe.c	/^pipewrite(struct pipe *p, char *addr, int n)$/;"	f	typeref:typename:int
popcli	spinlock.c	/^popcli(void)$/;"	f	typeref:typename:void
port	user/usertests.asm	/^    port = RTC_DATA;$/;"	d
pos	kernel.asm	/^  pos = inb(CRTPORT+1) << 8;$/;"	d
ppid	user/usertests.asm	/^    ppid = getpid();$/;"	d
ppid	user/usertests.asm	/^  ppid = getpid();$/;"	d
preempt	user/usertests.c	/^preempt(void)$/;"	f	typeref:typename:void
prev	buf.h	/^  struct buf *prev; \/\/ LRU cache list$/;"	m	struct:buf	typeref:struct:buf *
print	Makefile	/^print: xv6.pdf$/;"	t
print-uprogs	user/Makefile	/^print-uprogs:$/;"	t
printf	user/forktest.c	/^printf(int fd, const char *s, ...)$/;"	f	typeref:typename:void
printf	user/printf.c	/^printf(int fd, const char *fmt, ...)$/;"	f	typeref:typename:void
printint	console.c	/^printint(int xx, int base, int sign)$/;"	f	typeref:typename:void	file:
printint	user/printf.c	/^printint(int fd, int xx, int base, int sgn)$/;"	f	typeref:typename:void	file:
proc	proc.c	/^  struct proc proc[NPROC];$/;"	m	struct:__anon156e3e2a0108	typeref:struct:proc[]	file:
proc	proc.h	/^  struct proc *proc;           \/\/ The process running on this cpu or null$/;"	m	struct:cpu	typeref:struct:proc *
proc	proc.h	/^struct proc {$/;"	s
procdump	proc.c	/^procdump(void)$/;"	f	typeref:typename:void
procstate	proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	g
product	mp.h	/^  uchar product[20];            \/\/ product id$/;"	m	struct:mpconf	typeref:typename:uchar[20]
proghdr	elf.h	/^struct proghdr {$/;"	s
ptable	proc.c	/^} ptable;$/;"	v	typeref:struct:__anon156e3e2a0108
pte	kernel.asm	/^    pte = walkpgdir(pgdir, (char*)a, 0);$/;"	d
pte	kernel.asm	/^  pte = walkpgdir(pgdir, uva, 0);$/;"	d
pte_t	mmu.h	/^typedef uint pte_t;$/;"	t	typeref:typename:uint
ptr	user/umalloc.c	/^    union header *ptr;$/;"	m	struct:header::__anon3d351ad10108	typeref:union:header *	file:
pushcli	spinlock.c	/^pushcli(void)$/;"	f	typeref:typename:void
putc	user/printf.c	/^putc(int fd, char c)$/;"	f	typeref:typename:void	file:
qemu	Makefile	/^qemu: fs.img xv6.img$/;"	t
qemu-gdb	Makefile	/^qemu-gdb: fs.img xv6.img .gdbinit$/;"	t
qemu-memfs	Makefile	/^qemu-memfs: xv6memfs.img$/;"	t
qemu-nox	Makefile	/^qemu-nox: fs.img xv6.img$/;"	t
qemu-nox-gdb	Makefile	/^qemu-nox-gdb: fs.img xv6.img .gdbinit$/;"	t
qnext	buf.h	/^  struct buf *qnext; \/\/ disk queue$/;"	m	struct:buf	typeref:struct:buf *
r	console.c	/^  uint r;  \/\/ Read index$/;"	m	struct:__anon96a473a90208	typeref:typename:uint	file:
r	kernel.asm	/^  r = (struct run*)v;$/;"	d
r	kernel.asm	/^  r = kmem.freelist;$/;"	d
r	kernel.asm	/^  r = lk->locked && (lk->pid == myproc()->pid);$/;"	d
r	kernel.asm	/^  r = lock->locked && lock->cpu == mycpu();$/;"	d
r	user/forktest.asm	/^  r = fstat(fd, st);$/;"	d
r	user/grep.asm	/^  r = fstat(fd, st);$/;"	d
r	user/kill.asm	/^  r = fstat(fd, st);$/;"	d
r	user/ls.asm	/^  r = fstat(fd, st);$/;"	d
r	user/sh.asm	/^  r = fstat(fd, st);$/;"	d
r	user/stressfs.asm	/^  r = fstat(fd, st);$/;"	d
r	user/usertests.asm	/^  r = fstat(fd, st);$/;"	d
r	user/wc.asm	/^  r = fstat(fd, st);$/;"	d
rand	user/usertests.c	/^rand()$/;"	f	typeref:typename:unsigned int
randstate	user/usertests.asm	/^  randstate = randstate * 1664525 + 1013904223;$/;"	d
randstate	user/usertests.c	/^unsigned long randstate = 1;$/;"	v	typeref:typename:unsigned long
rcr2	x86.h	/^rcr2(void)$/;"	f	typeref:typename:uint
read	file.h	/^  int (*read)(struct inode*, char*, int);$/;"	m	struct:devsw	typeref:typename:int (*)(struct inode *,char *,int)
read_head	log.c	/^read_head(void)$/;"	f	typeref:typename:void	file:
readable	file.h	/^  char readable;$/;"	m	struct:file	typeref:typename:char
readeflags	x86.h	/^readeflags(void)$/;"	f	typeref:typename:uint
readi	fs.c	/^readi(struct inode *ip, char *dst, uint off, uint n)$/;"	f	typeref:typename:int
readopen	pipe.c	/^  int readopen;   \/\/ read fd is still open$/;"	m	struct:pipe	typeref:typename:int	file:
readsb	fs.c	/^readsb(int dev, struct superblock *sb)$/;"	f	typeref:typename:void
readsect	bootmain.c	/^readsect(void *dst, uint offset)$/;"	f	typeref:typename:void
readseg	bootmain.c	/^readseg(uchar* pa, uint count, uint offset)$/;"	f	typeref:typename:void
recover_from_log	log.c	/^recover_from_log(void)$/;"	f	typeref:typename:void	file:
redircmd	user/sh.c	/^redircmd(struct cmd *subcmd, char *file, char *efile, int mode, int fd)$/;"	f	typeref:struct:cmd *
redircmd	user/sh.c	/^struct redircmd {$/;"	s	file:
ref	file.h	/^  int ref;            \/\/ Reference count$/;"	m	struct:inode	typeref:typename:int
ref	file.h	/^  int ref; \/\/ reference count$/;"	m	struct:file	typeref:typename:int
refcnt	buf.h	/^  uint refcnt;$/;"	m	struct:buf	typeref:typename:uint
reg	ioapic.c	/^  uint reg;$/;"	m	struct:ioapic	typeref:typename:uint	file:
release	spinlock.c	/^release(struct spinlock *lk)$/;"	f	typeref:typename:void
releasesleep	sleeplock.c	/^releasesleep(struct sleeplock *lk)$/;"	f	typeref:typename:void
reserved	mp.h	/^  uchar reserved;$/;"	m	struct:mpconf	typeref:typename:uchar
reserved	mp.h	/^  uchar reserved[3];$/;"	m	struct:mp	typeref:typename:uchar[3]
reserved	mp.h	/^  uchar reserved[8];$/;"	m	struct:mpproc	typeref:typename:uchar[8]
ret	user/sh.asm	/^      ret = '+';$/;"	d
ret	user/sh.asm	/^    ret = 'a';$/;"	d
ret	user/sh.asm	/^    ret = parseredirs(ret, ps, es);$/;"	d
ret	user/sh.asm	/^  ret = *s;$/;"	d
ret	user/sh.asm	/^  ret = execcmd();$/;"	d
ret	user/sh.asm	/^  ret = parseredirs(ret, ps, es);$/;"	d
return	kernel.asm	/^  return d;$/;"	d
right	runoff.spec	/^right: proc.c   # VERY important$/;"	t
right	user/sh.c	/^  struct cmd *right;$/;"	m	struct:listcmd	typeref:struct:cmd *	file:
right	user/sh.c	/^  struct cmd *right;$/;"	m	struct:pipecmd	typeref:struct:cmd *	file:
rinode	mkfs.c	/^rinode(uint inum, struct dinode *ip)$/;"	f	typeref:typename:void
rm	user/rm.asm	/^rm:     formato del fichero elf32-i386$/;"	l
rmdot	user/usertests.c	/^rmdot(void)$/;"	f	typeref:typename:void
rsect	mkfs.c	/^rsect(uint sec, void *buf)$/;"	f	typeref:typename:void
rsv1	mmu.h	/^  uint rsv1 : 1;       \/\/ Reserved$/;"	m	struct:segdesc	typeref:typename:uint:1
rsv1	mmu.h	/^  uint rsv1 : 3;        \/\/ reserved(should be zero I guess)$/;"	m	struct:gatedesc	typeref:typename:uint:3
rtcdate	date.h	/^struct rtcdate {$/;"	s
run	kalloc.c	/^struct run {$/;"	s	file:
runcmd	user/sh.c	/^runcmd(struct cmd *cmd)$/;"	f	typeref:typename:void
s	kernel.asm	/^        s = "(null)";$/;"	d
s	kernel.asm	/^  s = path;$/;"	d
s	kernel.asm	/^  s = src;$/;"	d
s	mmu.h	/^  uint s : 1;           \/\/ must be 0 (system)$/;"	m	struct:gatedesc	typeref:typename:uint:1
s	mmu.h	/^  uint s : 1;          \/\/ 0 = system, 1 = application$/;"	m	struct:segdesc	typeref:typename:uint:1
s	user/cat.asm	/^          s = "(null)";$/;"	d
s	user/cat.asm	/^        s = (char*)*ap;$/;"	d
s	user/echo.asm	/^          s = "(null)";$/;"	d
s	user/echo.asm	/^        s = (char*)*ap;$/;"	d
s	user/grep.asm	/^          s = "(null)";$/;"	d
s	user/grep.asm	/^        s = (char*)*ap;$/;"	d
s	user/init.asm	/^          s = "(null)";$/;"	d
s	user/init.asm	/^        s = (char*)*ap;$/;"	d
s	user/kill.asm	/^          s = "(null)";$/;"	d
s	user/kill.asm	/^        s = (char*)*ap;$/;"	d
s	user/ln.asm	/^          s = "(null)";$/;"	d
s	user/ln.asm	/^        s = (char*)*ap;$/;"	d
s	user/ls.asm	/^          s = "(null)";$/;"	d
s	user/ls.asm	/^        s = (char*)*ap;$/;"	d
s	user/mkdir.asm	/^          s = "(null)";$/;"	d
s	user/mkdir.asm	/^        s = (char*)*ap;$/;"	d
s	user/rm.asm	/^          s = "(null)";$/;"	d
s	user/rm.asm	/^        s = (char*)*ap;$/;"	d
s	user/sh.asm	/^          s = "(null)";$/;"	d
s	user/sh.asm	/^        s = (char*)*ap;$/;"	d
s	user/sh.asm	/^  s = *ps;$/;"	d
s	user/stressfs.asm	/^          s = "(null)";$/;"	d
s	user/stressfs.asm	/^        s = (char*)*ap;$/;"	d
s	user/umalloc.c	/^  } s;$/;"	m	union:header	typeref:struct:header::__anon3d351ad10108	file:
s	user/usertests.asm	/^          s = "(null)";$/;"	d
s	user/usertests.asm	/^        s = (char*)*ap;$/;"	d
s	user/wc.asm	/^          s = "(null)";$/;"	d
s	user/wc.asm	/^        s = (char*)*ap;$/;"	d
s1	kernel.asm	/^  s1 = v1;$/;"	d
s2	kernel.asm	/^  s2 = v2;$/;"	d
safestrcpy	string.c	/^safestrcpy(char *s, const char *t, int n)$/;"	f	typeref:typename:char *
sb	fs.c	/^struct superblock sb; $/;"	v	typeref:struct:superblock
sb	kernel.asm	/^  sb = cmos_read(CMOS_STATB);$/;"	d
sb	mkfs.c	/^struct superblock sb;$/;"	v	typeref:struct:superblock
sbrktest	user/usertests.c	/^sbrktest(void)$/;"	f	typeref:typename:void
sched	proc.c	/^sched(void)$/;"	f	typeref:typename:void
scheduler	proc.c	/^scheduler(void)$/;"	f	typeref:typename:void
scheduler	proc.h	/^  struct context *scheduler;   \/\/ swtch() here to enter scheduler$/;"	m	struct:cpu	typeref:struct:context *
second	date.h	/^  uint second;$/;"	m	struct:rtcdate	typeref:typename:uint
segdesc	mmu.h	/^struct segdesc {$/;"	s
seginit	vm.c	/^seginit(void)$/;"	f	typeref:typename:void
seq	user/usertests.asm	/^  seq = 0;$/;"	d
setupkvm	vm.c	/^setupkvm(void)$/;"	f	typeref:typename:pde_t *
sh	user/sh.asm	/^sh:     formato del fichero elf32-i386$/;"	l
sharedfd	user/usertests.c	/^sharedfd(void)$/;"	f	typeref:typename:void
sheet1	runoff.spec	/^sheet1: left$/;"	t
shentsize	elf.h	/^  ushort shentsize;$/;"	m	struct:elfhdr	typeref:typename:ushort
shiftcode	kbd.h	/^static uchar shiftcode[256] =$/;"	v	typeref:typename:uchar[256]
shiftmap	kbd.h	/^static uchar shiftmap[256] =$/;"	v	typeref:typename:uchar[256]
shnum	elf.h	/^  ushort shnum;$/;"	m	struct:elfhdr	typeref:typename:ushort
shoff	elf.h	/^  uint shoff;$/;"	m	struct:elfhdr	typeref:typename:uint
shstrndx	elf.h	/^  ushort shstrndx;$/;"	m	struct:elfhdr	typeref:typename:ushort
signature	mp.h	/^  uchar signature[4];           \/\/ "PCMP"$/;"	m	struct:mpconf	typeref:typename:uchar[4]
signature	mp.h	/^  uchar signature[4];           \/\/ "_MP_"$/;"	m	struct:mp	typeref:typename:uchar[4]
signature	mp.h	/^  uchar signature[4];           \/\/ CPU signature$/;"	m	struct:mpproc	typeref:typename:uchar[4]
size	file.h	/^  uint size;$/;"	m	struct:inode	typeref:typename:uint
size	fs.h	/^  uint size;            \/\/ Size of file (bytes)$/;"	m	struct:dinode	typeref:typename:uint
size	fs.h	/^  uint size;         \/\/ Size of file system image (blocks)$/;"	m	struct:superblock	typeref:typename:uint
size	log.c	/^  int size;$/;"	m	struct:log	typeref:typename:int	file:
size	stat.h	/^  uint size;   \/\/ Size of file in bytes$/;"	m	struct:stat	typeref:typename:uint
size	user/umalloc.c	/^    uint size;$/;"	m	struct:header::__anon3d351ad10108	typeref:typename:uint	file:
skipelem	fs.c	/^skipelem(char *path, char *name)$/;"	f	typeref:typename:char *	file:
sleep	proc.c	/^sleep(void *chan, struct spinlock *lk)$/;"	f	typeref:typename:void
sleeplock	sleeplock.h	/^struct sleeplock {$/;"	s
sp	kernel.asm	/^    sp = (sp - (strlen(argv[argc]) + 1)) & ~3;$/;"	d
sp	kernel.asm	/^  sp = sz;$/;"	d
specrev	mp.h	/^  uchar specrev;                \/\/ [14]$/;"	m	struct:mp	typeref:typename:uchar
spin	bootasm.S	/^spin:$/;"	l
spin	bootblock.asm	/^spin:$/;"	l
spin	entryother.S	/^spin:$/;"	l
spin	entryother.asm	/^spin:$/;"	l
spinlock	spinlock.h	/^struct spinlock {$/;"	s
src	user/forktest.asm	/^  src = vsrc;$/;"	d
src	user/grep.asm	/^  src = vsrc;$/;"	d
src	user/kill.asm	/^  src = vsrc;$/;"	d
src	user/ls.asm	/^  src = vsrc;$/;"	d
src	user/sh.asm	/^  src = vsrc;$/;"	d
src	user/stressfs.asm	/^  src = vsrc;$/;"	d
src	user/usertests.asm	/^  src = vsrc;$/;"	d
src	user/wc.asm	/^  src = vsrc;$/;"	d
ss	mmu.h	/^  ushort ss;$/;"	m	struct:taskstate	typeref:typename:ushort
ss	x86.h	/^  ushort ss;$/;"	m	struct:trapframe	typeref:typename:ushort
ss0	mmu.h	/^  ushort ss0;        \/\/   after an increase in privilege level$/;"	m	struct:taskstate	typeref:typename:ushort
ss1	mmu.h	/^  ushort ss1;$/;"	m	struct:taskstate	typeref:typename:ushort
ss2	mmu.h	/^  ushort ss2;$/;"	m	struct:taskstate	typeref:typename:ushort
st	kernel.asm	/^  st = inb(KBSTATP);$/;"	d
stack	kernel.asm	/^    stack = kalloc();$/;"	d
start	bootasm.S	/^start:$/;"	l
start	bootblock.asm	/^start:$/;"	l
start	entryother.S	/^start:$/;"	l
start	entryother.asm	/^start:$/;"	l
start	initcode.S	/^start:$/;"	l
start	initcode.asm	/^start:$/;"	l
start	log.c	/^  int start;$/;"	m	struct:log	typeref:typename:int	file:
start	user/ulib.c	/^start()$/;"	f	typeref:typename:void
start32	bootasm.S	/^start32:$/;"	l
start32	bootblock.asm	/^start32:$/;"	l
start32	entryother.S	/^start32:$/;"	l
start32	entryother.asm	/^start32:$/;"	l
started	proc.h	/^  volatile uint started;       \/\/ Has the CPU started?$/;"	m	struct:cpu	typeref:typename:volatile uint
startothers	main.c	/^startothers(void)$/;"	f	typeref:typename:void	file:
stat	mkfs.c	/^#define stat /;"	d	file:
stat	stat.h	/^struct stat {$/;"	s
stat	user/ulib.c	/^stat(const char *n, struct stat *st)$/;"	f	typeref:typename:int
state	kernel.asm	/^      state = "???";$/;"	d
state	kernel.asm	/^      state = states[p->state];$/;"	d
state	proc.h	/^  enum procstate state;        \/\/ Process state$/;"	m	struct:proc	typeref:enum:procstate
state	user/cat.asm	/^        state = '%';$/;"	d
state	user/cat.asm	/^      state = 0;$/;"	d
state	user/cat.asm	/^  state = 0;$/;"	d
state	user/echo.asm	/^        state = '%';$/;"	d
state	user/echo.asm	/^      state = 0;$/;"	d
state	user/echo.asm	/^  state = 0;$/;"	d
state	user/grep.asm	/^        state = '%';$/;"	d
state	user/grep.asm	/^      state = 0;$/;"	d
state	user/grep.asm	/^  state = 0;$/;"	d
state	user/init.asm	/^        state = '%';$/;"	d
state	user/init.asm	/^      state = 0;$/;"	d
state	user/init.asm	/^  state = 0;$/;"	d
state	user/kill.asm	/^        state = '%';$/;"	d
state	user/kill.asm	/^      state = 0;$/;"	d
state	user/kill.asm	/^  state = 0;$/;"	d
state	user/ln.asm	/^        state = '%';$/;"	d
state	user/ln.asm	/^      state = 0;$/;"	d
state	user/ln.asm	/^  state = 0;$/;"	d
state	user/ls.asm	/^        state = '%';$/;"	d
state	user/ls.asm	/^      state = 0;$/;"	d
state	user/ls.asm	/^  state = 0;$/;"	d
state	user/mkdir.asm	/^        state = '%';$/;"	d
state	user/mkdir.asm	/^      state = 0;$/;"	d
state	user/mkdir.asm	/^  state = 0;$/;"	d
state	user/rm.asm	/^        state = '%';$/;"	d
state	user/rm.asm	/^      state = 0;$/;"	d
state	user/rm.asm	/^  state = 0;$/;"	d
state	user/sh.asm	/^        state = '%';$/;"	d
state	user/sh.asm	/^      state = 0;$/;"	d
state	user/sh.asm	/^  state = 0;$/;"	d
state	user/stressfs.asm	/^        state = '%';$/;"	d
state	user/stressfs.asm	/^      state = 0;$/;"	d
state	user/stressfs.asm	/^  state = 0;$/;"	d
state	user/usertests.asm	/^        state = '%';$/;"	d
state	user/usertests.asm	/^      state = 0;$/;"	d
state	user/usertests.asm	/^  state = 0;$/;"	d
state	user/wc.asm	/^        state = '%';$/;"	d
state	user/wc.asm	/^      state = 0;$/;"	d
state	user/wc.asm	/^  state = 0;$/;"	d
stati	fs.c	/^stati(struct inode *ip, struct stat *st)$/;"	f	typeref:typename:void
static	bootblock.asm	/^static inline uchar$/;"	l
static	bootblock.asm	/^static inline void$/;"	l
static	kernel.asm	/^static char*$/;"	l
static	kernel.asm	/^static inline void$/;"	l
static	kernel.asm	/^static int$/;"	l
static	kernel.asm	/^static pte_t *$/;"	l
static	kernel.asm	/^static struct buf*$/;"	t
static	kernel.asm	/^static struct inode*$/;"	t
static	kernel.asm	/^static struct mp*$/;"	t
static	kernel.asm	/^static struct mpconf*$/;"	t
static	kernel.asm	/^static uchar$/;"	l
static	kernel.asm	/^static void$/;"	l
static	user/cat.asm	/^static void$/;"	l
static	user/echo.asm	/^static void$/;"	l
static	user/forktest.asm	/^static inline void$/;"	l
static	user/grep.asm	/^static inline void$/;"	l
static	user/grep.asm	/^static void$/;"	l
static	user/init.asm	/^static void$/;"	l
static	user/kill.asm	/^static inline void$/;"	l
static	user/kill.asm	/^static void$/;"	l
static	user/ln.asm	/^static void$/;"	l
static	user/ls.asm	/^static inline void$/;"	l
static	user/ls.asm	/^static void$/;"	l
static	user/mkdir.asm	/^static void$/;"	l
static	user/rm.asm	/^static void$/;"	l
static	user/sh.asm	/^static Header *freep;$/;"	l
static	user/sh.asm	/^static Header base;$/;"	l
static	user/sh.asm	/^static Header*$/;"	l
static	user/sh.asm	/^static inline void$/;"	l
static	user/sh.asm	/^static void$/;"	l
static	user/stressfs.asm	/^static inline void$/;"	l
static	user/stressfs.asm	/^static void$/;"	l
static	user/usertests.asm	/^static Header *freep;$/;"	l
static	user/usertests.asm	/^static Header base;$/;"	l
static	user/usertests.asm	/^static Header*$/;"	l
static	user/usertests.asm	/^static inline void$/;"	l
static	user/usertests.asm	/^static void$/;"	l
static	user/wc.asm	/^static inline void$/;"	l
static	user/wc.asm	/^static void$/;"	l
static_assert	mkfs.c	/^#define static_assert(/;"	d	file:
stdout	user/usertests.c	/^int stdout = 1;$/;"	v	typeref:typename:int
sti	x86.h	/^sti(void)$/;"	f	typeref:typename:void
stosb	x86.h	/^stosb(void *addr, int data, int cnt)$/;"	f	typeref:typename:void
stosl	x86.h	/^stosl(void *addr, int data, int cnt)$/;"	f	typeref:typename:void
strchr	user/ulib.c	/^strchr(const char *s, char c)$/;"	f	typeref:typename:char *
strcmp	user/ulib.c	/^strcmp(const char *p, const char *q)$/;"	f	typeref:typename:int
strcpy	user/ulib.c	/^strcpy(char *s, const char *t)$/;"	f	typeref:typename:char *
stressfs	user/stressfs.asm	/^stressfs:     formato del fichero elf32-i386$/;"	l
strlen	string.c	/^strlen(const char *s)$/;"	f	typeref:typename:int
strlen	user/ulib.c	/^strlen(const char *s)$/;"	f	typeref:typename:uint
strncmp	string.c	/^strncmp(const char *p, const char *q, uint n)$/;"	f	typeref:typename:int
strncpy	string.c	/^strncpy(char *s, const char *t, int n)$/;"	f	typeref:typename:char *
struct	kernel.asm	/^  struct proc *curproc = myproc();$/;"	l
struct	kernel.asm	/^  struct proc *p = myproc();$/;"	l
struct	kernel.asm	/^  struct proc *p;$/;"	l
subdir	user/usertests.c	/^subdir(void)$/;"	f	typeref:typename:void
sum	kernel.asm	/^  sum = 0;$/;"	d
sum	mp.c	/^sum(uchar *addr, int len)$/;"	f	typeref:typename:uchar	file:
superblock	fs.h	/^struct superblock {$/;"	s
switchkvm	vm.c	/^switchkvm(void)$/;"	f	typeref:typename:void
switchuvm	vm.c	/^switchuvm(struct proc *p)$/;"	f	typeref:typename:void
swtch	kernel.asm	/^swtch:$/;"	l
swtch	swtch.S	/^swtch:$/;"	l
symbols	user/sh.c	/^char symbols[] = "<|>&;()";$/;"	v	typeref:typename:char[]
sys_chdir	sysfile.c	/^sys_chdir(void)$/;"	f	typeref:typename:int
sys_close	sysfile.c	/^sys_close(void)$/;"	f	typeref:typename:int
sys_dup	sysfile.c	/^sys_dup(void)$/;"	f	typeref:typename:int
sys_exec	sysfile.c	/^sys_exec(void)$/;"	f	typeref:typename:int
sys_exit	sysproc.c	/^sys_exit(void)$/;"	f	typeref:typename:int
sys_fork	sysproc.c	/^sys_fork(void)$/;"	f	typeref:typename:int
sys_fstat	sysfile.c	/^sys_fstat(void)$/;"	f	typeref:typename:int
sys_getpid	sysproc.c	/^sys_getpid(void)$/;"	f	typeref:typename:int
sys_kill	sysproc.c	/^sys_kill(void)$/;"	f	typeref:typename:int
sys_link	sysfile.c	/^sys_link(void)$/;"	f	typeref:typename:int
sys_mkdir	sysfile.c	/^sys_mkdir(void)$/;"	f	typeref:typename:int
sys_mknod	sysfile.c	/^sys_mknod(void)$/;"	f	typeref:typename:int
sys_open	sysfile.c	/^sys_open(void)$/;"	f	typeref:typename:int
sys_pipe	sysfile.c	/^sys_pipe(void)$/;"	f	typeref:typename:int
sys_read	sysfile.c	/^sys_read(void)$/;"	f	typeref:typename:int
sys_sbrk	sysproc.c	/^sys_sbrk(void)$/;"	f	typeref:typename:int
sys_sleep	sysproc.c	/^sys_sleep(void)$/;"	f	typeref:typename:int
sys_unlink	sysfile.c	/^sys_unlink(void)$/;"	f	typeref:typename:int
sys_uptime	sysproc.c	/^sys_uptime(void)$/;"	f	typeref:typename:int
sys_wait	sysproc.c	/^sys_wait(void)$/;"	f	typeref:typename:int
sys_write	sysfile.c	/^sys_write(void)$/;"	f	typeref:typename:int
syscall	syscall.c	/^syscall(void)$/;"	f	typeref:typename:void
syscalls	syscall.c	/^static int (*syscalls[])(void) = {$/;"	v	typeref:typename:int (* [])(void)	file:
sz	kernel.asm	/^  sz = 0;$/;"	d
sz	kernel.asm	/^  sz = PGROUNDUP(sz);$/;"	d
sz	kernel.asm	/^  sz = curproc->sz;$/;"	d
sz	proc.h	/^  uint sz;                     \/\/ Size of process memory (bytes)$/;"	m	struct:proc	typeref:typename:uint
t	mmu.h	/^  ushort t;          \/\/ Trap on task switch$/;"	m	struct:taskstate	typeref:typename:ushort
tags	Makefile	/^tags: $(OBJS) entryother.S _init$/;"	t
tar	Makefile	/^tar:$/;"	t
target	kernel.asm	/^  target = n;$/;"	d
taskstate	mmu.h	/^struct taskstate {$/;"	s
tf	proc.h	/^  struct trapframe *tf;        \/\/ Trap frame for current syscall$/;"	m	struct:proc	typeref:struct:trapframe *
ticks	trap.c	/^uint ticks;$/;"	v	typeref:typename:uint
ticks0	kernel.asm	/^  ticks0 = ticks;$/;"	d
tickslock	trap.c	/^struct spinlock tickslock;$/;"	v	typeref:struct:spinlock
togglecode	kbd.h	/^static uchar togglecode[256] =$/;"	v	typeref:typename:uchar[256]
tok	user/sh.asm	/^    tok = gettoken(ps, es, 0, 0);$/;"	d
total	user/usertests.asm	/^    total = 0;$/;"	d
total	user/usertests.asm	/^  total = 0;$/;"	d
trap	trap.c	/^trap(struct trapframe *tf)$/;"	f	typeref:typename:void
trapframe	x86.h	/^struct trapframe {$/;"	s
trapno	x86.h	/^  uint trapno;$/;"	m	struct:trapframe	typeref:typename:uint
trapret	kernel.asm	/^trapret:$/;"	l
trapret	trapasm.S	/^trapret:$/;"	l
ts	proc.h	/^  struct taskstate ts;         \/\/ Used by x86 to find stack for interrupt$/;"	m	struct:cpu	typeref:struct:taskstate
tvinit	trap.c	/^tvinit(void)$/;"	f	typeref:typename:void
type	elf.h	/^  uint type;$/;"	m	struct:proghdr	typeref:typename:uint
type	elf.h	/^  ushort type;$/;"	m	struct:elfhdr	typeref:typename:ushort
type	file.h	/^  enum { FD_NONE, FD_PIPE, FD_INODE } type;$/;"	m	struct:file	typeref:enum:file::__anonfd762ebb0103
type	file.h	/^  short type;         \/\/ copy of disk inode$/;"	m	struct:inode	typeref:typename:short
type	fs.h	/^  short type;           \/\/ File type$/;"	m	struct:dinode	typeref:typename:short
type	mmu.h	/^  uint type : 4;        \/\/ type(STS_{IG32,TG32})$/;"	m	struct:gatedesc	typeref:typename:uint:4
type	mmu.h	/^  uint type : 4;       \/\/ Segment type (see STS_ constants)$/;"	m	struct:segdesc	typeref:typename:uint:4
type	mp.h	/^  uchar type;                   \/\/ MP system config type$/;"	m	struct:mp	typeref:typename:uchar
type	mp.h	/^  uchar type;                   \/\/ entry type (0)$/;"	m	struct:mpproc	typeref:typename:uchar
type	mp.h	/^  uchar type;                   \/\/ entry type (2)$/;"	m	struct:mpioapic	typeref:typename:uchar
type	stat.h	/^  short type;  \/\/ Type of file$/;"	m	struct:stat	typeref:typename:short
type	user/sh.c	/^  int type;$/;"	m	struct:backcmd	typeref:typename:int	file:
type	user/sh.c	/^  int type;$/;"	m	struct:cmd	typeref:typename:int	file:
type	user/sh.c	/^  int type;$/;"	m	struct:execcmd	typeref:typename:int	file:
type	user/sh.c	/^  int type;$/;"	m	struct:listcmd	typeref:typename:int	file:
type	user/sh.c	/^  int type;$/;"	m	struct:pipecmd	typeref:typename:int	file:
type	user/sh.c	/^  int type;$/;"	m	struct:redircmd	typeref:typename:int	file:
uart	kernel.asm	/^  uart = 1;$/;"	d
uart	uart.c	/^static int uart;    \/\/ is there a uart?$/;"	v	typeref:typename:int	file:
uartgetc	uart.c	/^uartgetc(void)$/;"	f	typeref:typename:int	file:
uartinit	uart.c	/^uartinit(void)$/;"	f	typeref:typename:void
uartintr	uart.c	/^uartintr(void)$/;"	f	typeref:typename:void
uartputc	uart.c	/^uartputc(int c)$/;"	f	typeref:typename:void
uchar	kernel.asm	/^uchar ioapicid;$/;"	l
uchar	types.h	/^typedef unsigned char  uchar;$/;"	t	typeref:typename:unsigned char
uint	kernel.asm	/^uint ticks;$/;"	l
uint	types.h	/^typedef unsigned int   uint;$/;"	t	typeref:typename:unsigned int
uint	user/forktest.asm	/^uint$/;"	l
uint	user/grep.asm	/^uint$/;"	l
uint	user/kill.asm	/^uint$/;"	l
uint	user/ls.asm	/^uint$/;"	l
uint	user/sh.asm	/^uint$/;"	l
uint	user/stressfs.asm	/^uint$/;"	l
uint	user/usertests.asm	/^uint$/;"	l
uint	user/wc.asm	/^uint$/;"	l
uio	user/usertests.c	/^uio()$/;"	f	typeref:typename:void
uninit	user/usertests.c	/^char uninit[10000];$/;"	v	typeref:typename:char[10000]
unlinkread	user/usertests.c	/^unlinkread(void)$/;"	f	typeref:typename:void
unsigned	user/usertests.asm	/^unsigned int$/;"	l
unsigned	user/usertests.asm	/^unsigned long randstate = 1;$/;"	l
use_lock	kalloc.c	/^  int use_lock;$/;"	m	struct:__anon69d64d0c0108	typeref:typename:int	file:
user	Makefile	/^user:$/;"	t
userinit	proc.c	/^userinit(void)$/;"	f	typeref:typename:void
usertests	user/usertests.asm	/^usertests:     formato del fichero elf32-i386$/;"	l
ushort	types.h	/^typedef unsigned short ushort;$/;"	t	typeref:typename:unsigned short
uva2ka	vm.c	/^uva2ka(pde_t *pgdir, char *uva)$/;"	f	typeref:typename:char *
va	kernel.asm	/^    va = va0 + PGSIZE;$/;"	d
va0	kernel.asm	/^    va0 = (uint)PGROUNDDOWN(va);$/;"	d
vaddr	elf.h	/^  uint vaddr;$/;"	m	struct:proghdr	typeref:typename:uint
valid	file.h	/^  int valid;          \/\/ inode has been read from disk?$/;"	m	struct:inode	typeref:typename:int
validateint	user/usertests.c	/^validateint(int *p)$/;"	f	typeref:typename:void
validatetest	user/usertests.c	/^validatetest(void)$/;"	f	typeref:typename:void
vector0	kernel.asm	/^vector0:$/;"	l
vector0	vectors.S	/^vector0:$/;"	l
vector1	kernel.asm	/^vector1:$/;"	l
vector1	vectors.S	/^vector1:$/;"	l
vector10	kernel.asm	/^vector10:$/;"	l
vector10	vectors.S	/^vector10:$/;"	l
vector100	kernel.asm	/^vector100:$/;"	l
vector100	vectors.S	/^vector100:$/;"	l
vector101	kernel.asm	/^vector101:$/;"	l
vector101	vectors.S	/^vector101:$/;"	l
vector102	kernel.asm	/^vector102:$/;"	l
vector102	vectors.S	/^vector102:$/;"	l
vector103	kernel.asm	/^vector103:$/;"	l
vector103	vectors.S	/^vector103:$/;"	l
vector104	kernel.asm	/^vector104:$/;"	l
vector104	vectors.S	/^vector104:$/;"	l
vector105	kernel.asm	/^vector105:$/;"	l
vector105	vectors.S	/^vector105:$/;"	l
vector106	kernel.asm	/^vector106:$/;"	l
vector106	vectors.S	/^vector106:$/;"	l
vector107	kernel.asm	/^vector107:$/;"	l
vector107	vectors.S	/^vector107:$/;"	l
vector108	kernel.asm	/^vector108:$/;"	l
vector108	vectors.S	/^vector108:$/;"	l
vector109	kernel.asm	/^vector109:$/;"	l
vector109	vectors.S	/^vector109:$/;"	l
vector11	kernel.asm	/^vector11:$/;"	l
vector11	vectors.S	/^vector11:$/;"	l
vector110	kernel.asm	/^vector110:$/;"	l
vector110	vectors.S	/^vector110:$/;"	l
vector111	kernel.asm	/^vector111:$/;"	l
vector111	vectors.S	/^vector111:$/;"	l
vector112	kernel.asm	/^vector112:$/;"	l
vector112	vectors.S	/^vector112:$/;"	l
vector113	kernel.asm	/^vector113:$/;"	l
vector113	vectors.S	/^vector113:$/;"	l
vector114	kernel.asm	/^vector114:$/;"	l
vector114	vectors.S	/^vector114:$/;"	l
vector115	kernel.asm	/^vector115:$/;"	l
vector115	vectors.S	/^vector115:$/;"	l
vector116	kernel.asm	/^vector116:$/;"	l
vector116	vectors.S	/^vector116:$/;"	l
vector117	kernel.asm	/^vector117:$/;"	l
vector117	vectors.S	/^vector117:$/;"	l
vector118	kernel.asm	/^vector118:$/;"	l
vector118	vectors.S	/^vector118:$/;"	l
vector119	kernel.asm	/^vector119:$/;"	l
vector119	vectors.S	/^vector119:$/;"	l
vector12	kernel.asm	/^vector12:$/;"	l
vector12	vectors.S	/^vector12:$/;"	l
vector120	kernel.asm	/^vector120:$/;"	l
vector120	vectors.S	/^vector120:$/;"	l
vector121	kernel.asm	/^vector121:$/;"	l
vector121	vectors.S	/^vector121:$/;"	l
vector122	kernel.asm	/^vector122:$/;"	l
vector122	vectors.S	/^vector122:$/;"	l
vector123	kernel.asm	/^vector123:$/;"	l
vector123	vectors.S	/^vector123:$/;"	l
vector124	kernel.asm	/^vector124:$/;"	l
vector124	vectors.S	/^vector124:$/;"	l
vector125	kernel.asm	/^vector125:$/;"	l
vector125	vectors.S	/^vector125:$/;"	l
vector126	kernel.asm	/^vector126:$/;"	l
vector126	vectors.S	/^vector126:$/;"	l
vector127	kernel.asm	/^vector127:$/;"	l
vector127	vectors.S	/^vector127:$/;"	l
vector128	kernel.asm	/^vector128:$/;"	l
vector128	vectors.S	/^vector128:$/;"	l
vector129	kernel.asm	/^vector129:$/;"	l
vector129	vectors.S	/^vector129:$/;"	l
vector13	kernel.asm	/^vector13:$/;"	l
vector13	vectors.S	/^vector13:$/;"	l
vector130	kernel.asm	/^vector130:$/;"	l
vector130	vectors.S	/^vector130:$/;"	l
vector131	kernel.asm	/^vector131:$/;"	l
vector131	vectors.S	/^vector131:$/;"	l
vector132	kernel.asm	/^vector132:$/;"	l
vector132	vectors.S	/^vector132:$/;"	l
vector133	kernel.asm	/^vector133:$/;"	l
vector133	vectors.S	/^vector133:$/;"	l
vector134	kernel.asm	/^vector134:$/;"	l
vector134	vectors.S	/^vector134:$/;"	l
vector135	kernel.asm	/^vector135:$/;"	l
vector135	vectors.S	/^vector135:$/;"	l
vector136	kernel.asm	/^vector136:$/;"	l
vector136	vectors.S	/^vector136:$/;"	l
vector137	kernel.asm	/^vector137:$/;"	l
vector137	vectors.S	/^vector137:$/;"	l
vector138	kernel.asm	/^vector138:$/;"	l
vector138	vectors.S	/^vector138:$/;"	l
vector139	kernel.asm	/^vector139:$/;"	l
vector139	vectors.S	/^vector139:$/;"	l
vector14	kernel.asm	/^vector14:$/;"	l
vector14	vectors.S	/^vector14:$/;"	l
vector140	kernel.asm	/^vector140:$/;"	l
vector140	vectors.S	/^vector140:$/;"	l
vector141	kernel.asm	/^vector141:$/;"	l
vector141	vectors.S	/^vector141:$/;"	l
vector142	kernel.asm	/^vector142:$/;"	l
vector142	vectors.S	/^vector142:$/;"	l
vector143	kernel.asm	/^vector143:$/;"	l
vector143	vectors.S	/^vector143:$/;"	l
vector144	kernel.asm	/^vector144:$/;"	l
vector144	vectors.S	/^vector144:$/;"	l
vector145	kernel.asm	/^vector145:$/;"	l
vector145	vectors.S	/^vector145:$/;"	l
vector146	kernel.asm	/^vector146:$/;"	l
vector146	vectors.S	/^vector146:$/;"	l
vector147	kernel.asm	/^vector147:$/;"	l
vector147	vectors.S	/^vector147:$/;"	l
vector148	kernel.asm	/^vector148:$/;"	l
vector148	vectors.S	/^vector148:$/;"	l
vector149	kernel.asm	/^vector149:$/;"	l
vector149	vectors.S	/^vector149:$/;"	l
vector15	kernel.asm	/^vector15:$/;"	l
vector15	vectors.S	/^vector15:$/;"	l
vector150	kernel.asm	/^vector150:$/;"	l
vector150	vectors.S	/^vector150:$/;"	l
vector151	kernel.asm	/^vector151:$/;"	l
vector151	vectors.S	/^vector151:$/;"	l
vector152	kernel.asm	/^vector152:$/;"	l
vector152	vectors.S	/^vector152:$/;"	l
vector153	kernel.asm	/^vector153:$/;"	l
vector153	vectors.S	/^vector153:$/;"	l
vector154	kernel.asm	/^vector154:$/;"	l
vector154	vectors.S	/^vector154:$/;"	l
vector155	kernel.asm	/^vector155:$/;"	l
vector155	vectors.S	/^vector155:$/;"	l
vector156	kernel.asm	/^vector156:$/;"	l
vector156	vectors.S	/^vector156:$/;"	l
vector157	kernel.asm	/^vector157:$/;"	l
vector157	vectors.S	/^vector157:$/;"	l
vector158	kernel.asm	/^vector158:$/;"	l
vector158	vectors.S	/^vector158:$/;"	l
vector159	kernel.asm	/^vector159:$/;"	l
vector159	vectors.S	/^vector159:$/;"	l
vector16	kernel.asm	/^vector16:$/;"	l
vector16	vectors.S	/^vector16:$/;"	l
vector160	kernel.asm	/^vector160:$/;"	l
vector160	vectors.S	/^vector160:$/;"	l
vector161	kernel.asm	/^vector161:$/;"	l
vector161	vectors.S	/^vector161:$/;"	l
vector162	kernel.asm	/^vector162:$/;"	l
vector162	vectors.S	/^vector162:$/;"	l
vector163	kernel.asm	/^vector163:$/;"	l
vector163	vectors.S	/^vector163:$/;"	l
vector164	kernel.asm	/^vector164:$/;"	l
vector164	vectors.S	/^vector164:$/;"	l
vector165	kernel.asm	/^vector165:$/;"	l
vector165	vectors.S	/^vector165:$/;"	l
vector166	kernel.asm	/^vector166:$/;"	l
vector166	vectors.S	/^vector166:$/;"	l
vector167	kernel.asm	/^vector167:$/;"	l
vector167	vectors.S	/^vector167:$/;"	l
vector168	kernel.asm	/^vector168:$/;"	l
vector168	vectors.S	/^vector168:$/;"	l
vector169	kernel.asm	/^vector169:$/;"	l
vector169	vectors.S	/^vector169:$/;"	l
vector17	kernel.asm	/^vector17:$/;"	l
vector17	vectors.S	/^vector17:$/;"	l
vector170	kernel.asm	/^vector170:$/;"	l
vector170	vectors.S	/^vector170:$/;"	l
vector171	kernel.asm	/^vector171:$/;"	l
vector171	vectors.S	/^vector171:$/;"	l
vector172	kernel.asm	/^vector172:$/;"	l
vector172	vectors.S	/^vector172:$/;"	l
vector173	kernel.asm	/^vector173:$/;"	l
vector173	vectors.S	/^vector173:$/;"	l
vector174	kernel.asm	/^vector174:$/;"	l
vector174	vectors.S	/^vector174:$/;"	l
vector175	kernel.asm	/^vector175:$/;"	l
vector175	vectors.S	/^vector175:$/;"	l
vector176	kernel.asm	/^vector176:$/;"	l
vector176	vectors.S	/^vector176:$/;"	l
vector177	kernel.asm	/^vector177:$/;"	l
vector177	vectors.S	/^vector177:$/;"	l
vector178	kernel.asm	/^vector178:$/;"	l
vector178	vectors.S	/^vector178:$/;"	l
vector179	kernel.asm	/^vector179:$/;"	l
vector179	vectors.S	/^vector179:$/;"	l
vector18	kernel.asm	/^vector18:$/;"	l
vector18	vectors.S	/^vector18:$/;"	l
vector180	kernel.asm	/^vector180:$/;"	l
vector180	vectors.S	/^vector180:$/;"	l
vector181	kernel.asm	/^vector181:$/;"	l
vector181	vectors.S	/^vector181:$/;"	l
vector182	kernel.asm	/^vector182:$/;"	l
vector182	vectors.S	/^vector182:$/;"	l
vector183	kernel.asm	/^vector183:$/;"	l
vector183	vectors.S	/^vector183:$/;"	l
vector184	kernel.asm	/^vector184:$/;"	l
vector184	vectors.S	/^vector184:$/;"	l
vector185	kernel.asm	/^vector185:$/;"	l
vector185	vectors.S	/^vector185:$/;"	l
vector186	kernel.asm	/^vector186:$/;"	l
vector186	vectors.S	/^vector186:$/;"	l
vector187	kernel.asm	/^vector187:$/;"	l
vector187	vectors.S	/^vector187:$/;"	l
vector188	kernel.asm	/^vector188:$/;"	l
vector188	vectors.S	/^vector188:$/;"	l
vector189	kernel.asm	/^vector189:$/;"	l
vector189	vectors.S	/^vector189:$/;"	l
vector19	kernel.asm	/^vector19:$/;"	l
vector19	vectors.S	/^vector19:$/;"	l
vector190	kernel.asm	/^vector190:$/;"	l
vector190	vectors.S	/^vector190:$/;"	l
vector191	kernel.asm	/^vector191:$/;"	l
vector191	vectors.S	/^vector191:$/;"	l
vector192	kernel.asm	/^vector192:$/;"	l
vector192	vectors.S	/^vector192:$/;"	l
vector193	kernel.asm	/^vector193:$/;"	l
vector193	vectors.S	/^vector193:$/;"	l
vector194	kernel.asm	/^vector194:$/;"	l
vector194	vectors.S	/^vector194:$/;"	l
vector195	kernel.asm	/^vector195:$/;"	l
vector195	vectors.S	/^vector195:$/;"	l
vector196	kernel.asm	/^vector196:$/;"	l
vector196	vectors.S	/^vector196:$/;"	l
vector197	kernel.asm	/^vector197:$/;"	l
vector197	vectors.S	/^vector197:$/;"	l
vector198	kernel.asm	/^vector198:$/;"	l
vector198	vectors.S	/^vector198:$/;"	l
vector199	kernel.asm	/^vector199:$/;"	l
vector199	vectors.S	/^vector199:$/;"	l
vector2	kernel.asm	/^vector2:$/;"	l
vector2	vectors.S	/^vector2:$/;"	l
vector20	kernel.asm	/^vector20:$/;"	l
vector20	vectors.S	/^vector20:$/;"	l
vector200	kernel.asm	/^vector200:$/;"	l
vector200	vectors.S	/^vector200:$/;"	l
vector201	kernel.asm	/^vector201:$/;"	l
vector201	vectors.S	/^vector201:$/;"	l
vector202	kernel.asm	/^vector202:$/;"	l
vector202	vectors.S	/^vector202:$/;"	l
vector203	kernel.asm	/^vector203:$/;"	l
vector203	vectors.S	/^vector203:$/;"	l
vector204	kernel.asm	/^vector204:$/;"	l
vector204	vectors.S	/^vector204:$/;"	l
vector205	kernel.asm	/^vector205:$/;"	l
vector205	vectors.S	/^vector205:$/;"	l
vector206	kernel.asm	/^vector206:$/;"	l
vector206	vectors.S	/^vector206:$/;"	l
vector207	kernel.asm	/^vector207:$/;"	l
vector207	vectors.S	/^vector207:$/;"	l
vector208	kernel.asm	/^vector208:$/;"	l
vector208	vectors.S	/^vector208:$/;"	l
vector209	kernel.asm	/^vector209:$/;"	l
vector209	vectors.S	/^vector209:$/;"	l
vector21	kernel.asm	/^vector21:$/;"	l
vector21	vectors.S	/^vector21:$/;"	l
vector210	kernel.asm	/^vector210:$/;"	l
vector210	vectors.S	/^vector210:$/;"	l
vector211	kernel.asm	/^vector211:$/;"	l
vector211	vectors.S	/^vector211:$/;"	l
vector212	kernel.asm	/^vector212:$/;"	l
vector212	vectors.S	/^vector212:$/;"	l
vector213	kernel.asm	/^vector213:$/;"	l
vector213	vectors.S	/^vector213:$/;"	l
vector214	kernel.asm	/^vector214:$/;"	l
vector214	vectors.S	/^vector214:$/;"	l
vector215	kernel.asm	/^vector215:$/;"	l
vector215	vectors.S	/^vector215:$/;"	l
vector216	kernel.asm	/^vector216:$/;"	l
vector216	vectors.S	/^vector216:$/;"	l
vector217	kernel.asm	/^vector217:$/;"	l
vector217	vectors.S	/^vector217:$/;"	l
vector218	kernel.asm	/^vector218:$/;"	l
vector218	vectors.S	/^vector218:$/;"	l
vector219	kernel.asm	/^vector219:$/;"	l
vector219	vectors.S	/^vector219:$/;"	l
vector22	kernel.asm	/^vector22:$/;"	l
vector22	vectors.S	/^vector22:$/;"	l
vector220	kernel.asm	/^vector220:$/;"	l
vector220	vectors.S	/^vector220:$/;"	l
vector221	kernel.asm	/^vector221:$/;"	l
vector221	vectors.S	/^vector221:$/;"	l
vector222	kernel.asm	/^vector222:$/;"	l
vector222	vectors.S	/^vector222:$/;"	l
vector223	kernel.asm	/^vector223:$/;"	l
vector223	vectors.S	/^vector223:$/;"	l
vector224	kernel.asm	/^vector224:$/;"	l
vector224	vectors.S	/^vector224:$/;"	l
vector225	kernel.asm	/^vector225:$/;"	l
vector225	vectors.S	/^vector225:$/;"	l
vector226	kernel.asm	/^vector226:$/;"	l
vector226	vectors.S	/^vector226:$/;"	l
vector227	kernel.asm	/^vector227:$/;"	l
vector227	vectors.S	/^vector227:$/;"	l
vector228	kernel.asm	/^vector228:$/;"	l
vector228	vectors.S	/^vector228:$/;"	l
vector229	kernel.asm	/^vector229:$/;"	l
vector229	vectors.S	/^vector229:$/;"	l
vector23	kernel.asm	/^vector23:$/;"	l
vector23	vectors.S	/^vector23:$/;"	l
vector230	kernel.asm	/^vector230:$/;"	l
vector230	vectors.S	/^vector230:$/;"	l
vector231	kernel.asm	/^vector231:$/;"	l
vector231	vectors.S	/^vector231:$/;"	l
vector232	kernel.asm	/^vector232:$/;"	l
vector232	vectors.S	/^vector232:$/;"	l
vector233	kernel.asm	/^vector233:$/;"	l
vector233	vectors.S	/^vector233:$/;"	l
vector234	kernel.asm	/^vector234:$/;"	l
vector234	vectors.S	/^vector234:$/;"	l
vector235	kernel.asm	/^vector235:$/;"	l
vector235	vectors.S	/^vector235:$/;"	l
vector236	kernel.asm	/^vector236:$/;"	l
vector236	vectors.S	/^vector236:$/;"	l
vector237	kernel.asm	/^vector237:$/;"	l
vector237	vectors.S	/^vector237:$/;"	l
vector238	kernel.asm	/^vector238:$/;"	l
vector238	vectors.S	/^vector238:$/;"	l
vector239	kernel.asm	/^vector239:$/;"	l
vector239	vectors.S	/^vector239:$/;"	l
vector24	kernel.asm	/^vector24:$/;"	l
vector24	vectors.S	/^vector24:$/;"	l
vector240	kernel.asm	/^vector240:$/;"	l
vector240	vectors.S	/^vector240:$/;"	l
vector241	kernel.asm	/^vector241:$/;"	l
vector241	vectors.S	/^vector241:$/;"	l
vector242	kernel.asm	/^vector242:$/;"	l
vector242	vectors.S	/^vector242:$/;"	l
vector243	kernel.asm	/^vector243:$/;"	l
vector243	vectors.S	/^vector243:$/;"	l
vector244	kernel.asm	/^vector244:$/;"	l
vector244	vectors.S	/^vector244:$/;"	l
vector245	kernel.asm	/^vector245:$/;"	l
vector245	vectors.S	/^vector245:$/;"	l
vector246	kernel.asm	/^vector246:$/;"	l
vector246	vectors.S	/^vector246:$/;"	l
vector247	kernel.asm	/^vector247:$/;"	l
vector247	vectors.S	/^vector247:$/;"	l
vector248	kernel.asm	/^vector248:$/;"	l
vector248	vectors.S	/^vector248:$/;"	l
vector249	kernel.asm	/^vector249:$/;"	l
vector249	vectors.S	/^vector249:$/;"	l
vector25	kernel.asm	/^vector25:$/;"	l
vector25	vectors.S	/^vector25:$/;"	l
vector250	kernel.asm	/^vector250:$/;"	l
vector250	vectors.S	/^vector250:$/;"	l
vector251	kernel.asm	/^vector251:$/;"	l
vector251	vectors.S	/^vector251:$/;"	l
vector252	kernel.asm	/^vector252:$/;"	l
vector252	vectors.S	/^vector252:$/;"	l
vector253	kernel.asm	/^vector253:$/;"	l
vector253	vectors.S	/^vector253:$/;"	l
vector254	kernel.asm	/^vector254:$/;"	l
vector254	vectors.S	/^vector254:$/;"	l
vector255	kernel.asm	/^vector255:$/;"	l
vector255	vectors.S	/^vector255:$/;"	l
vector26	kernel.asm	/^vector26:$/;"	l
vector26	vectors.S	/^vector26:$/;"	l
vector27	kernel.asm	/^vector27:$/;"	l
vector27	vectors.S	/^vector27:$/;"	l
vector28	kernel.asm	/^vector28:$/;"	l
vector28	vectors.S	/^vector28:$/;"	l
vector29	kernel.asm	/^vector29:$/;"	l
vector29	vectors.S	/^vector29:$/;"	l
vector3	kernel.asm	/^vector3:$/;"	l
vector3	vectors.S	/^vector3:$/;"	l
vector30	kernel.asm	/^vector30:$/;"	l
vector30	vectors.S	/^vector30:$/;"	l
vector31	kernel.asm	/^vector31:$/;"	l
vector31	vectors.S	/^vector31:$/;"	l
vector32	kernel.asm	/^vector32:$/;"	l
vector32	vectors.S	/^vector32:$/;"	l
vector33	kernel.asm	/^vector33:$/;"	l
vector33	vectors.S	/^vector33:$/;"	l
vector34	kernel.asm	/^vector34:$/;"	l
vector34	vectors.S	/^vector34:$/;"	l
vector35	kernel.asm	/^vector35:$/;"	l
vector35	vectors.S	/^vector35:$/;"	l
vector36	kernel.asm	/^vector36:$/;"	l
vector36	vectors.S	/^vector36:$/;"	l
vector37	kernel.asm	/^vector37:$/;"	l
vector37	vectors.S	/^vector37:$/;"	l
vector38	kernel.asm	/^vector38:$/;"	l
vector38	vectors.S	/^vector38:$/;"	l
vector39	kernel.asm	/^vector39:$/;"	l
vector39	vectors.S	/^vector39:$/;"	l
vector4	kernel.asm	/^vector4:$/;"	l
vector4	vectors.S	/^vector4:$/;"	l
vector40	kernel.asm	/^vector40:$/;"	l
vector40	vectors.S	/^vector40:$/;"	l
vector41	kernel.asm	/^vector41:$/;"	l
vector41	vectors.S	/^vector41:$/;"	l
vector42	kernel.asm	/^vector42:$/;"	l
vector42	vectors.S	/^vector42:$/;"	l
vector43	kernel.asm	/^vector43:$/;"	l
vector43	vectors.S	/^vector43:$/;"	l
vector44	kernel.asm	/^vector44:$/;"	l
vector44	vectors.S	/^vector44:$/;"	l
vector45	kernel.asm	/^vector45:$/;"	l
vector45	vectors.S	/^vector45:$/;"	l
vector46	kernel.asm	/^vector46:$/;"	l
vector46	vectors.S	/^vector46:$/;"	l
vector47	kernel.asm	/^vector47:$/;"	l
vector47	vectors.S	/^vector47:$/;"	l
vector48	kernel.asm	/^vector48:$/;"	l
vector48	vectors.S	/^vector48:$/;"	l
vector49	kernel.asm	/^vector49:$/;"	l
vector49	vectors.S	/^vector49:$/;"	l
vector5	kernel.asm	/^vector5:$/;"	l
vector5	vectors.S	/^vector5:$/;"	l
vector50	kernel.asm	/^vector50:$/;"	l
vector50	vectors.S	/^vector50:$/;"	l
vector51	kernel.asm	/^vector51:$/;"	l
vector51	vectors.S	/^vector51:$/;"	l
vector52	kernel.asm	/^vector52:$/;"	l
vector52	vectors.S	/^vector52:$/;"	l
vector53	kernel.asm	/^vector53:$/;"	l
vector53	vectors.S	/^vector53:$/;"	l
vector54	kernel.asm	/^vector54:$/;"	l
vector54	vectors.S	/^vector54:$/;"	l
vector55	kernel.asm	/^vector55:$/;"	l
vector55	vectors.S	/^vector55:$/;"	l
vector56	kernel.asm	/^vector56:$/;"	l
vector56	vectors.S	/^vector56:$/;"	l
vector57	kernel.asm	/^vector57:$/;"	l
vector57	vectors.S	/^vector57:$/;"	l
vector58	kernel.asm	/^vector58:$/;"	l
vector58	vectors.S	/^vector58:$/;"	l
vector59	kernel.asm	/^vector59:$/;"	l
vector59	vectors.S	/^vector59:$/;"	l
vector6	kernel.asm	/^vector6:$/;"	l
vector6	vectors.S	/^vector6:$/;"	l
vector60	kernel.asm	/^vector60:$/;"	l
vector60	vectors.S	/^vector60:$/;"	l
vector61	kernel.asm	/^vector61:$/;"	l
vector61	vectors.S	/^vector61:$/;"	l
vector62	kernel.asm	/^vector62:$/;"	l
vector62	vectors.S	/^vector62:$/;"	l
vector63	kernel.asm	/^vector63:$/;"	l
vector63	vectors.S	/^vector63:$/;"	l
vector64	kernel.asm	/^vector64:$/;"	l
vector64	vectors.S	/^vector64:$/;"	l
vector65	kernel.asm	/^vector65:$/;"	l
vector65	vectors.S	/^vector65:$/;"	l
vector66	kernel.asm	/^vector66:$/;"	l
vector66	vectors.S	/^vector66:$/;"	l
vector67	kernel.asm	/^vector67:$/;"	l
vector67	vectors.S	/^vector67:$/;"	l
vector68	kernel.asm	/^vector68:$/;"	l
vector68	vectors.S	/^vector68:$/;"	l
vector69	kernel.asm	/^vector69:$/;"	l
vector69	vectors.S	/^vector69:$/;"	l
vector7	kernel.asm	/^vector7:$/;"	l
vector7	vectors.S	/^vector7:$/;"	l
vector70	kernel.asm	/^vector70:$/;"	l
vector70	vectors.S	/^vector70:$/;"	l
vector71	kernel.asm	/^vector71:$/;"	l
vector71	vectors.S	/^vector71:$/;"	l
vector72	kernel.asm	/^vector72:$/;"	l
vector72	vectors.S	/^vector72:$/;"	l
vector73	kernel.asm	/^vector73:$/;"	l
vector73	vectors.S	/^vector73:$/;"	l
vector74	kernel.asm	/^vector74:$/;"	l
vector74	vectors.S	/^vector74:$/;"	l
vector75	kernel.asm	/^vector75:$/;"	l
vector75	vectors.S	/^vector75:$/;"	l
vector76	kernel.asm	/^vector76:$/;"	l
vector76	vectors.S	/^vector76:$/;"	l
vector77	kernel.asm	/^vector77:$/;"	l
vector77	vectors.S	/^vector77:$/;"	l
vector78	kernel.asm	/^vector78:$/;"	l
vector78	vectors.S	/^vector78:$/;"	l
vector79	kernel.asm	/^vector79:$/;"	l
vector79	vectors.S	/^vector79:$/;"	l
vector8	kernel.asm	/^vector8:$/;"	l
vector8	vectors.S	/^vector8:$/;"	l
vector80	kernel.asm	/^vector80:$/;"	l
vector80	vectors.S	/^vector80:$/;"	l
vector81	kernel.asm	/^vector81:$/;"	l
vector81	vectors.S	/^vector81:$/;"	l
vector82	kernel.asm	/^vector82:$/;"	l
vector82	vectors.S	/^vector82:$/;"	l
vector83	kernel.asm	/^vector83:$/;"	l
vector83	vectors.S	/^vector83:$/;"	l
vector84	kernel.asm	/^vector84:$/;"	l
vector84	vectors.S	/^vector84:$/;"	l
vector85	kernel.asm	/^vector85:$/;"	l
vector85	vectors.S	/^vector85:$/;"	l
vector86	kernel.asm	/^vector86:$/;"	l
vector86	vectors.S	/^vector86:$/;"	l
vector87	kernel.asm	/^vector87:$/;"	l
vector87	vectors.S	/^vector87:$/;"	l
vector88	kernel.asm	/^vector88:$/;"	l
vector88	vectors.S	/^vector88:$/;"	l
vector89	kernel.asm	/^vector89:$/;"	l
vector89	vectors.S	/^vector89:$/;"	l
vector9	kernel.asm	/^vector9:$/;"	l
vector9	vectors.S	/^vector9:$/;"	l
vector90	kernel.asm	/^vector90:$/;"	l
vector90	vectors.S	/^vector90:$/;"	l
vector91	kernel.asm	/^vector91:$/;"	l
vector91	vectors.S	/^vector91:$/;"	l
vector92	kernel.asm	/^vector92:$/;"	l
vector92	vectors.S	/^vector92:$/;"	l
vector93	kernel.asm	/^vector93:$/;"	l
vector93	vectors.S	/^vector93:$/;"	l
vector94	kernel.asm	/^vector94:$/;"	l
vector94	vectors.S	/^vector94:$/;"	l
vector95	kernel.asm	/^vector95:$/;"	l
vector95	vectors.S	/^vector95:$/;"	l
vector96	kernel.asm	/^vector96:$/;"	l
vector96	vectors.S	/^vector96:$/;"	l
vector97	kernel.asm	/^vector97:$/;"	l
vector97	vectors.S	/^vector97:$/;"	l
vector98	kernel.asm	/^vector98:$/;"	l
vector98	vectors.S	/^vector98:$/;"	l
vector99	kernel.asm	/^vector99:$/;"	l
vector99	vectors.S	/^vector99:$/;"	l
vectors	vectors.S	/^vectors:$/;"	l
vectors.S	Makefile	/^vectors.S: vectors.pl$/;"	t
version	elf.h	/^  uint version;$/;"	m	struct:elfhdr	typeref:typename:uint
version	mp.h	/^  uchar version;                \/\/ I\/O APIC version$/;"	m	struct:mpioapic	typeref:typename:uchar
version	mp.h	/^  uchar version;                \/\/ [14]$/;"	m	struct:mpconf	typeref:typename:uchar
version	mp.h	/^  uchar version;                \/\/ local APIC verison$/;"	m	struct:mpproc	typeref:typename:uchar
virt	vm.c	/^  void *virt;$/;"	m	struct:kmap	typeref:typename:void *	file:
void	bootblock.asm	/^void$/;"	l
void	kernel.asm	/^void$/;"	l
void	user/cat.asm	/^void$/;"	l
void	user/echo.asm	/^void$/;"	l
void	user/forktest.asm	/^void$/;"	l
void	user/grep.asm	/^void$/;"	l
void	user/init.asm	/^void$/;"	l
void	user/kill.asm	/^void$/;"	l
void	user/ln.asm	/^void$/;"	l
void	user/ls.asm	/^void$/;"	l
void	user/mkdir.asm	/^void$/;"	l
void	user/rm.asm	/^void$/;"	l
void	user/sh.asm	/^void$/;"	l
void	user/stressfs.asm	/^void$/;"	l
void	user/usertests.asm	/^void argptest()$/;"	l
void	user/usertests.asm	/^void dirtest(void)$/;"	l
void	user/usertests.asm	/^void$/;"	l
void	user/wc.asm	/^void$/;"	l
w	console.c	/^  uint w;  \/\/ Write index$/;"	m	struct:__anon96a473a90208	typeref:typename:uint	file:
wait	proc.c	/^wait(void)$/;"	f	typeref:typename:int
waitdisk	bootmain.c	/^waitdisk(void)$/;"	f	typeref:typename:void
wakeup	proc.c	/^wakeup(void *chan)$/;"	f	typeref:typename:void
wakeup1	proc.c	/^wakeup1(void *chan)$/;"	f	typeref:typename:void	file:
walkpgdir	vm.c	/^walkpgdir(pde_t *pgdir, const void *va, int alloc)$/;"	f	typeref:typename:pte_t *	file:
wc	user/wc.asm	/^wc:     formato del fichero elf32-i386$/;"	l
wc	user/wc.c	/^wc(int fd, char *name)$/;"	f	typeref:typename:void
whitespace	user/sh.c	/^char whitespace[] = " \\t\\r\\n\\v";$/;"	v	typeref:typename:char[]
winode	mkfs.c	/^winode(uint inum, struct dinode *ip)$/;"	f	typeref:typename:void
writable	file.h	/^  char writable;$/;"	m	struct:file	typeref:typename:char
write	file.h	/^  int (*write)(struct inode*, char*, int);$/;"	m	struct:devsw	typeref:typename:int (*)(struct inode *,char *,int)
write_head	log.c	/^write_head(void)$/;"	f	typeref:typename:void	file:
write_log	log.c	/^write_log(void)$/;"	f	typeref:typename:void	file:
writefile	cuth	/^sub writefile($@){$/;"	s
writei	fs.c	/^writei(struct inode *ip, char *src, uint off, uint n)$/;"	f	typeref:typename:int
writeopen	pipe.c	/^  int writeopen;  \/\/ write fd is still open$/;"	m	struct:pipe	typeref:typename:int	file:
writetest	user/usertests.c	/^writetest(void)$/;"	f	typeref:typename:void
writetest1	user/usertests.c	/^writetest1(void)$/;"	f	typeref:typename:void
wsect	mkfs.c	/^wsect(uint sec, void *buf)$/;"	f	typeref:typename:void
x	kernel.asm	/^    x = -xx;$/;"	d
x	kernel.asm	/^    x = xx;$/;"	d
x	user/cat.asm	/^    x = -xx;$/;"	d
x	user/cat.asm	/^    x = xx;$/;"	d
x	user/echo.asm	/^    x = -xx;$/;"	d
x	user/echo.asm	/^    x = xx;$/;"	d
x	user/grep.asm	/^    x = -xx;$/;"	d
x	user/grep.asm	/^    x = xx;$/;"	d
x	user/init.asm	/^    x = -xx;$/;"	d
x	user/init.asm	/^    x = xx;$/;"	d
x	user/kill.asm	/^    x = -xx;$/;"	d
x	user/kill.asm	/^    x = xx;$/;"	d
x	user/ln.asm	/^    x = -xx;$/;"	d
x	user/ln.asm	/^    x = xx;$/;"	d
x	user/ls.asm	/^    x = -xx;$/;"	d
x	user/ls.asm	/^    x = xx;$/;"	d
x	user/mkdir.asm	/^    x = -xx;$/;"	d
x	user/mkdir.asm	/^    x = xx;$/;"	d
x	user/rm.asm	/^    x = -xx;$/;"	d
x	user/rm.asm	/^    x = xx;$/;"	d
x	user/sh.asm	/^    x = -xx;$/;"	d
x	user/sh.asm	/^    x = xx;$/;"	d
x	user/stressfs.asm	/^    x = -xx;$/;"	d
x	user/stressfs.asm	/^    x = xx;$/;"	d
x	user/umalloc.c	/^  Align x;$/;"	m	union:header	typeref:typename:Align	file:
x	user/usertests.asm	/^    x = -xx;$/;"	d
x	user/usertests.asm	/^    x = x * 1103515245 + 12345;$/;"	d
x	user/usertests.asm	/^    x = xx;$/;"	d
x	user/wc.asm	/^    x = -xx;$/;"	d
x	user/wc.asm	/^    x = xx;$/;"	d
xchecksum	mp.h	/^  uchar xchecksum;              \/\/ extended table checksum$/;"	m	struct:mpconf	typeref:typename:uchar
xchg	x86.h	/^xchg(volatile uint *addr, uint newval)$/;"	f	typeref:typename:uint
xint	mkfs.c	/^xint(uint x)$/;"	f	typeref:typename:uint
xlength	mp.h	/^  ushort xlength;               \/\/ extended table length$/;"	m	struct:mpconf	typeref:typename:ushort
xshort	mkfs.c	/^xshort(ushort x)$/;"	f	typeref:typename:ushort
xticks	kernel.asm	/^  xticks = ticks;$/;"	d
xv6.img	Makefile	/^xv6.img: bootblock kernel$/;"	t
xv6.pdf	Makefile	/^xv6.pdf: $(PRINT)$/;"	t
xv6memfs.img	Makefile	/^xv6memfs.img: bootblock kernelmemfs$/;"	t
year	date.h	/^  uint year;$/;"	m	struct:rtcdate	typeref:typename:uint
yield	proc.c	/^yield(void)$/;"	f	typeref:typename:void
zeroes	mkfs.c	/^char zeroes[BSIZE];$/;"	v	typeref:typename:char[]
zombie	user/zombie.asm	/^zombie:     formato del fichero elf32-i386$/;"	l
